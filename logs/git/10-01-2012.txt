[00:00] <EugeneKay> It seems like the sort of thing that oughta be doable in a bit of bash

[00:00] <sitaram> and here's the code: http://dpaste.org/6nRqN/

[00:00] *** Agos left
[00:00] *** Agos joined
[00:01] *** softcoder left
[00:03] <Peeks> cheers :) crashed at line 47 -> mktemp : command not found.

[00:03] <Peeks> oh wells :) thanks for the suggestions anyways

[00:03] *** neataroni joined
[00:03] <sitaram> Peeks: you can work around that... hard code it to some safe directory I guess

[00:04] <neataroni> i cant use my ~/.ssh/id_rsa because its permissions are too open, what should i set the permissions to?

[00:04] <sitaram> and take out the 'trap' on the next line for safety

[00:04] <sitaram> 700

[00:04] *** duckxx left
[00:04] *** duckxx joined
[00:05] <sitaram> erm, 400 or 600 is even better, neataroni

[00:05] <neataroni> sitaram: ok

[00:06] *** Agos left
[00:06] *** cenuij left
[00:06] *** cenuij joined
[00:06] *** cenuij left
[00:06] *** cenuij joined
[00:07] <neataroni> sitaram: i just changed the perms to 400, when i run ssh -vT [email@hidden.address] i get a box asking for pword, but i dont know what the pword is

[00:07] *** dAnjou joined
[00:07] *** baburdick left
[00:07] <sitaram> is it asking for a pass *word* or a pass *phrase*

[00:07] *** Vortex34 left
[00:07] *** Morphous_ joined
[00:08] <neataroni> sitaram: phrase

[00:09] <offby1> What's the idiom for "I want to test just what's in the index, but not the various other changes in my work tree"?

[00:09] <offby1> I'm sure I've read this somewhere, but cannot remember what it is.

[00:09] *** baburdick joined
[00:09] *** duckxx left
[00:09] *** johnanderson left
[00:09] <offby1> (I've actually come up with a solution on my own, but I'm a little uneasy because it doesn't seem familiar)

[00:10] <dAnjou> sorry, i googled a bit but i didn't really find anything that i understand and will do what i want. i want to "checkout" a specific commit just to look how things worked there and whether they worked at all. but i want to go back to the current commit without touching anything. how can i do that? (reset, revert, checkout confuse me)

[00:11] *** johnanderson joined
[00:11] <dAnjou> *+afterwards

[00:12] <offby1> dAnjou: (funny how your question is somewhat similar to mine) I'd just "git checkout SPECIFIC-COMMIT", then when you're done, "git checkout -".

[00:13] <sitaram> neataroni: only you would know that; all I can say is a passphrase is local to the machine (has nothing to do with the remote side) and is basically a "lock" on the private key.  When you ran ssh-keygen you added one

[00:13] <offby1> "reset" and "checkout" are indeed confusing.

[00:13] <sitaram> offby1: 'git stash -k -u' I suspect

[00:13] <dAnjou> offby1: indeed, thanks

[00:13] <offby1> sitaram: that's part of my home-brew solution :)

[00:14] <diverdude> if i get this output, is gitolite then configured properly? http://bin.cakephp.org/view/1311922588

[00:14] <sitaram> offby1: part of?  should be all of it... then "make test" or eqvt, then git stash pop

[00:14] <offby1> sitaram: followed by "git checkout-index --force", which I'd never heard of until today.

[00:14] <neataroni>  sitaram: aha, i didnt run ssh keygen, i just made a file with vim

[00:14] <offby1> hmm, lemme think now.

[00:14] <neataroni> there is the problem

[00:14] *** davidfetter_vmw left
[00:14] *** beaufour left
[00:14] <aro> how do i clone a repository into a non-empty folder?

[00:15] <sitaram> neataroni: you just made an ssh key with vim?  you need to go out and get drunk... seriously, you'll do more good there :-)

[00:15] *** matsebc left
[00:15] *** dcarper left
[00:15] <neataroni> sitaram: if  your suggesting im an incompetent programmer then, yes, i am

[00:15] <sitaram> diverdude: seems ok but I'd like you to try one thing

[00:15] <diverdude> sitaram: yes ok?

[00:15] *** tiglionabbit joined
[00:15] * offby1 takes a number

[00:16] <sitaram> neataroni: incompetenr?  not at all... confused or in over your head with ssh (very common by the way), yes

[00:16] <cmn> aro: if 'git clone <url> .' doesn't work, git init && git remote -f add origin <url>

[00:16] <neataroni> sitaram: yea, no doubt

[00:17] <sitaram> diverdude: edit ~/.gitolite.rc on the server and add this line carefully, starting from the $ to the ";" at the end: $ENV{LANG} = "C";

[00:17] *** matsebc joined
[00:17] <sitaram> diverdude: then see if it works

[00:17] <sitaram> offby1: why would you need that command?

[00:17] *** Peeks left
[00:18] <offby1> Beats me :)

[00:18] <offby1> lemme see if I can figure out what I thought I needed it.

[00:18] <sitaram> offby1: by definition, the git stash would leave things such that that command should be a no-op (but you can check with 'git diff')

[00:18] *** dvide joined
[00:18] <aro> git clone url . tells me fatal: destination path '.' already exists and is not an empty directory.

[00:18] <sitaram> or even git status

[00:18] <neataroni> sitaram: i just ran ssh-keygen, it makes id_rsa, and id_rsa.pub, but git still doesnt like them, i get Permission denied (publickey)

[00:18] *** FLeiXiuS left
[00:18] <diverdude> sitaram: do i just add it it in the end of the file?

[00:19] <sitaram> neataroni: you need to use the website to paste in the ".pub" part of the new keypair you just created before it will work

[00:19] *** towski joined
[00:19] <sitaram> diverdude: anywhere before the "1;" at the end

[00:19] <neataroni> sitaram: excellent

[00:19] <cmn> aro: thought it might, then run the other commands I said

[00:19] <aro> cmn: error: unknown switch `f'

[00:20] <cmn> it goes after the 'add', sorry

[00:20] <aro> ok

[00:21] <diverdude> sitaram: i still get this: http://bin.cakephp.org/pastes/edit/71785

[00:21] <aro> so when i want to update my copy - just run a clone?

[00:21] <aro> or a pull

[00:21] <cmn> when you want to update, you run fetch

[00:21] <sitaram> dAnjou: although it does not address 'revert', !gc should have a good explanation of 'reset' versus 'checkout' in broad terms (ignoring all the nuances caused by the number of command line options they have)

[00:21] <cmn> the clone command is little more than init && remote add

[00:22] *** duckxx joined
[00:22] <offby1> sitaram: you are correct as usual, sir; I can't see any difference whether or not I use "git checkout-index"

[00:22] <sitaram> diverdude: I cant read that URL

[00:22] *** idoru joined
[00:22] <sitaram> offby1: "as usual"?  you <opposite of wound> me!

[00:22] <diverdude> sitaram: sorry...this is the one: http://bin.cakephp.org/view/1311922588

[00:22] <blueyed> I am sorry to ask again: what's the proposed way to get some file from a forked branch into a origin-based branch (derived from where I forked, but easily merged). Is it just "clone origin again and apply the whole file there"? Git would probably recognize that I have the changes in my fork?!

[00:23] *** kanzie joined
[00:23] *** scelis joined
[00:23] *** brainbox1100 left
[00:23] <kanzie> Hey, if I have two commits and I wish to roll back all code to the previous commit, how do I do this? If there a way to tag previous commits and then use this tag as a shorthand to rollback to it?

[00:24] <sitaram> diverdude: perhaps the warning comes even before perl gets to that spot.  You'll have to add 'export LANG=C' or something to one of your ".bash*" or ".profile" files

[00:24] *** zsw joined
[00:24] <neataroni> sitaram: woahhhhh i am looking at my own code on github, i feel like a celebrity

[00:24] <sitaram> diverdude: anyway I suspect the message, while annoying, is harmless

[00:24] <diverdude> sitaram: just to make sure...this is the file: http://bin.cakephp.org/view/1421524642

[00:25] *** Heimidal left
[00:25] <zsw> Is there a nice way to quiet the line "Unpacking objects" from the command 'git push -q' ?

[00:25] <zsw> currently it's showing up on stderr

[00:25] <diverdude> sitaram: did i add the line correctly?

[00:25] <neataroni> how do i not push .pyc's

[00:25] *** cschneid left
[00:26] *** troyt joined
[00:26] <sitaram> diverdude: you did but I have a feeling the warning is coming up as soon as perl *starts* up so it didnt help

[00:26] <sitaram> neataroni: man git-ignore

[00:26] *** FernandoBasso left
[00:26] <thorbjornDX> kanzie: you can use tags if you want (man git-tag), or you can just use the first few characters in the sha1 of the commit

[00:26] <gitinfo> kanzie: the git-tag manpage is available at http://jk.gs/git-tag.html

[00:26] <kanzie> thorbjornDX: thanks, and how do I best roll back to a previous omcmit

[00:27] <kanzie> commit

[00:27] <neataroni> sitaram: says "no manual entry for git-ignore"

[00:27] <sitaram> neataroni: is this windows?

[00:27] *** ehsan left
[00:27] <thiago> gitignore

[00:27] <diverdude> sitaram: yeah ok

[00:27] <neataroni> sitaram: nope, os x 10.7

[00:27] <sitaram> thiago: thanks

[00:27] <sitaram> neataroni: man gitignore

[00:27] <gitinfo> neataroni: the gitignore manpage is available at http://jk.gs/gitignore.html

[00:27] <kanzie> thorbjornDX: is it enough with git checkout xxx

[00:27] <diverdude> sitaram: its not that important...as long as it works :)

[00:27] <offby1> sitaram: strictly speaking, I think I want "git stash pop --index".

[00:27] <sitaram> diverdude: do you have root on your machine

[00:27] <thorbjornDX> kanzie: if you have committed all of your changes, you can just do a git reset

[00:27] <diverdude> sitaram: yes i have

[00:28] <kanzie> ok

[00:28] * offby1 awards sitaram the 2012 "IRC Multitasking" prize

[00:28] <kanzie> thorbjornDX: git reset --hard xxx

[00:28] <kanzie> ?

[00:28] <thorbjornDX> kanzie, give this a quick read first: http://stackoverflow.com/questions/373812/rollback-file-to-much-earlier-version

[00:28] <sitaram> offby1: shouldn't need to, since the index was not stashed

[00:28] <thorbjornDX> kanzie, you shouldn't need --hard if you don't have local modifications

[00:28] *** mandric left
[00:29] <sitaram> diverdude: got a few minutes to spare?

[00:29] *** PerlJam left
[00:29] <diverdude> sitaram: of course

[00:29] <sitaram> diverdude: what OS/distro is this?

[00:30] <diverdude> sitaram: server is ubuntu 10.10 i386 serverED

[00:30] <sitaram> diverdude: ok, create a brand new user (that you will throw away later; we're only doing this to show how you how easy a gitolite install *should be*)

[00:30] <diverdude> sitaram: client macOSX 10.7

[00:30] <sitaram> diverdude: on the server I mean

[00:30] <diverdude> sitaram: sure

[00:31] *** dcarper joined
[00:31] <diverdude> sitaram: add it like this: sudo adduser --system --shell /bin/sh --gecos 'Git version control' --group --disabled-password --home /home/gitusr gitusr ok?

[00:32] *** glcrazy left
[00:32] <sitaram> diverdude: I dont know Ubuntu but I guess it's ok.  Not sure about the disabled password .. some sshds take that to mean disable ssh login also

[00:32] <diverdude> sitaram: yeah ok...ill remove that

[00:33] <diverdude> sitaram: ok...created

[00:33] <sitaram> now copy you ~/.ssh/id_rsa.pub from your client as "/tmp/dude.pub" on the server

[00:33] <sitaram> s/you/your

[00:33] *** k299 left
[00:33] *** AaronMT left
[00:35] <diverdude> done

[00:35] <sitaram> diverdude: ok, now on the server, become root, then "su - gitusr"

[00:35] <sitaram> if that is the user you added, as I see above

[00:35] *** dcarper left
[00:35] *** PerlJam joined
[00:36] <diverdude> yes

[00:36] <sitaram> diverdude: now type in: git clone git://github.com/sitaramc/gitolite

[00:37] <diverdude> sitaram: ok.. i have already done that previously in /usr/lib. is it ok to have 2 versions?

[00:38] <sitaram> diverdude: we wil find out; you're doing all this as 'gitusr' and not as root so you cannot harm anything outside, and this is a throwaway user anyway

[00:38] *** baburdick left
[00:38] <diverdude> sitaram: ahhh ok nice

[00:38] <diverdude> sitaram: ok so ill just clone it in /home/gitusr

[00:38] *** v0n left
[00:39] *** maletor joined
[00:39] *** baburdick joined
[00:39] <diverdude> done

[00:39] <sitaram> diverdude: I *did* say to go in as root then 'su - gitusr'; you did that before the clone right?

[00:40] *** zsw left
[00:40] <diverdude> yes i am as gitusr when i did the clone

[00:40] <sitaram> diverdude: good.  Now run: gitolite/src/gl-system-install

[00:40] <diverdude> id shows: uid=121(gitusr) gid=129(gitusr) groups=129(gitusr)

[00:40] <sitaram> diverdude: should just output an informational message of 2 lines

[00:40] *** satyanash left
[00:41] *** jryans left
[00:41] *** deltree_ joined
[00:41] <diverdude> sitaram: that throws an error

[00:41] <diverdude> sitaram: i was struggeling with this error earlier today also

[00:41] *** slicslak joined
[00:41] <sitaram> pastebin it

[00:42] <diverdude> sitaram: sitaram http://bin.cakephp.org/view/1578945326

[00:42] *** yshh joined
[00:42] *** yshh left
[00:43] *** Cromulent left
[00:43] *** yshh joined
[00:43] *** neataroni left
[00:43] <sitaram> diverdude: that's a warning not an error.  Just do what it says.  Let me be specific, I'll give you the commands

[00:44] <diverdude> sitaram: yeah ok...its a warning. sorry

[00:44] <sitaram> diverdude: can you check "ls -al /tmp/dude.pub" to make sure it exists?

[00:44] *** Hapz left
[00:45] <diverdude> sitaram: its there

[00:45] <sitaram> ok, now run this: PATH=/home/gitusr/bin:$PATH; gl-setup -q /tmp/dude.pub

[00:46] *** shurane joined
[00:47] *** thorbjornDX left
[00:47] <diverdude> sitaram: it gives me this: http://bin.cakephp.org/view/517363615

[00:47] *** shurane left
[00:47] *** yshh left
[00:47] <sitaram> diverdude: do you have 'copy-paste' functionality between your IRC client and your command line on the server?  You mistyped a ":" as a ";"

[00:47] *** shurane joined
[00:47] * sitaram gives up

[00:48] *** sureaint left
[00:48] <diverdude> oh yea...true

[00:48] <diverdude> sry

[00:48] *** tangledhelix left
[00:49] <sitaram> diverdude: anyway run that command exactly as I typed it; it should work.  If it doesn't, I still give up anyway :-/

[00:49] <offby1> sitaram: if you're interested, look at http://ix.io/24o -- that is a little script that demonstrates stashing etc.  If you run it, save the output, then remove the "--index" from the call to "git stash", and run it again, then compare the outputs: you'll see they differ subtly

[00:49] <diverdude> sitaram: why give up....there is no problem :)

[00:49] <sitaram> offby1: what's the difference?  (I'll try it in a bit)

[00:50] *** spiette left
[00:50] <offby1> the diff is: without "--index", we don't preserve the exact state of the index :)

[00:50] <offby1> the script sets things up so that, before stashing, we have stuff in the index, _and_ stuff from the same file in the work tree.

[00:50] *** Cromulent joined
[00:50] *** beiter left
[00:50] <diverdude> sitaram: its run...everything looks ok now

[00:50] <offby1> my goal is to restore that state as closely as possible.

[00:50] <offby1> in other words: I want "git status" to report the identical stuff both before stashing, and after popping.

[00:50] <offby1> you'll see.

[00:51] <sitaram> diverdude: now on your workstation (the one where the id_rsa.pub came from), run "ssh gitusr@server info"

[00:51] *** shiba_yu36 joined
[00:51] <diverdude> sitaram: yeah it works

[00:52] <diverdude> sitaram: but still same warning

[00:52] <diverdude> with the encoding

[00:52] *** hxts left
[00:52] <diverdude> the procedure you just guided me through is the same i did for the other installation

[00:53] *** Biopandemic left
[00:53] <sitaram> diverdude: then why did it take pretty much the whole day (and even this one, by the way, got a warning only because of the *other* installation that you did as root)

[00:53] <sitaram> offby1: still looking; interesting

[00:53] <diverdude> sitaram: because i followed a bad and old instruction first

[00:54] <diverdude> sitaram: and i had to clear that out

[00:54] *** satyanash joined
[00:54] *** lonewulf` left
[00:54] *** Cromulent left
[00:54] <diverdude> sitaram: i wanted to install gitlab....and the instruction for that was old and also installed gitosis

[00:55] <diverdude> so system was rather messy

[00:55] <diverdude> until i cleaned it entirely

[00:55] *** pantsman left
[00:55] <diverdude> and followed the simple instructions

[00:55] <diverdude> then it was just fine

[00:55] *** gusnan left
[00:55] <diverdude> so it was my own fault

[00:55] *** nadavoid joined
[00:56] *** the_cybersphinx joined
[00:56] *** NetHawk joined
[00:56] *** fisted left
[00:57] <sitaram> offby1: looks good; --index is indeed needed

[00:57] <diverdude> sitaram: but thx for your help

[00:57] <sitaram> diverdude: on a bare system, installing gitolite is about 2 seconds, plus the time to clone the source from github, plus the time to copy your pubkey

[00:58] <diverdude> sitaram: i agree

[00:58] <sitaram> ok 10 seconds if you type slow

[00:58] *** cybersphinx left
[00:58] <diverdude> sitaram: but if you are unlucky and find a bad tutorial first and you have no experience with git

[00:58] <diverdude> things can go wrong

[00:59] <sitaram> diverdude: on a bare system, if it's Unix, not likely

[00:59] <sitaram> diverdude: also take a look at http://sitaramc.github.com/gitolite/t_.html#README_t_playing_with_gitolite_

[00:59] *** windsurf_ left
[00:59] <diverdude> well ok only experience with cloning and pusing and such things

[00:59] <sitaram> diverdude: macos and windows -- no guarantees (from me at least)

[01:00] *** ramsey left
[01:00] <nevyn> there are many bad git tutorials around.

[01:01] <sitaram> that link shows how to take gitolite for a spin, including 6 virtual users, all done in *one* throwaway Unix user and not affecting anything else on the system.

[01:01] <sitaram> nevyn: the only git tutorial I will endorse is http://sites.google.com/site/senawario/home/gitolite-tutorial

[01:01] <diverdude> sitaram: im gonna see if i can make gitolite work with gitlab now

[01:01] *** fisted joined
[01:02] <nevyn> I still like pro git

[01:02] <nevyn> but you have to ignore the gitosis bit ;)

[01:02] <sitaram> nevyn: my apologies; I misread what you said as "gitolite tutorial".  You're right of course, for git, progit is good

[01:02] *** xxthink joined
[01:03] *** CollinPDX joined
[01:03] *** towski left
[01:03] *** shurane left
[01:03] <xxthink> can git automatically remove the whitespace at the end of each line when commit?

[01:03] <cmn> if you put it in a hook, sure

[01:04] <xxthink> hook?

[01:04] <sitaram> nevyn: but there were too many times when he would not pick up a pull request fast enough, so eventually I change chapter 4.8 (or whatever) to say "please look in the gitolite doc for the latest version of this chapter" and decided to forget about that book (as far as gitolite is concerned I mean)

[01:04] *** slicslak left
[01:04] <cmn> man githooks

[01:04] <gitinfo> the githooks manpage is available at http://jk.gs/githooks.html

[01:04] <sitaram> nevyn: not his fault; gitolite was moving too fast :-)

[01:04] <xxthink> ok

[01:04] <nevyn> sitaram: it's a problem with books

[01:04] *** dsalomon joined
[01:04] <nevyn> sitaram: the whole book process is very slow.

[01:05] *** dsalomon left
[01:05] <sitaram> nevyn: hmm?  Taking a pull request has nothing to do with whether the output is a book or not.  He just was overloaded I guess...

[01:05] <sitaram> happens to all of us sometime or other...

[01:05] <nevyn> sitaram: is it possible for gitolite to do "release tarballs" or is it too hard?

[01:06] *** ISF joined
[01:06] *** syphar left
[01:06] <sitaram> nevyn: why?  I gpg-sign my tags now, so just pick up from github (github *does* provide links to tarballs of each tagged version but they generate the tarball themselves, on the fly I guess)

[01:06] <nevyn> ah cool

[01:07] <sitaram> nevyn: my gpg-key should be on all the normal keyservers (or at least the MIT one); keyid: 088237A5

[01:07] <nevyn> sitaram: git clone/pull through corporate firewalls is painful, teaching release teams git is painful

[01:07] *** aidenhong joined
[01:08] <sitaram> nevyn: use smart http, or run ssh on port 443, like ssh.github.com does

[01:08] *** jaequery left
[01:08] <sitaram> nevyn: teaching... yeah I do that a fair bit.  That's how all the notes and presentations in 'sitaramc.github.com' got started

[01:08] *** baburdick left
[01:08] * nevyn thinks he's going to need to teach git internally.

[01:08] *** rchavik joined
[01:08] *** rchavik left
[01:08] *** rchavik joined
[01:09] <nevyn> it's baked into our new SOE standards as the VCS for puppet code

[01:09] *** _AlbireoX left
[01:09] <sitaram> nevyn: take a look at the two presentations on sitaramc.github.com; you might like one or both of them

[01:09] <sitaram> (they overlap a bit though)

[01:10] <nevyn> there's no local git training I can find. and even if there were.. learning the tool and learning our usage of that tool is a bit apart.

[01:10] *** baburdick joined
[01:10] *** _AlbireoX joined
[01:11] *** EricInBNE joined
[01:11] *** chris-_ left
[01:11] *** ehsan joined
[01:11] <sitaram> offby1: by the way, re your script.  I've started using 'git status -s' now for most of these "look around" things.  Much nicer and quieter

[01:12] *** macRover joined
[01:12] <sitaram> nevyn: "...a bit apart" is good; lets you not have to reinvent the wheel for part 1.  If they were *not* a bit apart, you'd be forced to do that also

[01:13] *** digid joined
[01:13] <nevyn> sitaram: I have a perception problem within my management chain. that if we send someone on foo training they come back knowing how to use foo in our production environment

[01:13] *** aidenhong left
[01:14] *** Internet13 left
[01:14] *** ChanServ sets mode: +v digid

[01:14] <nevyn> where I think formal internal training is also required to get from "so you know about the foo technology now we'll explain how we use foo"

[01:14] <xxthink> cmn: I read the man of githooks, the pre-commit script is to stop the commit if there are trailing whitespace

[01:15] <sitaram> nevyn: yeah true

[01:15] <cmn> so change it

[01:15] <xxthink> I want to auto remove it

[01:15] <xxthink> but don't know how to write the script

[01:15] *** nadavoid left
[01:15] *** digid left
[01:16] *** aidenhong joined
[01:17] *** digid joined
[01:17] *** shiba_yu36 left
[01:17] *** digid left
[01:17] <cmn> 'sed -i s/\s*$//' might work

[01:17] *** wilmoore left
[01:18] *** lonewulf` joined
[01:18] *** hooligin joined
[01:19] *** mkg7 left
[01:19] *** ChanServ sets mode: +v hooligin

[01:19] *** xerora joined
[01:21] <hooligin> someone committed ~1000 lines of unstable code to the master a few commits back and I want to move all that code to another branch and leave the existing commits since then in the master... I can't seem to figure out the mode of operation to do this

[01:21] <hooligin> anyone have some pointers?

[01:21] *** monokrome joined
[01:21] *** forsto joined
[01:22] <mugwump> hooligin: either revert the bad commit, or use git rebase -i to remove it

[01:22] *** unreal left
[01:22] *** lonewulf` left
[01:22] <cmn> presumably it's public history, so a revert would be better

[01:22] <mugwump> depending on what you think about rewriting history

[01:22] *** Internet13 joined
[01:22] <mugwump> if it's a closed audience or team, I prefer rewriting

[01:22] <mugwump> especially if it's recent

[01:22] *** ScottE left
[01:22] <hooligin> so do I branch the master first and then revert the commit from the master?

[01:22] *** spearce left
[01:23] <hooligin> that way the reverted commit is in the other branch?

[01:23] <mugwump> just revert it on master

[01:23] <hooligin> then when the branch is all stable I can merge it back into the master

[01:23] *** forsto left
[01:23] <mugwump> and then revert the revert on the branch

[01:23] <mugwump> that way the changes won't get lost if you merge

[01:23] *** lonewulf` joined
[01:23] *** kennethreitz left
[01:24] *** ehsan left
[01:24] <hooligin> what do you mean "

[01:24] *** matsebc left
[01:24] <hooligin> "revert the revert"

[01:24] <mugwump> well, when you run git revert it makes a new commit

[01:24] <mugwump> you can revert that too

[01:24] *** matsebc joined
[01:24] <mugwump> which re-adds the changes

[01:24] <mugwump> that's the one you want on the new feature branch

[01:25] *** forsto joined
[01:25] <mugwump> like I say, I personally prefer rebasing away mistakes like this :-)

[01:25] <hooligin> i dont have a feature branch yet so do I create the feature branch before the revert or after?

[01:25] <nevyn> hooligin: make a feature branch of what you have.

[01:26] *** mxweas joined
[01:27] *** ColKurtz is now known as JoshMan

[01:27] <hooligin> alright... so revert, branch, and then revert the revert in the feature branch

[01:29] <nevyn> eww.

[01:29] <nevyn> yeah that works. but eww.

[01:29] *** lonewulf` left
[01:29] *** matsebc left
[01:29] <mugwump> branch after the first revert

[01:29] <nevyn> you sure you can't just rewrite history.

[01:29] <cmn> why not create the experimental branch and then revert in the main branch?

[01:30] <nevyn> cmn: because then when you merge back it's a rewrite

[01:30] <mugwump> cmn: because then if you merge the experimental branch back to master, you will get a big mess

[01:30] *** lonewulf` joined
[01:30] <cmn> yeah, I guess the merge-base would be off

[01:31] <cmn> but in the exp branch, being new, you can float that commit to the top

[01:31] <hooligin> is there a cleaner way of doing this by rewriting history?

[01:32] <cmn> delete the commit from the history (and rewrite the later ones)

[01:32] <cmn> but you might upset or confuse other devs

[01:34] *** btanaka left
[01:34] *** matsebc joined
[01:34] *** kahrl_ joined
[01:35] *** brainbox1100 joined
[01:36] *** matsebc left
[01:37] *** iocor left
[01:38] *** John2496 joined
[01:38] *** fisted left
[01:38] <nevyn> hooligin: so with the revert it looks like this:   A>B>C>newcode>E>F>revertnewcode>revertrevertnewcode>fixnewcode...

[01:38] *** fisted joined
[01:38] <diverdude> does the user which runs the gitlab webserver have to be the git user?

[01:38] <diverdude> or is it irrellevant

[01:38] *** babilen joined
[01:39] *** baburdick left
[01:39] <hooligin> nevyn: that is what the master would like after merging back from the feature branch?

[01:39] *** tgunr joined
[01:39] <nevyn> hooligin: yes or in the feature branch

[01:40] <nevyn> with a history rewrite it looks like this:

[01:40] *** BonQuisha joined
[01:40] <nevyn> A>B>C>E>F>newcode>fixnewcode...

[01:40] <hooligin> so how would i do the history rewrite?

[01:40] *** JoshMan is now known as ColKurtz

[01:41] *** ColKurtz is now known as JOSHMAN

[01:41] *** JOSHMAN is now known as ColKurtz

[01:41] *** jryans joined
[01:41] *** baburdick joined
[01:41] <nevyn> hooligin: the problem with the rewrite.. is it actually changes E and F

[01:41] <lahwran> I need to bring a coworker up to speed on git ASAP. any recommendations on how to do so?

[01:41] <hooligin> how so?

[01:42] <nevyn> lahwran: get them to read progit buy training from github if you don't have time.

[01:42] <nevyn> lahwran: find any of the other quite reasonable git tutorials.

[01:42] <lahwran> did you miss a comma in there

[01:42] <nevyn> lahwran: yeah

[01:43] <nevyn> progit.org

[01:43] <kahrl_> why isn't there a git remote set-url --fetch? :)

[01:43] *** kenichi left
[01:43] <nevyn> what would that DO?

[01:43] *** ChaoWang joined
[01:43] <kahrl_> change the fetch url, but not the push url

[01:44] <lahwran> you can do that I believe

[01:44] <nevyn> yeah I thought that was supported.

[01:44] <kahrl_> i did it by set-url <fetch-url>, then set-url --push <old-push-old>

[01:45] <kahrl_> old-push-url*

[01:45] *** Rogi left
[01:45] <lahwran> ah

[01:45] <lahwran> so it's just a matter of commands to do it

[01:45] *** kmc left
[01:45] *** brian_g left
[01:46] <nevyn> hrm I don't have set-url at all. hrm

[01:47] <kahrl_> nevyn: ??? did you forget the remote?

[01:47] *** kennethreitz joined
[01:47] <nevyn> but then I'm on old git.

[01:47] <nevyn> 1.6.3

[01:47] <kahrl_> oh

[01:48] *** jaequery joined
[01:50] *** guampa left
[01:50] <hooligin> nevyn:  when you say it changes E and F has is that going to be a problem?

[01:50] <lahwran> is there a way to git clone with a specific ssh private key?

[01:50] <diverdude> what do you guys use for web-frontend for git?

[01:51] <lahwran> diverdude: github :p

[01:51] <diverdude> lahwran: to expensive

[01:51] <nevyn> hooligin: it is for the person who's written G based on F but not yet pushed it to the central repo

[01:52] <hooligin> if I'm 100% confident that G doesn't even exist yet then no problem?

[01:52] <nevyn> yep

[01:52] *** kenperkins left
[01:53] *** mxweas left
[01:54] <hooligin> so whats the process to do the rewrite(ive never done this kind of surgery before)

[01:54] <lahwran> git clone with a specific key, anyone? noone?

[01:54] <hooligin> nevyn: *

[01:54] <CareBear\> lahwran : nothing to do with git..

[01:54] <CareBear\> lahwran : one idea is to make up a magic hostname for this repo

[01:54] *** linduxed joined
[01:55] *** John2496 left
[01:55] <lahwran> erm, how is it nothing to do with git? git doesn't let me pass arguments to ssh's invocation, does it?

[01:55] <CareBear\> lahwran : add into ~/.ssh/config the following: host magic\nhostname serverhostname_or_ip\nusername youruser\nidentityfile special-key

[01:55] <nevyn> hooligin: in the git rebase manpage.. see the bit that starts    A range of commits could also be removed with rebase. If we have the following situation:

[01:56] <lahwran> there's no one-invocation way to do it? :|

[01:56] <CareBear\> lahwran : I don't think so

[01:56] <lahwran> well drat

[01:56] <CareBear\> lahwran : you can use an agent of course

[01:56] <hooligin> nevyn:  I guess I just need to make sure to create a feature branch first then?

[01:56] <nevyn> make a branch first.

[01:57] <nevyn> hooligin: kinda

[01:57] <CareBear\> lahwran : run git inside ssh-agent

[01:57] *** edude03 left
[01:57] <CareBear\> lahwran : but you of course have to add the key to the agent before git

[01:57] *** brian_g joined
[01:57] <nevyn> make a branch first for safety.. but then cherry-pick the newcode onto the rebased tree.

[01:58] <nevyn> so you have A>B>C>E>F>newcode not A>B>C>newcode>E>F

[01:58] *** shiba_yu36 joined
[01:58] *** mandric joined
[01:59] *** amigojapan joined
[01:59] *** wbednarski joined
[01:59] *** robde_ joined
[02:01] *** linduxed left
[02:01] *** brian_g left
[02:01] *** sako left
[02:01] *** zdk joined
[02:01] *** maletor left
[02:02] *** robotmay left
[02:02] *** jroes joined
[02:02] *** Akufen joined
[02:02] *** Akufen left
[02:02] *** Akufen joined
[02:02] <jroes> hey guys, I think I just accidentally lost a bunch of commits, trying to figure out how to get back to a state from earlier today. I think a series of mistaken merges has led me here. should I open up the reflog?

[02:02] *** lonewulf` left
[02:03] *** odin_ joined
[02:03] <jroes> specifically, if I find the right entry I want to get back to in the reflog, what should I do to get back to that point?

[02:03] <nevyn> git checkout HASH

[02:04] *** slackorama left
[02:04] *** ajt left
[02:04] *** DofLeFou joined
[02:04] <jroes> can I stash unstaged changes?

[02:05] *** ajt joined
[02:05] *** martinjlowm left
[02:05] <nevyn> sure.

[02:05] *** lonewulf` joined
[02:06] *** NetHawk left
[02:06] <jroes> seems like it doesn't stash my unstaged changes by default, not seeing an option in the manpage

[02:07] *** Targen joined
[02:08] *** edude03 joined
[02:09] <karstensrage> !config_files

[02:09] *** neurodrone joined
[02:09] <karstensrage> !config_file

[02:09] *** baburdick left
[02:09] <karstensrage> hmm

[02:10] *** malphaet joined
[02:11] <malphaet> anyone willing to give a hand ?

[02:12] *** NetHawk joined
[02:13] *** baburdick joined
[02:13] *** nadavoid joined
[02:13] <malphaet> I usually use git, but since everybody is not perfect, I'm stuck to svn. So after hours of struggle, my merge is done (git->svn)

[02:13] <malphaet> now how do I add just SOME of the files to my commit ? I tried svn commit ./Language/*

[02:13] <malphaet> but it failed, so ?

[02:14] *** centipedefarmer_ joined
[02:15] <nevyn> so did you use git-svn?

[02:16] *** igotnolegs joined
[02:17] *** centipedefarmer_ left
[02:17] *** NetHawk left
[02:17] <malphaet> unfortunately not

[02:17] *** shiba_yu36 left
[02:18] *** watsonian left
[02:18] <malphaet> but I could do it, if it easier

[02:18] <nevyn> so if there's a upstream svn you might be better doing a new svn clone then working stuff into that.

[02:18] <const> Can I use git rebase -i to reorder commits?

[02:18] <const> (by moving lines around?)

[02:18] *** NetHawk joined
[02:19] <malphaet> my objective is to post a svn diff

[02:19] <const> apparently http://gitready.com/advanced/2009/03/20/reorder-commits-with-rebase.html yeah

[02:19] <const> malphaet: what does 'not everyone perfect' have to do with using git?   Also, I asked that *exact* quesion in this channel some days ago

[02:19] <const> long story short: can't be done with some post-processing script

[02:19] <const> but patch(1) should read the patch anyways

[02:21] <malphaet> what about writing stuff ?

[02:21] *** stringoO joined
[02:21] <const> malphaet: ' writing stuff' ?

[02:21] <malphaet> I'm making a patch

[02:21] *** cccaldas joined
[02:21] <const> yeah, use 'git diff' and send that

[02:22] <malphaet> so could a git patch be svn compatible ?

[02:22] <const> and have them apply with patch(1)

[02:22] <const> malphaet: svn will ignore whatever else is in the patch

[02:22] <const> yeah

[02:22] <malphaet> neat

[02:22] <malphaet> that should solve my problem

[02:23] <const> malphaet: I have the some problem, as i mentioned :)

[02:23] *** tystr left
[02:23] <malphaet> about svn users ?

[02:23] <const> malphaet: upstream is svn

[02:23] <const> but I use git

[02:24] <const> (for FreeBSD)

[02:24] *** dorisabayon joined
[02:24] *** slicslak joined
[02:25] <nevyn> so git-svn should help with tracking an upstream that uses svn.

[02:25] <malphaet> but there is no way to do it in svn ?

[02:25] <nevyn> there's just a few rules like never rewrite the branch that's tracking upstream

[02:25] <nevyn> to do what in SVN?

[02:25] <const> nevyn: and I can't add files using git

[02:25] <const> malphaet: do what?

[02:25] <const> nevyn: and I can't merge using git

[02:26] <malphaet> make a partial diff

[02:26] <nevyn> so you have master which tracks the svn upstream...

[02:26] <nevyn> then you have your local topic branches.

[02:26] *** xiangfu joined
[02:26] <malphaet> nevyn: me ?

[02:26] <nevyn> then when you have something ready push you put it on master. then push to svn from git

[02:26] *** shoerain joined
[02:26] <nevyn> assuming you can write to svn.

[02:26] *** Fandekasp left
[02:27] <malphaet> witch I can't

[02:27] <malphaet> assuming you are talking to me

[02:28] *** wbednarski left
[02:28] *** dAnjou left
[02:28] *** fermianyon left
[02:30] <const> nevyn: using git-svn how do I "dcommit" commits -2 to -16 ?

[02:31] <const> ie I want to commit everything but the last commit I made

[02:32] <cbreak> branch stuff off

[02:32] <nevyn> git cherrypick hash..hash on master

[02:32] <nevyn> or do that.

[02:32] <cbreak> and reset out of current branch

[02:32] <nevyn> which is better.

[02:32] <nevyn> const: so you've rebased your feature branch against the svn upstream right?

[02:32] <const> nevyn: yes

[02:33] *** angelsl joined
[02:33] <const> --interactive seems useful

[02:33] <nevyn> const: so there's a few ways.

[02:33] <const> nevyn: yes?

[02:33] *** mxweas joined
[02:34] <nevyn> git checkout -b "for_mergetomainline" HEAD^ (while on featurebranch

[02:34] <nevyn> this get's you -2

[02:34] *** Chaser left
[02:34] <const> nevyn: ah, good point, and then I just delete it after

[02:34] <nevyn> then on the branch that's tracking svn do git merge for_mergtomainline

[02:34] <const> nevyn: no, I never use git merge

[02:34] <nevyn> a ff merge is ok.

[02:34] <const> just git svn dcommit

[02:35] *** centipedefarmer_ joined
[02:35] <const> nevyn: ff merge?

[02:35] <nevyn> a ff merge just puts the commits on that branch as if you cherrypicked them

[02:35] <const> ah

[02:35] <nevyn> ff == fast-forward

[02:36] <const> nevyn: I see. Is there a way to get svn dcommit to show me patches btw

[02:36] <const> instead of

[02:36] <const> diff-tree

[02:37] *** scelis left
[02:37] *** tcurdt joined
[02:38] <tweakism> Is there any way to store an empty dir in a git repo?

[02:38] <tweakism> I don't even want a .EMPTY_DIR file inside it.

[02:39] <nevyn> const: http://stackoverflow.com/questions/190431/is-git-svn-dcommit-after-merging-in-git-dangerous describes something like the workflow I'm talking about

[02:39] *** BiggFREE joined
[02:40] *** ircguy joined
[02:40] *** baburdick left
[02:40] *** Yuuhi``` joined
[02:40] <const> nevyn: understood

[02:40] *** macRover left
[02:40] <nevyn> except using --no-ff means that you have an effective squash on the entire set of commits.

[02:40] <const> nevyn: I have a few more constraints on top of the typical git->svn ones

[02:40] <nevyn> oh?

[02:40] <const> due to annoying custom svn patches

[02:40] <nevyn> whee!

[02:41] <const> nevyn: basically, anything that would result in svn:keywords being added/removed to a file can't be done

[02:41] *** baburdick joined
[02:41] <const> same with svn:mergeinfo

[02:41] *** slicslak left
[02:41] <const> so no branch merging, no adding files, etc

[02:41] *** Vampire0 joined
[02:41] *** jryans left
[02:41] *** Yuuhi`` left
[02:42] *** duckxx left
[02:42] *** tcurdt left
[02:43] <nevyn> so if you only do ff merges and you delete the for-merge to mainline after you dcommit it.

[02:43] <nevyn> you're good

[02:43] <nevyn> it looks linear to svn.

[02:43] <const> cool

[02:43] <tweakism> s/win 26

[02:43] *** herdingcat joined
[02:43] <const> tweakism: you lose!

[02:43] <tweakism> heh, typo :)

[02:44] <const> nevyn: is there a way I could go from a series of diff-tree's to a series of patches?

[02:44] <const> I want to confirm git-svn

[02:44] *** Vampire0_ left
[02:45] *** cmyk_ left
[02:46] <nevyn> const: short answer I don't know

[02:46] <nevyn> btw the stack overflow the top voted answer is wrong.. read the one with 11 votes.

[02:46] <const> nevyn: haha okay, typical

[02:46] <const> :)

[02:47] *** shurane joined
[02:50] <nevyn> const: so you're seeing a diffstat where you'd rather see a full diff?

[02:50] <const> nevyn: yes

[02:50] *** mandric left
[02:51] *** blaenk joined
[02:52] *** lonewulf` left
[02:53] *** MrGlass joined
[02:54] *** mxweas left
[02:54] *** lonewulf` joined
[02:54] *** _AlbireoX left
[02:54] <const> nevyn: here goes nothing

[02:54] *** cakehero joined
[02:54] <const> spamming 15 commits

[02:55] *** AlbireoX joined
[02:55] *** mxweas joined
[02:56] *** edude03 left
[02:57] *** kermit left
[02:57] *** kermit joined
[02:57] *** wilmoore joined
[02:58] *** nadavoid left
[02:58] *** NetHawk left
[02:58] *** NetHawk joined
[02:59] <const> nevyn: I really don't like how svn unstages files and leaves them in some undermined state if you cancel in the middle

[02:59] <const> but meh

[03:01] *** robde_ left
[03:03] *** ColKurtz left
[03:05] *** Gitzilla left
[03:09] *** ircguy left
[03:10] *** baburdick left
[03:10] *** lonewulf` left
[03:12] *** friskd left
[03:12] *** baburdick joined
[03:13] *** maletor joined
[03:13] *** beinghuman joined
[03:13] *** michaelgamble joined
[03:13] <beinghuman> I have an issue with gitolite. People are able to clone gitolite-admin.git

[03:14] <michaelgamble> hey quick question.. coming from an svn world

[03:14] *** lonewulf` joined
[03:14] <beinghuman> I don't have that permission set in my conf, either.

[03:14] <michaelgamble> how do you do something like svn cleanup for git

[03:14] *** UnicornS left
[03:15] *** subbyyy joined
[03:15] <offby1> beinghuman: I doubt that's a bug.  I can't see how it's a bad thing.

[03:16] <offby1> michaelgamble: "git clean -dxf".

[03:16] <offby1> beware: strong medicine!

[03:16] *** brodyberg joined
[03:16] <michaelgamble> also is their a way to turn on logging for git

[03:16] * offby1 forgets the exact details of "svn cleanup"

[03:16] <beinghuman> offby1: I just want people to be able to see my gitolite conf

[03:16] <offby1> michaelgamble: not that I know of.

[03:16] <beinghuman> and get my repo list

[03:16] <beinghuman> don't want*

[03:16] <offby1> *shug*

[03:16] <offby1> don't use gitolite then, I guess.

[03:17] <beinghuman> are you trying to tell me there is no way to prevent cloning of gitolite-admin.git repo?

[03:17] <beinghuman> people can also clone repos over git:// that I want to be private

[03:17] *** Gitzilla joined
[03:17] *** BonQuisha left
[03:17] <michaelgamble> when building a git repo is their anything i need to do in terms of chmod the repo?

[03:17] *** proq` left
[03:18] *** RobertLaptop left
[03:19] <offby1> beinghuman: I'm trying to tell you that I personally don't know of any way to prevent it, and furthermore cannot think of anything that typically goes into that repository that most people want to keep private.

[03:19] <offby1> Now, if random people can clone the _other_ repositories without your permission, that's a huge bug.

[03:19] <offby1> But I doubt that's the case.

[03:20] <beinghuman> they can

[03:20] *** brodyberg left
[03:20] <offby1> beinghuman: you should talk to sitaram, who wrote gitolite and is often here; he's very helpful

[03:20] <beinghuman> they can clone repos that I set in gitolite-admin.git conf that I set with full access only to me

[03:20] <offby1> beinghuman: a bug report would probably be helpful.

[03:21] *** jstemmer joined
[03:22] <beinghuman> offby1: cloning over the git protocal is done via the daemon right?

[03:22] <beinghuman> protocol

[03:22] *** RobertLaptop joined
[03:22] <beinghuman> so if I don't have any access rights in gitolite-admin conf given to the daemon it shouldn't allow cloning of it over git protocol

[03:23] <beinghuman> unless I'm wrong about that

[03:23] *** dys left
[03:24] *** dys joined
[03:25] <malphaet> I'm saying something stupt but why don't you .gitignore them ?

[03:26] <beinghuman> that's not related

[03:26] <malphaet> that's what I though

[03:26] *** Destos left
[03:26] <malphaet> but a deamon is given root acces

[03:27] <malphaet> and what about  the filemode = false/true in the git config ?

[03:27] <beinghuman> the way it works is you apply permissions in gitolite-admin.git conf file... to which for gitolite-admin.git repo I only have RW+ = me

[03:27] <beinghuman> I have no read permissions for daemon

[03:27] *** pl0sh joined
[03:27] *** ajt left
[03:28] <beinghuman> so it shouldn't be able to clone them but it is

[03:28] <malphaet> humm, that a bit of a situation indeed

[03:29] *** metcalfc left
[03:30] <CareBear\> michaelgamble : what kind of logging are you looking for?

[03:30] *** jshsu joined
[03:31] <CareBear\> michaelgamble : as for chmodding, no you don't have to do it manually. git init if only your user will work on the repo, or git init --shared if your group will work on it.

[03:31] <beinghuman> also the file git-daemon-export-ok is not in the root directory for the gitolite-admin.git repo

[03:31] <michaelgamble> well I'm trying a new git GUI and was hoping the base command line stuff could keep a log of any ongoings that aren't successfull commits and updates or errors

[03:31] <beinghuman> so it definitely shouldn't be able to clone it

[03:33] *** ranjan left
[03:34] <CareBear\> michaelgamble : only commits are actually stored :)

[03:34] *** dv310p3r joined
[03:34] *** legnaleurc left
[03:37] *** amigojapan left
[03:37] *** koo4 left
[03:38] *** orafu left
[03:38] *** orafu joined
[03:38] *** robde_ joined
[03:40] *** malphaet is now known as malphaet[away]

[03:41] *** baburdick left
[03:42] *** __machine joined
[03:43] <__machine> anyone got a nice way of using git svn with repos that have svn:externals? (be able to keep a git svn clone repo up to date for each external, and push changes to those externals back upstream to the svn repo)

[03:43] *** mandric joined
[03:43] *** baburdick joined
[03:44] *** chrishatton joined
[03:45] *** mxweas left
[03:45] *** rrrreimer_ joined
[03:46] <beinghuman> anyone at all know why git-daemon is ignoring git-daemon-export-ok and allowing public cloning of whatever repo is requested

[03:48] *** lonewulf` left
[03:48] *** rrrreimer left
[03:48] <jshsu> anyone have ideas for fun git hooks? ie: prepare-commit-msg : append ", bro." to the end of the message

[03:49] <sitaram> beinghuman: no idea; you should know that git-daemon does have options to ignore export-ok and show all repos in some directory -- perhaps you (or someone) started it like that

[03:49] <Mikachu> jshsu: or just replace it with one from http://whatthecommit.com/

[03:50] <jshsu> Mikachu: already have one for that =P

[03:50] <jshsu> also have a post-commit that does: git reset --soft HEAD~1

[03:50] <beinghuman> sitaram: do you know where those options may be?

[03:50] *** dreiss left
[03:50] *** hooligin left
[03:50] *** fermianyon joined
[03:51] *** koo4 joined
[03:52] <sitaram> beinghuman: no idea; I don't use git daemon.  However, seeing what options it is *currently* running as should be as easy as "ps -ef | grep daemon" or such

[03:52] *** jason237 joined
[03:53] *** timonia left
[03:53] <sitaram> if you don't find any, it may be getting invoked from inetd.  Ask your system admin...

[03:53] *** imaginativeone left
[03:53] *** aspotashev joined
[03:53] *** imaginativeone joined
[03:55] *** kermit left
[03:55] <aro> when i do a git fetch from my root dir, things work fine, however - if i do a git fetch from a child subdir, it tells me that an OLD repository cannot be found?

[03:55] *** setmeaway left
[03:55] <aro> is ther a way to reset it?

[03:56] *** chrishatton left
[03:57] *** chrishatton joined
[03:57] *** tsujiban joined
[03:57] *** mxweas joined
[03:58] *** nicxvan left
[03:58] *** cccaldas left
[04:00] <offby1> on Linux, it's "cat /proc/$(pidof git-daemon)/cmdline | tr '\000' '\012'", if I recall correctly.

[04:01] *** berserkr left
[04:01] *** kenperkins joined
[04:02] <sitaram> offby1: you don't need all that; I usually just do 'pgrep -fl daemon'

[04:02] <sitaram> the 'ps -ef | grep ...' works just as well, as do many other combos

[04:03] *** OOPMan left
[04:03] *** blaenk left
[04:05] <offby1> "pgrep", eh?  Didn't know about that

[04:06] *** disappea_ joined
[04:06] *** sako joined
[04:09] *** fermianyon left
[04:10] *** pidus joined
[04:11] *** Prasad joined
[04:11] *** baburdick left
[04:12] <sitaram> yeah but watch out for its evil twin, 'pkill'

[04:12] <sreich> lol wow, you were doing an extremely overcomplicated way of doing taht ;)

[04:12] * sreich likes pkill

[04:12] *** BiggFREE left
[04:12] *** baburdick joined
[04:13] *** pidus left
[04:14] <offby1> sitaram: Oh, I already know about pkill.  In fact for years I had a shell alias that disabled it.

[04:14] <offby1> (Because on Solaris it would bring down the entire system)

[04:14] *** Goplat left
[04:14] <sitaram> offby1: on solaris 'killall something' would ignore the 'something' and literally kill all processes; perhaps that's what you meant

[04:15] *** centipedefarmer_ left
[04:16] <sreich> hahaha

[04:16] <sreich> nice

[04:16] <sreich> well, that's just silly ;)

[04:16] *** techrush joined
[04:17] *** beinghuman left
[04:18] *** caseymcg joined
[04:18] *** caseymcg left
[04:19] *** beautifulmind joined
[04:19] *** caseymcg joined
[04:19] *** proq` joined
[04:20] <offby1> sitaram: exactly

[04:24] *** thiago left
[04:25] *** jryans joined
[04:26] *** Harzilein joined
[04:26] <Harzilein> hi

[04:26] <Harzilein> can i ask questions about git-subtree here or would that be inappropriate?

[04:26] *** Karmaon joined
[04:27] <Karmaon> When should I decide creating a new feature branch vs working in the development branch?

[04:27] *** chrishat_ joined
[04:28] *** xim1 joined
[04:30] *** nadavoid joined
[04:30] *** lonewulf` joined
[04:30] *** chrishatton left
[04:31] *** detaer left
[04:33] *** kukks left
[04:34] *** Targen left
[04:34] *** baburdick left
[04:37] *** mxweas left
[04:37] <offby1> Harzilein: this is exactly the right place; ask away

[04:38] <offby1> Karmaon: there's no real rule.  I suppose it's safest to create the branch.

[04:38] *** mandric left
[04:39] *** michaelgamble left
[04:40] *** macRover joined
[04:41] <sitaram> Karmaon: my subjective thumb rule: if I'm not even sure how the feature will be implemented and need to explore, *or* if I think it'll take more than 2-3 commits.  But it's subjective

[04:41] <Harzilein> offby1: so, when i initially started to split my puppet config into individual subtree repositories i did not use --rejoin, is there a way to fix this?

[04:41] <Harzilein> s/^offby1: //

[04:42] *** maletor_ joined
[04:42] *** maletor left
[04:44] <Harzilein> also i was really unsure about merging back from the subtree to the project where it came from so far.

[04:45] *** Heimidal joined
[04:51] *** gavin_huang joined
[04:51] *** legnaleurc joined
[04:52] <karstensrage> i dont think i want to commit the history log to github, is there a way to clear the log?

[04:54] <sreich> probably git init or something

[04:54] <CareBear\> git reset

[04:54] <CareBear\> but careful

[04:54] *** dreiss joined
[04:54] <sreich> oh really, git reset can do that? hm.

[04:55] <karstensrage> careful of what?>

[04:55] <CareBear\> git reset can and will delete your work

[04:55] <CareBear\> git usually will not

[04:57] *** zivester left
[04:59] *** pidus_ joined
[04:59] *** pidus_ left
[04:59] *** pidus_ joined
[05:01] *** zivester joined
[05:02] *** koo4 left
[05:03] *** dreiss left
[05:04] *** cakehero left
[05:04] *** prasadkr joined
[05:04] *** ISF left
[05:05] *** jameslordhz joined
[05:05] *** Prasad left
[05:05] *** setmeaway joined
[05:06] <jameslordhz> i use git clone http://.../svn/trunk from svn server, now i want to get the other two branches and tags dir to my local git repo, how to make this done?

[05:06] *** rurufufuss joined
[05:09] <sreich> git checkout -t -b 'what to name local branch' origin/some/branch/name

[05:09] *** nikuyoshi joined
[05:09] <sreich> oh...svn..

[05:12] *** setmeaway left
[05:16] *** jshsu left
[05:17] *** weiyang joined
[05:20] *** koo4 joined
[05:20] *** dorkmafia left
[05:21] *** friskd joined
[05:21] <jameslordhz> how to add svn dir to git repo?

[05:21] *** imaginativeone left
[05:22] *** nadavoid left
[05:22] *** kermit joined
[05:23] *** caseymcg left
[05:23] *** sako left
[05:24] *** Goplat joined
[05:24] *** Fandekasp joined
[05:25] *** prasadkr left
[05:26] *** Prasad joined
[05:26] <Mrono> anything as easy as hg serve for git?

[05:28] *** dorisabayon left
[05:28] <EugeneKay> Doesn't translate directly, no.

[05:29] <EugeneKay> You can acess git repos over SSH easy-peasy.

[05:29] <Mrono> yeah

[05:29] <Mrono> that's how i do everything

[05:29] <nevyn> jameslordhz: does the git repo have a git upstream?

[05:29] <Mrono> it's just easy to be able to toss up a webpage to view the actual files right away

[05:30] <EugeneKay> As I understand it, the reason such a "feature" isn't included is because "hg serve" has exactly zero authentication. And that's bad.

[05:30] <jameslordhz> nevyn no git upstream yet, the upstream is a svn server

[05:30] <nevyn> jameslordhz: there's magic when you clone the svn repo if you have a standard tags and trunk layout

[05:30] <EugeneKay> And such a thing is bad juju in git land

[05:31] <jameslordhz> nevyn i just track one dir of svn , now i want to track the whole svn directories

[05:31] <jameslordhz> how to make this change?

[05:31] <EugeneKay> jast, are you about?

[05:32] <jameslordhz> git push origin, which branch will it push to remote site?

[05:34] <EugeneKay> jameslordhz - http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git

[05:34] <nevyn> jameslordhz: trunk.

[05:34] <jameslordhz> nevyn the upstream is git:(

[05:34] <nevyn> jameslordhz: did you specify -s to the git svn clone

[05:34] <jameslordhz> no trunk, another question

[05:34] <nevyn> jameslordhz: the upstream is git?

[05:34] *** lonewulf` left
[05:34] *** subbyyy left
[05:34] <nevyn> why are you using git svn?

[05:35] <jameslordhz> no privilege to write to svn

[05:35] <nevyn> so upstream is svn?

[05:35] <jameslordhz> i get code from svn to master branch, and modify on test branch

[05:35] *** macRover left
[05:35] <nevyn> and you send the patches?

[05:35] <jameslordhz> then i push my change to remote git server

[05:36] <nevyn> or svn is the internal copy of some external project that uses git that's really upstream?

[05:36] <nevyn> or something equally horrific?

[05:36] *** imaginativeone joined
[05:37] *** imaginativeone left
[05:37] *** wilmoore left
[05:37] *** slonopotamus joined
[05:40] *** raydeo joined
[05:41] *** kermit left
[05:43] *** kenperkins left
[05:44] *** freimatz joined
[05:45] *** blaenk joined
[05:46] *** dreiss joined
[05:47] *** Prasad left
[05:47] *** shurane left
[05:47] *** kenperkins joined
[05:47] *** Prasad joined
[05:47] *** Heimidal left
[05:48] *** whyking joined
[05:49] *** jjasinski1 joined
[05:49] *** caseymcg joined
[05:50] *** gavin_hu_ joined
[05:50] *** jjasinski1 left
[05:50] *** SegFaultAX joined
[05:52] *** gavin_huang left
[05:53] *** idoru left
[05:53] *** jjasinski left
[05:56] *** robde_ left
[05:57] *** chrishat_ left
[05:57] *** techrush left
[05:58] *** chrishatton joined
[05:59] *** setmeaway joined
[05:59] *** slicslak joined
[05:59] *** drev1 joined
[05:59] *** CollinPDX left
[06:00] *** legnaleurc left
[06:02] *** legnaleurc joined
[06:04] <jameslordhz> git pull , and found conflict

[06:04] <jameslordhz> edit the file with conflict, commit, and failed, why?

[06:04] *** petisnnake left
[06:05] <slonopotamus> you got error message, didn't you?

[06:05] <slonopotamus> jameslordhz: have you git add'ed conflicting file after editing it? what does git status say?

[06:05] *** dfr|mac joined
[06:06] <jameslordhz> slonopotamus i have add that conflict after edit it

[06:06] *** CollinPDX joined
[06:07] *** idoru joined
[06:07] <jameslordhz> then i commit, and failed:(

[06:09] *** raydeo left
[06:09] <frogonwheels> jameslordhz: how about pastebin some actual errors.   'failed' is not particularly descriptive or helpful.

[06:10] *** jryans left
[06:10] <jameslordhz> http://paste.ubuntu.com/799008/

[06:10] *** maleknet joined
[06:10] *** jryans joined
[06:10] <frogonwheels> jameslordhz: well duh.

[06:11] <jameslordhz> maybe i should use reset...

[06:11] <frogonwheels> jameslordhz: The merge commit hasn't happened yet.

[06:11] <frogonwheels> jameslordhz: so you need to git commit

[06:11] *** bindaasomatic joined
[06:11] <jameslordhz> git commit failed

[06:11] <frogonwheels> jameslordhz: assuming you've staged the merge conflicts.

[06:11] <frogonwheels> jameslordhz: no .. that was git commit --amend

[06:12] <Corey> How do I tell git "discard local commits, grab what origin master has and be done with it?"

[06:12] <jameslordhz> http://paste.ubuntu.com/799010/  not works

[06:13] <frogonwheels> jameslordhz: don't put --amend.

[06:13] *** psakrii joined
[06:13] <frogonwheels> Corey: you can always reset your branch pointer  to the new origin master   (git checkout master   && git reset --hard origin/master )

[06:14] <sitaram> git checkout master && git fetch origin && git reset --hard origin/master

[06:14] <frogonwheels> Corey: you could create a temp branch to keep your local commits visible.  (git branch mycommits )

[06:14] <Corey> sitaram: Gorgeous.  Thank you. :-)

[06:14] *** klemenes left
[06:14] <Corey> frogonwheels: Nah, nothing of value was there.

[06:14] *** Chib joined
[06:14] *** LongBeach joined
[06:14] <Corey> And it was diverging further and further from upstream.

[06:14] <jameslordhz> seems works, thank you:0

[06:14] *** maletor_ left
[06:15] <frogonwheels> jameslordhz: as I said.. a failed merge hasn't done the commit.

[06:15] <frogonwheels> jameslordhz: --amend  rewrites the last commit.

[06:15] <frogonwheels> jameslordhz: so there's a very good reason for git to prevent you shooting yourself in the foot in this particular manner :)

[06:16] <jameslordhz> frogonwheels git reset --hard HEAD, what this functions/

[06:16] <jameslordhz> ?

[06:17] *** friskd left
[06:17] <frogonwheels> jameslordhz:  same as git reset --hard    which is to say it first updates the index/staging area to be the same as HEAD  and then overwrites files from the staging area

[06:18] *** kermit joined
[06:18] *** setmeaway left
[06:19] *** Rogi joined
[06:19] *** fermianyon joined
[06:20] <jameslordhz> git log --follow build.sh this command can show history of a specific file

[06:20] *** ipalaus_ left
[06:20] <jameslordhz> how to show a file of sepcific version?

[06:21] *** dfr|mac left
[06:21] *** dorkmafia joined
[06:21] *** aidenhong left
[06:21] *** ThomasLocke joined
[06:24] *** deltree_ left
[06:24] *** slonopotamus left
[06:24] <jameslordhz> maybe i should get help from gui tool

[06:24] *** disappea_ left
[06:25] <frogonwheels> jameslordhz: you could try smartgit

[06:25] *** aidenhong joined
[06:25] <frogonwheels> jameslordhz: not perfect, but does many things right.

[06:26] *** TrineLocke joined
[06:26] *** brodyberg joined
[06:27] *** nikuyoshi left
[06:27] *** robde_ joined
[06:27] *** kenperkins left
[06:28] *** AmirBehzad joined
[06:28] *** aspotashev left
[06:30] *** h0bbit joined
[06:30] *** kenperkins joined
[06:30] *** caseymcg left
[06:30] *** brodyberg left
[06:31] *** slicslak left
[06:33] *** khmarbaise joined
[06:33] *** Drakonite joined
[06:34] <jameslordhz> how to get sepecific version of a file

[06:34] *** codeshah left
[06:35] <EugeneKay> man git-checkout

[06:35] <gitinfo> the git-checkout manpage is available at http://jk.gs/git-checkout.html

[06:35] *** ipalaus_ joined
[06:35] <EugeneKay> tl;dr: git checkout <commit> -- <path>

[06:36] *** diverdude left
[06:36] *** a_c_m_ joined
[06:36] *** a_c_m_ left
[06:36] *** a_c_m_ joined
[06:38] *** khmarbaise left
[06:38] *** ISF joined
[06:38] *** ehsan joined
[06:38] *** jryans left
[06:39] *** neurodrone left
[06:40] *** Behi left
[06:40] *** tomislater joined
[06:44] *** ehsan left
[06:44] *** maletor joined
[06:44] *** drev1 left
[06:47] *** BonQuisha joined
[06:47] *** umren joined
[06:48] *** baburdick joined
[06:49] *** chrishatton left
[06:50] *** chrishatton joined
[06:52] *** rrrreimer_ is now known as rrrreimer

[06:53] *** Goplat left
[06:55] <sitaram> I think "tl;dr" should be the bot trigger for gitolite's documentation master TOC page ;-)  I've been accused of having "too much documentation" enough times already!

[06:55] *** queequeg1 left
[06:55] * sitaram is joking; please dont add that trigger!

[06:56] *** dannas joined
[06:56] *** replore_ joined
[06:57] *** chrishatton left
[06:57] *** chrishatton joined
[06:57] *** legnaleurc left
[06:58] *** legnaleurc joined
[07:02] *** klemenes joined
[07:02] *** klemenes left
[07:06] *** mishok13 joined
[07:08] *** nikuyoshi joined
[07:08] *** macRover joined
[07:08] *** legnaleurc left
[07:09] *** blaenk left
[07:09] *** igotnolegs left
[07:10] *** legnaleurc joined
[07:11] *** maletor left
[07:13] *** maletor joined
[07:17] *** legnaleurc left
[07:18] *** legnaleurc joined
[07:19] *** Heimidal joined
[07:20] *** teweWORK joined
[07:20] <jameslordhz> how to merge two git repo?

[07:21] <jameslordhz> for example repo A and repo B

[07:21] <jameslordhz> not merge branches, but merge repos

[07:21] *** shabble joined
[07:22] *** sako joined
[07:22] *** BonQuisha left
[07:22] *** umren left
[07:23] <wereHamster> jameslordhz: you can only merge commits.

[07:23] *** umren joined
[07:23] *** legnaleurc left
[07:23] *** maletor left
[07:23] *** umren left
[07:23] *** kennethreitz left
[07:23] *** papegaaij joined
[07:24] *** ipalaus_ left
[07:24] *** legnaleurc joined
[07:24] *** OOPMan joined
[07:24] *** kennethreitz joined
[07:25] *** Arrowmaster joined
[07:26] *** marthinal joined
[07:26] *** airborn joined
[07:27] <jameslordhz> wereHamster dude, i want to merge repos

[07:27] *** senny joined
[07:27] *** Dave^| joined
[07:28] <wereHamster> jameslordhz: explain what you mean by 'merge repos'...

[07:28] <jameslordhz> wereHamster i have two projects, namely A and B, they are all managed using svn, now i want to manage them with one git repo

[07:28] <jameslordhz> how to make this done

[07:29] <wereHamster> jameslordhz: git init; git remote add A <url of A>; git remote add B <url of B>; git fetch --all

[07:29] <wereHamster> is that what you want?

[07:29] <wereHamster> or do you want to merge the actual histories? (as in, with git-merge)?

[07:30] <jameslordhz> will this work

[07:30] *** Spockz left
[07:30] <jameslordhz> you can not simply using git fetch --all

[07:30] <wereHamster> why not?

[07:30] <jameslordhz> you should use git fetch xxx --all

[07:30] <wereHamster> no

[07:30] <wereHamster> try it sometime

[07:30] <jameslordhz> i'll try it now:)

[07:32] <jameslordhz> wereHamster dude, it does not work ,the upstream is svn, you can not use git remote add

[07:32] <jameslordhz> you can only use git svn clone

[07:32] *** fermianyon left
[07:33] *** legnaleurc left
[07:33] <wereHamster> git svn clone <svn url of A> A; git svn clone <svn url of B>; git init merged-whatever; cd merged-whatever; git remote add A ../A; git remote add B ../B; git fetch --all

[07:33] <wereHamster> and again, I do not know if this really is what you want

[07:34] <jameslordhz> fatal: Not a git repository

[07:34] *** legnaleurc joined
[07:34] *** airborn left
[07:34] <jameslordhz> that is strange:(

[07:35] <wereHamster> jameslordhz: pastebin the whole output

[07:35] <wereHamster> and the actual commands you used

[07:36] *** aLeSD_ joined
[07:36] *** tellone left
[07:39] *** mishok13 left
[07:39] *** madewokherd left
[07:39] *** giallu joined
[07:40] *** valtih joined
[07:41] *** chrishatton left
[07:42] *** legnaleurc left
[07:42] *** scientes left
[07:42] *** chrishatton joined
[07:43] *** legnaleurc joined
[07:43] *** arvind_khadri joined
[07:43] *** arvind_khadri left
[07:43] *** arvind_khadri joined
[07:46] *** secoif left
[07:47] *** rendar joined
[07:48] *** ngulden joined
[07:49] *** beautifulmind left
[07:52] *** koo4 left
[07:53] *** Prasad left
[07:53] <jameslordhz> http://paste.ubuntu.com/799064/

[07:54] *** robotmay joined
[07:55] *** legnaleurc left
[07:55] *** legnaleurc joined
[07:55] <wereHamster> so adjust the fetch refspec for the svn remote

[07:56] <jameslordhz> how to adjust that refspec

[07:56] *** snearch joined
[07:56] <wereHamster> jameslordhz: or maybe you want to read man git-svn, especially the part about the --stdlayout option

[07:56] <gitinfo> jameslordhz: the git-svn manpage is available at http://jk.gs/git-svn.html

[07:57] <jameslordhz> no way to adjust fetch refspec

[07:58] <jameslordhz> this is not like git remote add ...

[07:58] *** ngulden left
[07:58] *** AmirBehzad left
[07:59] *** ngulden joined
[08:00] *** legnaleurc left
[08:00] *** psakrii left
[08:01] *** legnaleurc joined
[08:05] *** timonia joined
[08:05] *** koo4 joined
[08:06] *** mishok13 joined
[08:08] *** ipalaus_ joined
[08:08] *** gavin_hu_ left
[08:08] *** dorkmafia left
[08:08] *** caseymcg joined
[08:08] *** caseymcg left
[08:09] *** caseymcg joined
[08:09] *** dc5ala joined
[08:09] *** Silowyi left
[08:10] <wereHamster> what?

[08:11] *** weiyang left
[08:11] <wereHamster> have you looked into the .git/config file?

[08:14] *** secoif joined
[08:14] *** secoif left
[08:14] *** macRover left
[08:14] *** secoif joined
[08:14] *** secoif left
[08:15] *** secoif joined
[08:15] *** secoif left
[08:15] *** dorkmafia joined
[08:15] *** danslo`work joined
[08:15] *** Bass10 left
[08:15] *** sykop5am joined
[08:15] *** secoif joined
[08:15] *** secoif left
[08:16] *** secoif joined
[08:16] *** secoif left
[08:17] *** secoif joined
[08:17] *** secoif left
[08:17] *** danslo joined
[08:17] *** secoif joined
[08:17] *** secoif left
[08:18] <danslo> is there any way I can get an older commit (that was accidentally rebased & edited), synced with the same commit in some remote?

[08:18] *** secoif joined
[08:18] *** secoif left
[08:18] <danslo> I get how to do that for the latest commit (just git reset --hard HEAD^ and then cherry-pick from the remote), but how do you do that for older commits?

[08:19] *** secoif joined
[08:19] *** secoif left
[08:19] *** vdv joined
[08:19] *** secoif joined
[08:19] *** secoif left
[08:19] *** legnaleurc left
[08:19] *** legnaleurc joined
[08:20] *** ASIRINeiluj joined
[08:20] *** secoif joined
[08:20] *** secoif left
[08:20] *** secoif joined
[08:20] *** secoif left
[08:21] *** secoif joined
[08:21] *** secoif left
[08:22] *** secoif joined
[08:22] *** secoif left
[08:22] *** secoif joined
[08:22] <wereHamster> what od you mean by 'synced'?

[08:22] *** secoif left
[08:23] *** Spockz joined
[08:23] *** secoif joined
[08:23] *** secoif left
[08:23] *** secoif joined
[08:23] *** secoif left
[08:24] *** _inc joined
[08:24] *** jceb joined
[08:24] *** weiyang joined
[08:24] *** secoif joined
[08:24] *** secoif left
[08:24] *** dorisabayon joined
[08:25] *** secoif joined
[08:25] *** secoif left
[08:25] *** secoif joined
[08:25] *** secoif left
[08:25] *** lausi left
[08:25] *** lausi joined
[08:26] *** jutaro joined
[08:26] *** secoif joined
[08:26] *** secoif left
[08:26] *** flijten joined
[08:26] *** vdv left
[08:26] *** secoif joined
[08:26] *** secoif left
[08:27] *** secoif joined
[08:27] *** robotmay left
[08:28] *** Fandekasp left
[08:28] *** chrishatton left
[08:30] *** jameslordhz left
[08:30] <deavid> hi! can anyone help me repairing a corrupted Git bare repository?

[08:31] <deavid> git fsck --full returns:

[08:31] <deavid> error: Invalid HEAD

[08:31] <deavid> fatal: failed to read object 000d348ed603e762d79050e3e376c8caaf3ab8ec: Invalid argument

[08:31] <deavid> and nothing more.

[08:31] *** kennethreitz left
[08:31] *** jameslordhz joined
[08:31] <wereHamster> restore the object from backup

[08:31] <sitaram> or get it from someone else who has a valid copy of the repo

[08:31] <_ikke_> otherwise, it's gone

[08:32] *** Spockz left
[08:32] <sitaram> and check your hardware; I've often noticed these things are sometimes prescient

[08:32] <deavid> where it should be? in objects/00 ?

[08:32] *** Spockz joined
[08:32] <wereHamster> yes

[08:33] <wereHamster> or in a pack

[08:33] <sitaram> deavid: it won't be like that, if it's packed

[08:33] *** Textmode joined
[08:33] <deavid> i believe it's gone, because it happened while pushing some commits, so i think it's the same objects that were being written

[08:33] <sitaram> deavid: then push again... no?

[08:34] <deavid> nope, the two computers seemed to corrupt the same files or so, but i have to check

[08:34] <sitaram> deavid: anyway to check if any *other* repo has the object, try: git cat-file -t 000d348ed603e762d79050e3e376c8caaf3ab8ec

[08:35] *** gebi joined
[08:35] *** psakrii joined
[08:36] *** theresajayne left
[08:37] <deavid> yesterday the power went off abruptly, and these two computers got the same repo corrupted.

[08:38] <deavid> it is possible to delete all invalid references and restore the remaining repo?

[08:38] <deavid> anyway, we're checking the other GIT repo to see if it has that object

[08:38] *** Prasad joined
[08:39] *** robde_ left
[08:39] *** Sigma joined
[08:40] *** setmeaway joined
[08:40] *** syphar joined
[08:40] *** marthinal left
[08:41] *** Spockz left
[08:41] <wereHamster> deavid: just copy the new object into objects/00/0d3..

[08:41] *** BiggFREE joined
[08:41] *** whitman joined
[08:42] *** psakrii left
[08:42] *** kenperkins left
[08:42] *** eijk joined
[08:42] <danslo> wereHamster: sorry, kinda late... but by 'synced' I mean I literally want the version existing in the remote

[08:43] <wereHamster> danslo: Have you already published that history?

[08:43] <danslo> wereHamster: yes... well to explain the situation a little better

[08:43] <deavid> sitaram: 000d348 exists, is a tree, but points to another object which doesn't exists, i think it's better to throw it

[08:44] <danslo> wereHamster: we are using gerrit for codereviews, and sometimes some intern manages to rebase/edit an older commit that has already made it past codereview and merged into remote's master

[08:45] <wereHamster> danslo: if you're fine with rewriting the history, then use rebase

[08:45] <danslo> wereHamster: I am fine with that, but should I remove the commit, then edit the commit after it, and cherry-pick from remote? not sure how I need to approach this

[08:47] *** maartenv joined
[08:47] <wereHamster> danslo: git rebase -i <that commit>^1; change the first 'pick' to 'edit', when rebase stops do reset --hard HEAD^; cherry-pick <correct commit>; then continue with the rebase

[08:48] *** eighty4 left
[08:48] *** acrocity joined
[08:48] *** mklappstuhl joined
[08:49] <danslo> wereHamster: ok, that was sort-of what I was expecting to do... I just thought cherry-picking created a separate commit

[08:49] <danslo> thanks :)

[08:49] <wereHamster> sure it does

[08:49] *** eighty4 joined
[08:50] *** eighty4 left
[08:51] <danslo> wereHamster: I think my confusion arises from the fact that we edit an existing commit, then cherry-pick to create a new one with the proper changes... but the old one still exists

[08:51] *** harshpb joined
[08:51] <wereHamster> no, you remove the old one

[08:51] <wereHamster> with the hard reset

[08:52] *** eighty4 joined
[08:52] <danslo> doh, did I really miss the ^ there

[08:53] *** Spockz joined
[08:53] * danslo hits his head agains the wall.

[08:53] <danslo> thanks man :)

[08:53] * mastro always be amazed by the amount of people that can't get what the reset command does

[08:53] <_ikke_> !reset

[08:53] <gitinfo> A good resource explaining git-reset is http://progit.org/2011/07/11/reset.html

[08:54] <danslo> I think I have a reasonable understanding... but I'll go and read that right now

[08:55] *** dorkmafia left
[08:55] *** Hapz joined
[08:56] *** ASIRINeiluj left
[08:56] *** shruggar joined
[08:57] *** roguestatus joined
[08:58] *** ASIRINeiluj joined
[08:58] *** Spockz left
[08:59] *** shruggar1 joined
[08:59] *** shruggar left
[09:00] *** secoif left
[09:02] *** secoif joined
[09:02] *** secoif left
[09:02] *** PigeonFriend joined
[09:02] *** secoif joined
[09:02] *** secoif left
[09:03] *** secoif joined
[09:03] *** secoif left
[09:04] *** secoif joined
[09:04] *** secoif left
[09:04] *** secoif joined
[09:04] *** secoif left
[09:05] *** AlexC_ left
[09:05] *** secoif joined
[09:05] *** secoif left
[09:05] *** arvind_khadri left
[09:05] *** secoif joined
[09:05] *** secoif left
[09:06] *** secoif joined
[09:06] *** secoif left
[09:06] *** harshpb left
[09:07] *** secoif joined
[09:07] *** secoif left
[09:07] *** secoif joined
[09:07] <deavid> sitaram, wereHamster: finally i noticed they are empty files and they are lost. I deleted them, but now "git fsck" reports: "fatal: index file smaller than expected"

[09:07] *** secoif left
[09:08] *** marthinal joined
[09:08] *** secoif joined
[09:08] *** secoif left
[09:08] <wereHamster> deavid: if you don't care about your index, delete it. And it appears as your harddrive has some serious prolblems

[09:08] <deavid> yeah, but where it is?

[09:08] <_ikke_> .git/index

[09:08] <deavid> i want to delete anything that it is corrupt, and then checkout the rest

[09:09] *** secoif joined
[09:09] *** Element9_work joined
[09:09] *** secoif left
[09:09] <deavid> it was empty ^_^

[09:09] *** aLeSD_ left
[09:09] *** secoif joined
[09:09] *** secoif left
[09:09] <sitaram> deavid: better have a good clone somewhere, or keep doing a mirror push at regular intervals :-/

[09:10] *** legnaleurc left
[09:10] *** legnaleurc joined
[09:10] *** secoif joined
[09:10] *** secoif left
[09:10] <deavid> i have, but i want to try hard and recover as much as possible

[09:10] *** secoif joined
[09:10] *** secoif left
[09:10] *** nicoulaj joined
[09:11] *** padams joined
[09:11] *** Werring left
[09:11] *** secoif joined
[09:11] *** secoif left
[09:11] *** satyanash left
[09:11] *** eijk_ joined
[09:11] *** secoif joined
[09:11] *** secoif left
[09:12] *** secoif joined
[09:12] *** secoif left
[09:12] *** eijk left
[09:13] *** secoif joined
[09:13] *** secoif left
[09:13] *** glcrazy joined
[09:13] *** ziro`_ joined
[09:13] *** f0i joined
[09:13] *** secoif joined
[09:13] *** secoif left
[09:14] *** secoif joined
[09:14] *** secoif left
[09:14] <wereHamster> deavid: you can pretty much delete all files in .git which have zero size; then run `git init` to initialize any missing stuff, and then git fsck --full again. first make a backup though, just in case...

[09:14] *** Shusshu joined
[09:14] *** secoif joined
[09:14] *** secoif left
[09:15] <deavid> yeah, always a backup before starting to mess

[09:15] *** JackWinter left
[09:15] *** JackWinter joined
[09:15] *** sako left
[09:16] *** secoif joined
[09:16] *** secoif left
[09:16] *** robotmay joined
[09:16] *** Spockz joined
[09:17] *** secoif joined
[09:17] *** secoif left
[09:17] *** secoif joined
[09:17] *** secoif left
[09:18] *** secoif joined
[09:18] *** secoif left
[09:18] *** arvind_khadri joined
[09:18] *** Blaster joined
[09:18] *** robde joined
[09:18] *** secoif joined
[09:18] *** secoif left
[09:19] *** faber joined
[09:19] *** secoif joined
[09:19] *** secoif left
[09:19] *** Sitethief joined
[09:19] *** secoif joined
[09:19] *** secoif left
[09:20] *** secoif joined
[09:20] *** secoif left
[09:20] *** roguestatus left
[09:21] *** secoif joined
[09:21] *** secoif left
[09:21] *** secoif joined
[09:21] *** secoif left
[09:21] *** overbythere joined
[09:21] *** Phylock joined
[09:22] *** alpha080 joined
[09:22] *** secoif joined
[09:22] *** secoif left
[09:23] *** _inc left
[09:24] *** secoif joined
[09:24] *** secoif left
[09:24] *** secoif joined
[09:24] *** secoif left
[09:24] *** _inc joined
[09:25] *** caseymcg left
[09:25] *** secoif joined
[09:25] *** secoif left
[09:25] *** secoif joined
[09:25] *** secoif left
[09:26] *** secoif joined
[09:26] *** secoif left
[09:26] *** Vile left
[09:27] *** secoif joined
[09:27] *** danslo left
[09:27] *** secoif left
[09:27] *** Blaster left
[09:27] *** secoif joined
[09:27] *** secoif left
[09:27] *** bauruine joined
[09:28] *** secoif joined
[09:28] *** secoif left
[09:28] *** secoif joined
[09:28] *** secoif left
[09:29] *** secoif joined
[09:29] *** secoif left
[09:29] <deavid> ok, all restored, only the last commit was lost, but we had the working dir intact, so we recreated the commit.

[09:29] *** secoif joined
[09:29] *** secoif left
[09:30] <_ikke_> deavid: I'd look at the SMART report of your HD if I were you

[09:30] <deavid> yes, of the two computers

[09:30] *** secoif joined
[09:30] *** secoif left
[09:30] <deavid> i'll do, thanks for the advice.

[09:31] *** secoif joined
[09:31] *** secoif left
[09:31] *** secoif joined
[09:31] *** secoif left
[09:31] *** Akufen_ joined
[09:32] *** xerora left
[09:32] *** secoif joined
[09:32] *** secoif left
[09:32] *** secoif joined
[09:32] *** secoif left
[09:33] *** secoif joined
[09:33] *** secoif left
[09:34] *** secoif joined
[09:34] *** secoif left
[09:34] *** secoif joined
[09:34] *** secoif left
[09:35] *** secoif joined
[09:35] *** secoif left
[09:35] *** gilligan_ joined
[09:35] *** Akufen left
[09:35] *** secoif joined
[09:35] *** secoif left
[09:36] *** secoif joined
[09:36] *** secoif left
[09:36] *** secoif joined
[09:36] *** secoif left
[09:37] *** secoif joined
[09:38] *** berserkr joined
[09:38] *** shruggar1 left
[09:38] *** shruggar joined
[09:38] *** proq` left
[09:38] *** achadwick joined
[09:39] *** Blaster joined
[09:41] *** rendar left
[09:42] *** shiba_yu36 joined
[09:43] *** beautifulmind joined
[09:44] *** johnathanb joined
[09:44] *** rendar joined
[09:45] *** legnaleurc left
[09:49] *** Gorkyman joined
[09:49] *** amgarching left
[09:49] *** BiggFREE left
[09:50] *** weiyang left
[09:50] <Gorkyman> how can I undo last commit ?

[09:50] *** snearch left
[09:50] <wereHamster> !undo

[09:50] <gitinfo> There are several ways to undo a commit: If you have pushed it use "git revert <commit>" to undo the changes it introduced, otherwise use "git rebase -i <commit>^" and delete that commit from the list and it will be as though it never existed. You can also remove the latest commit without losing its changes with "git reset HEAD^"

[09:50] <FauxFaux> Gorkyman: Or, just use man git commit --amend

[09:50] <gitinfo> Gorkyman: the git-commit manpage is available at http://jk.gs/git-commit.html

[09:50] *** amgarching joined
[09:51] <Gorkyman> FauxFaux: I dont want to lose unstaged changes though

[09:51] <FauxFaux> Thanks for that information.

[09:52] *** ISF left
[09:53] *** alecat joined
[09:53] <_ikke_> Gorkyman: Tell us exactly what you want to achieve

[09:54] *** shruggar left
[09:54] *** rue joined
[09:54] <wereHamster> Gorkyman: git reset --soft HEAD^

[09:55] <Gorkyman> how do I push that to remote ?

[09:55] <Gorkyman> after I do that

[09:55] <wereHamster> ah unstaged, so you can also do git reset HEAD^

[09:55] <wereHamster> with.. uhm.. git push .. ?

[09:55] <Gorkyman> it wont allow me, after reset

[09:56] <Gorkyman> something about non-fast-forward

[09:56] <Gorkyman> :)

[09:56] *** dorisabayon left
[09:56] *** cyfi joined
[09:56] <wereHamster> !non-ff

[09:56] <wereHamster> !nonff

[09:56] <wereHamster> !ff

[09:57] *** mandric joined
[09:57] *** _inc left
[09:57] <_ikke_> There is no such thing, was looking for it :P

[09:57] <_ikke_> wereHamster: Can only find a not very helpful faq entry

[09:57] <ethanol> is it possible to do both a git push and git push --tags at the same time?

[09:57] <_ikke_> git push --all I guess

[09:58] *** Prasad left
[09:58] <ethanol> hrm

[09:58] <ethanol> either I missed that one, or it didn't work, will try next time :>

[09:58] <cmn> 'git push : refs/tags/*:refs/tags/*' should work

[09:59] *** Carmivore left
[09:59] <cmn> tags aren't meant to be used in bulk

[09:59] <cmn> (not ones you share)

[09:59] *** Carmivore joined
[10:01] <ethanol> what do you mean with bulk?

[10:01] *** Vile joined
[10:01] <cmn> a bunch of them at the same time

[10:01] <cmn> as there are no remote namespaces for tags, they'll show up as first-level references for everyone

[10:01] <ethanol> oh, no, after a bunch of changes we usually tag, so then the deployment tool can build an rpm from it and install it on staging environments

[10:01] <cmn> so you need to be careful about what tags you push up

[10:02] *** shruggar joined
[10:02] *** tcurdt joined
[10:03] *** replore_ left
[10:04] *** tvw joined
[10:04] <jameslordhz> when i failed when i use git svn to clone hadoop code?

[10:04] *** txomon joined
[10:05] <ethanol> jameslord1, I think there's something missing from your message..?

[10:07] <jameslordhz> http://paste.ubuntu.com/799177/

[10:07] *** ThePeach joined
[10:07] *** kmox83 joined
[10:07] *** Blaster left
[10:07] *** aidenhong left
[10:08] <ethanol> jameslord1, rm -rf hadoop/.git

[10:08] <ethanol> problem solved

[10:08] *** mabrand joined
[10:08] <ThePeach> hi all, got into some confusion while using submodules, I had a submodules using any branch, didn't checkout master, did a commit and now I've checked out master I can't seem to find the commit I've done

[10:08] <ThePeach> how do I revert from this situation?

[10:08] *** tsujiban left
[10:08] *** Heimidal left
[10:09] *** Heimidal joined
[10:09] *** baburdick left
[10:09] *** baburdick joined
[10:10] *** aro left
[10:10] *** tsujiban joined
[10:10] <jameslordhz> ethanol rm .git, god, i have spend hours to download it before error happens

[10:10] *** aro joined
[10:10] <Gorkyman> wereHamster: I want to undo last 2 commmits from my local and public repo

[10:10] <ethanol> jameslord1, get real internet

[10:10] *** harshpb joined
[10:11] *** cyfi left
[10:11] <wereHamster> Gorkyman: if it's public history you should use git revert

[10:11] *** moonlightcheese joined
[10:11] <sitaram> hi all; does 'git checkout -f' always equal 'git checkout -f HEAD'?  The manpage doesn't exactly say so... (or I can't find it)

[10:12] <Gorkyman> wereHamster: but I dont want any additional msges... I just want to completely remove 2 commits

[10:12] <jameslordhz> sitaram why git checkout HEAD?

[10:12] <ethanol> Gorkyman, what you want and what you should do are not the same thing.

[10:12] <wereHamster> Gorkyman: git reset --hard HEAD^^; git push -f

[10:12] <cmn> sitaram: IIRC checkout assumes the index

[10:13] <Gorkyman> ethanol: Its just a test remote setup, noone is using it except me... I'm just testing things

[10:13] *** OOPMan left
[10:13] <Gorkyman> if thats what you were refering to

[10:13] <sitaram> cmn: doh!  yes of course; thanks

[10:13] * sitaram needs to wake up

[10:14] <ethanol> Gorkyman, just don't make a habit of it ;- )

[10:14] <Gorkyman> wereHamster: will reset --hard remove my unstaged files? : )

[10:14] <Gorkyman> *changes

[10:15] *** forsto left
[10:15] <sitaram> cmn: hmm no...

[10:15] *** mikewintermute joined
[10:15] <sitaram> cmn: wait; pasting

[10:16] <cmn> sitaram: I just tested and it doesn't behave properly

[10:16] *** voidvector joined
[10:16] <wereHamster> Gorkyman: no

[10:16] *** ISF joined
[10:16] <cmn> sitaram: git checkout -f -- . behaves properly, git checkout -f does take HEAD

[10:17] *** cesc joined
[10:17] <Gorkyman> wereHamster: remote: error: denying non-fast-forward refs/heads/master (you should pull first)

[10:17] <wereHamster> Gorkyman: did you push with -f ?

[10:17] <Gorkyman> yep

[10:17] *** txomon|nqas joined
[10:18] <wereHamster> so it's a hook that is denying

[10:18] <wereHamster> disable the hook

[10:18] <Gorkyman> hum?

[10:18] <cmn> sitaram: sounds like a bug

[10:18] <wereHamster> Gorkyman: ask the server admin to do that for you then

[10:20] <ThePeach> I forgot to do a git checkout master in a submodule before committing and now I can't find the commit I've done as I'm currently in master and I can't see the commit, what's the solution here?

[10:20] <sitaram> cmn: yeah.  It's a bug.  Whether in the doc or the code I don't know :-)

[10:20] <cmn> sitaram: or I might have my semantics wrong; git checkout -f is branch-mode, so it takes HEAD, and git co -f -- . is file-mode, so it takes the index

[10:23] <sitaram> cmn: agreed, but nowhere does it *say* that in the absence of a <branch>, HEAD is used.

[10:23] *** cyfi joined
[10:23] <sitaram> cmn: which is what my original question was

[10:23] *** dotpot joined
[10:23] *** dreiss left
[10:25] <cmn> I wonder if checkout -f might be a bit of a side-effect

[10:25] *** empity joined
[10:25] <cmn> but at any rate, it should be documented that in the absense of any files or trees/branches, it takes HEAD

[10:27] *** Carmivore left
[10:27] *** cccaldas joined
[10:28] *** Carmivore joined
[10:28] *** LimeBlast joined
[10:28] *** alpha080 left
[10:29] *** txomon left
[10:29] *** prasadkr joined
[10:29] *** OOPMan joined
[10:31] *** kmox83 left
[10:32] *** JohnBat26 joined
[10:32] *** marthinal left
[10:32] *** johnhamelink joined
[10:33] *** johnhamelink left
[10:33] *** johnhamelink joined
[10:33] *** marthinal joined
[10:35] *** cesc left
[10:35] *** cesc joined
[10:36] *** psakrii joined
[10:36] *** ChaoWang left
[10:36] *** cyfi left
[10:38] <sitaram> yup

[10:38] <sitaram> cmn: so I take back my "doh!" ;-)

[10:38] * sitaram is not stupid after all...

[10:38] <cmn> hehe, absolutely

[10:38] *** rzec joined
[10:40] *** bjensen joined
[10:40] <bjensen> I have a commit in a different branch that I want into master..how can I do this?

[10:40] <wereHamster> bjensen: cherry-pick

[10:40] <bjensen> there are commits before and after that I don't want into master

[10:40] *** Heimidal left
[10:41] <wereHamster> bjensen: cherry-pick

[10:41] <bjensen> k thanks

[10:42] *** cortana` joined
[10:47] *** cyfi joined
[10:47] *** Sigma left
[10:48] *** robde left
[10:49] *** d0k joined
[10:50] *** herdingcat left
[10:50] *** Sigma joined
[10:51] *** Q| joined
[10:52] *** thannoy joined
[10:54] *** gusnan joined
[10:54] *** _inc joined
[10:54] *** Heisenmink_ joined
[10:55] *** papegaaij_ joined
[10:56] *** voidvector left
[10:56] *** papegaaij left
[10:56] *** ngulden left
[10:56] *** papegaaij_ left
[10:57] *** papegaaij joined
[10:57] *** ngulden joined
[10:58] *** ajt joined
[10:58] *** OOPMan left
[11:03] *** martinjlowm joined
[11:03] *** harshpb left
[11:04] *** prasadkr left
[11:05] *** robde joined
[11:05] *** ISF_ joined
[11:05] *** Q| left
[11:05] *** zdk left
[11:06] *** psakrii left
[11:07] *** ISF left
[11:07] *** aro left
[11:09] *** ph^ joined
[11:10] *** koo4 left
[11:10] *** sweb joined
[11:10] *** koo4 joined
[11:11] *** pepr joined
[11:11] *** ChanServ sets mode: +v pepr

[11:12] *** Targen joined
[11:13] *** bjensen_ joined
[11:13] *** bjensen left
[11:13] *** bjensen_ is now known as bjensen

[11:14] *** LimeBlast left
[11:14] *** sweb1 joined
[11:14] <pepr> Hi, please, show me how to specify the following commits for creating a bundle. I have one branch with commits A and B, and another branch with commits C and D. The commits B and D were merged into M and then there is N after the M. I need the XXXX for "git bundle create XXXX" to bundle the B, D, M, and N.  How to do it?

[11:15] <sweb1> why git not available on. i cant send a message. webchat.freenode.net

[11:15] *** stamina left
[11:15] *** stamina joined
[11:15] *** sweb left
[11:15] <pepr> sweb1, now you can ;)

[11:16] *** harshpb joined
[11:16] *** brian_g joined
[11:16] <sweb1> git freez after push

[11:17] <sweb1> http://pastebin.com/c9jqb3Vh

[11:17] <sweb1> whats my problem ?

[11:17] <pepr> Correction: how to "git bundle create my.bundle XXXX"

[11:18] <sweb1> what's my problem ?

[11:18] <sweb1> it's network problem ?

[11:18] <sweb1> it's git database problem ?

[11:18] <sweb1> how can i find out ?

[11:18] <sweb1> plz help guys

[11:18] <FauxFaux> pepr: --all!

[11:19] <_ikke_> sweb1: Less enter

[11:19] *** lacrymology joined
[11:19] *** johnhamelink left
[11:23] *** shabble left
[11:25] *** iocor joined
[11:25] *** ajt left
[11:25] *** ajt joined
[11:25] *** ajt left
[11:25] *** ajt joined
[11:26] *** shabble joined
[11:26] *** shabble left
[11:26] *** shabble joined
[11:26] *** yeryry left
[11:26] *** yeryry joined
[11:27] <pepr> FauxFaux: I do not want to bundle the A and C and the commits before (a lot of data), only the mentioned B, D, M, and N.  Or do I undestand well that the --all would bundle everything?

[11:27] *** canton7 joined
[11:28] <pepr> Possibly better formulation: How to create a bundle that contains a merge commit?

[11:28] *** _inc left
[11:29] <sitaram> pepr: git bundle uses the same syntax as git rev-list, so 'git bundle create ^A ^C B D M N' should do fine

[11:30] *** whyking left
[11:30] <sitaram> pepr: on the other side when you 'git fetch' from the bundle you'd better have A and C in that repo

[11:31] <pepr> sitaram: The A and C are there. What does it mean ^A?

[11:31] <cbreak> not A

[11:32] <pepr> cbreak and sitaram: Thanks.

[11:35] <sitaram> pepr: man git rev-parse and look for "specifying ranges" section

[11:35] <gitinfo> pepr: the git-rev-parse manpage is available at http://jk.gs/git-rev-parse.html

[11:35] <pepr> sweb1: the five lines are the result of packing (git gc) that is executed automatically sometimes.

[11:35] <pepr> cbreak and sitaram: :)

[11:38] *** lacrymology left
[11:38] *** wagle joined
[11:38] *** legnaleurc joined
[11:39] *** Q| joined
[11:40] <Q|> How would I add a commit before the actual HEAD again? Would it be rebase?

[11:40] <wereHamster> yes

[11:40] <Q|> kk, thx

[11:40] *** koo4 left
[11:41] *** Laibsch joined
[11:42] <Laibsch> Hi, I'm using git-buildpackage for maintaining my Debian packages.  I have a package that has a dfsg branch AND I use DebSrc3.0 to replace one directory with the newest, unreleased upstream code from cvs.

[11:43] <FauxFaux> Cool story, bro.

[11:43] <Laibsch> How can I merge the dfsg/upstream branch but ignore anything that's being done to it for the directory where I use the newest CVS code?

[11:43] <FauxFaux> Do the merge, then discard any changes in that directory.

[11:43] *** legnaleurc left
[11:43] <Laibsch> hm, yes, that's the idea.  But how?

[11:44] *** flijten left
[11:44] *** johnathanb left
[11:44] *** gitinfo sets mode: +v Laibsch

[11:45] <FauxFaux> git checkout commit -- path/to/directory will destroy that directory and replace it with what's in that commit.

[11:45] *** Targen left
[11:46] <Laibsch> ahm, there's no commit ID in your command

[11:46] <Laibsch> I think I see what you mean now

[11:46] *** johnathanb joined
[11:46] <FauxFaux> "commit" is the commit id.

[11:47] <Laibsch> yupp, I only understood that now ;)

[11:47] *** flijten joined
[11:47] *** legnaleurc joined
[11:52] *** legnaleurc left
[11:52] *** TD joined
[11:53] *** canton7 left
[11:54] *** OOPMan joined
[11:54] *** legnaleurc joined
[11:55] *** aro joined
[11:56] *** edude03 joined
[11:58] <Laibsch> FauxFaux: but that means every time I want to merge in the future I'll have to do those two steps, possibly even creating two commits?

[11:59] *** Dave^|| joined
[11:59] <FauxFaux> You can --amend the previous commit.  You probably need to explain why you need to repeatedly merge some folders, but not to me, as I'm leaving.

[12:00] *** swombat left
[12:00] <Laibsch> OK. Thank you for your help.

[12:00] <_ikke_> where is git checkout - explained?

[12:00] <Laibsch> _ikke_: git help checkout

[12:01] <_ikke_> Yeah, was reading that

[12:01] *** uu joined
[12:01] <_ikke_> - == @{-1}

[12:01] *** Dave^| left
[12:02] <Laibsch> I need to merge repeatedly because that's the way git-buildpackage works.  upstream lives on one branch.  that is merged to master which adds the packaging information in debian/.  whenever a new upstream tarball is released, that gets commited to the upstream branch and then merged to master.

[12:02] *** legnaleurc left
[12:03] *** bjensen left
[12:03] *** bjensen_ joined
[12:03] <Laibsch> the problem is that upstream branch has content for directory $XY but I basically need to ignore that

[12:03] <wereHamster> and where is the problem?

[12:03] <Laibsch> merge conflicts

[12:04] *** psakrii joined
[12:04] <wereHamster> ignore the directory (merge -n, checkout HEAD -- $dir; commit)

[12:04] <Laibsch> maybe because I've approached this incorrectly in the past

[12:04] *** robotmay left
[12:05] *** legnaleurc joined
[12:08] *** psakrii left
[12:08] <Laibsch> p

[12:08] *** robotmay joined
[12:09] *** dc5ala left
[12:10] *** legnaleurc_ joined
[12:10] *** legnaleurc left
[12:12] *** Chib left
[12:12] *** Heisenmink_ left
[12:13] *** canton7 joined
[12:14] *** legnaleurc_ left
[12:14] *** guampa joined
[12:15] *** harshpb left
[12:16] <Gorkyman> do you guys recommend using http://nvie.com/posts/a-successful-git-branching-model/ ?

[12:16] <Gorkyman> I'm thinking what model to use on my next project

[12:16] *** legnaleurc joined
[12:16] *** Heisenmink joined
[12:18] <canton7> Gorkyman, git-flow's very popular. Even if it ends up being not quite what you need, it's worth trying for a bit

[12:18] *** khmarbaise joined
[12:18] *** Heisenmink left
[12:18] <_ikke_> !workflow

[12:18] <gitinfo> Finding the right workflow for you is critical for the success of any SCM project.  Git is very flexible with respect to workflow.  See http://progit.org/book/ch3-4.html and http://nvie.com/posts/a-successful-git-branching-model/ (associated tool https://github.com/nvie/gitflow) for branching workflow ideas, http://progit.org/book/ch5-1.html for distributed workflow ideas.

[12:18] <_ikke_> Gorkyman: You can use gitflow as a base, but only pick out what you really need

[12:19] <jameslordhz> every time i run git commit --amend, a interactive window will appears, i hate it

[12:19] *** Heisenmink joined
[12:19] <canton7> jameslord1, there's a patch on the ML, and it might have been released, to add --no-edit

[12:20] *** Heisenmink left
[12:21] *** legnaleurc left
[12:21] <Mikachu> jameslordhz: git commit --amend -C HEAD

[12:21] <sweb1> pepr: yeah tnx it worked. problem its for git database

[12:21] *** legnaleurc joined
[12:21] <sweb1> after optimization problem sovled

[12:22] <jameslordhz> Mikachu why i should tell git that head:(

[12:22] <Mikachu> okay

[12:23] *** msponge left
[12:23] <cmn> interactive window? do you mean it asks you to ammend the commit message?

[12:23] *** erichynds left
[12:23] <m1sc> jameslordhz: or "GIT_EDITOR=true git commit --amend" (proposed by peff)

[12:23] <cmn> look up what -C does, it looks like it's exactly what you want

[12:24] <_ikke_> cmn: You have to specify a commit

[12:24] <_ikke_> with -C

[12:24] <cmn> yes

[12:24] *** uu left
[12:24] <cmn> which is what Mikachu told him to do

[12:24] <_ikke_> right

[12:24] <Mikachu> but as we found out, why should i tell git that head:(

[12:25] <cmn> well, you should tell git that head:( (or HEAD) because that's what you want

[12:25] <jameslordhz> cmn a interactive command line exactly

[12:26] <cmn> and what does that mean for you? "interactive command line" sounds like a terminal

[12:27] <wereHamster> what is a non-interactive command line?

[12:27] *** uu joined
[12:27] *** ziro`_ left
[12:27] <cmn> you could argue that a bash script is running in a non-interactive command line (but just because you can't modify it in flight)

[12:27] *** uu left
[12:27] *** cybersphinx joined
[12:28] <cmn> the bash manpage has "-i        If the -i option is present, the shell is interactive"

[12:28] <aro> how do i add a folder if it was part of a submodule

[12:28] <_ikke_> aro: Git doesn't track folders

[12:29] <cmn> but that doesn't make it any clearer; jameslordhz do you get a shell or an editor?

[12:29] *** OOPMan left
[12:29] *** xiangfu left
[12:29] <jameslordhz> cmn bash, now i am using linux

[12:30] <aro> im getting this error "fatal: Path 'app/plugins/upload/models/.../file.php' is in submodule 'app/plugins/upload'"

[12:30] *** ziro`_ joined
[12:30] *** the_cybersphinx left
[12:30] <cmn> so when you run git commit --amend it starts up a new shell?

[12:30] <cmn> aro: if you want to modify a submodule, you need to modify it from inside the submodule

[12:30] *** robde left
[12:30] <aro> how do i do that? i just want it to be part of my main proiject

[12:30] *** legnaleurc left
[12:30] *** thiago joined
[12:31] <cmn> then you have to move it somewhere else

[12:31] <aro> move it somewhere else?

[12:31] <aro> it needs to be where it is

[12:31] <cmn> if it's in the subproject, it can't be part of the superproject

[12:32] <canton7> aro, a submodule is a separate git repo which is referred by a parent git repo. If makes no sense to add a repo (A) as a submodule of another one (B), then say that one of the files inside A actually belonds to B

[12:32] <canton7> *belogns

[12:32] <canton7> *belongs. got there in the end :P

[12:32] <_ikke_> hehe :P

[12:33] *** kuhkatz joined
[12:33] *** kanzie_ joined
[12:33] *** AmirBehzad joined
[12:33] *** cenuij left
[12:33] *** prasadkr joined
[12:34] *** kanzie_ left
[12:34] *** babilen left
[12:34] *** batlock666 joined
[12:35] *** Spockz left
[12:36] *** Spockz joined
[12:36] *** slakmagik joined
[12:36] *** mjt joined
[12:37] <mjt> hello. is there a way to show git diff between current working copy of a given file and the same file from particular commit/branch?

[12:37] *** kanzie left
[12:37] <cmn> yes, git diff file <commit>:file

[12:37] *** edude03 left
[12:38] <mjt> oh. that simple :)

[12:38] *** legnaleurc joined
[12:38] <mjt> thanks!

[12:38] <cmn> yep

[12:39] *** sweb1 left
[12:40] <mjt> hmm.

[12:40] <mjt> fatal: Path 'udev-md-raid.rules' exists on disk, but not in '1fbc5b7a5ea9709cdfff7fe7b63b43dfd4def124'.

[12:40] <mjt> git archive --format=tar  1fbc5b7a5ea9709cdfff7fe7b63b43dfd4def124 | tar t | grep udev

[12:40] *** gilligan_ left
[12:40] <mjt> udev-md-raid.rules

[12:40] *** sweb joined
[12:41] *** cenuij joined
[12:41] *** cenuij left
[12:41] *** cenuij joined
[12:41] *** LeMike joined
[12:41] *** gitinfo sets mode: +v LeMike

[12:42] <cmn> are you running it from the right dir?

[12:42] <mjt> yes

[12:42] *** legnaleurc left
[12:42] <mjt> it is in the top dir of the git tree, which i'm in.

[12:43] <mjt> that commit is actually a commit i'm trying to merge and that file conflicts

[12:43] <cmn> that's odd, I'm also getting that error. I'm pretty sure that used to work

[12:43] <charon> some git-diff bug. reverse the order of args for now

[12:44] <mjt> heh. that works :)

[12:44] <LeMike> hi there. is pushed some files in linux with umlauts in the filename and as I pulled them in win they appear to be unchanged / missing in the repo and the origin files show some bad encoded filenames. how could that be?

[12:44] <mjt> than you charon, cmn !

[12:44] <mjt> thank even :)

[12:45] <mjt> LeMike: wrong client-side encoding?

[12:45] <LeMike> i check. w8

[12:45] *** legnaleurc joined
[12:45] <cmn> LeMike: what version of msysgit are you using? up to recently, they used the ANSI version of the API, which causes non-ASCII filename to garble horribly

[12:45] <mjt> its always a problem to copy files between different OSes - files which contain some non-ascii chars.

[12:46] *** cenuij left
[12:46] *** cenuij joined
[12:46] *** cenuij left
[12:46] *** cenuij joined
[12:46] <LeMike> cmn : 1.7.8.msysgit.1

[12:47] <cmn> I thought that would have the patches

[12:47] <cmn> maybe they're only in an experimental branch

[12:47] <cmn> you better send an e-mail to the msysgit guys to ask

[12:47] *** mandric left
[12:47] *** OOPMan joined
[12:47] <LeMike> ok

[12:48] *** cannonball joined
[12:49] <cmn> it might work if you can convince Windows to use an UTF-8 locale

[12:49] *** dv310p3r left
[12:52] *** legnaleurc_ joined
[12:52] *** subbyyy joined
[12:52] *** legnaleurc left
[12:54] *** digitalfiz joined
[12:55] <LeMike> thanks, I try.

[12:56] *** johnkpaul joined
[12:58] *** kermit left
[12:59] *** legnaleurc joined
[12:59] *** legnaleurc_ left
[13:00] *** johnkpaul left
[13:02] *** maleknet left
[13:02] *** legnaleurc left
[13:02] *** babilen joined
[13:04] *** legnaleurc joined
[13:05] *** shiba_yu36 left
[13:06] *** pidus_ left
[13:06] *** Cromulent joined
[13:07] *** t4nkd joined
[13:08] *** legnaleurc left
[13:09] <pepr> Problem -- the 'git bundle create test.bundle ^A ^C B D M N' works but the 'git bundle create test2.bundle ^e7a6 ^ae82 ac06 8d24 3613 4ef0' does not. See http://pastebin.com/FHFj77gy  Why?

[13:09] * FauxFaux boggles at what the first one does.

[13:09] <FauxFaux> pepr: git rev-list ^A ^C B D M N #?

[13:10] <FauxFaux> Or, y'know, just get into a situation where you can use git fetch; has to be easier than this bundling effort. :p

[13:10] *** TomyLobo left
[13:10] *** TomyLobo2 joined
[13:11] *** TomyLobo2 is now known as TomyLobo

[13:11] *** legnaleurc joined
[13:11] *** Targen joined
[13:12] *** beiter joined
[13:12] *** xiangfu joined
[13:12] *** shiba_yu36 joined
[13:13] *** acl_ joined
[13:13] <pepr> FauxFaux: sorry, the first one is expressed via tags, the second is expressed via sha of the commits. The full example -- tiny test-purpose repository is here http://www.skil.cz/gittest/gittest.zip (about 5 kB).

[13:13] *** ziro`_ left
[13:14] *** honschu joined
[13:15] <honschu> Hi, now I have the linux-kernel as git. How do I "checkout" kernel version 3.2 into a new directory?

[13:15] *** alberto56 left
[13:15] *** kermit joined
[13:15] *** Heisenmink joined
[13:15] *** legnaleurc left
[13:15] *** idoru left
[13:16] *** idoru joined
[13:16] *** idoru left
[13:16] *** weiyang joined
[13:16] *** idoru joined
[13:16] <wereHamster> honschu: clone the repo, then checkout the version

[13:16] <pepr> FauxFaux: The image shows the situation http://www.skil.cz/gittest/gittest.png. I need to transfer the merge commit and some commits around to the other side.

[13:16] *** thiago left
[13:17] <wereHamster> pom: git bundle create test.bundle ^A ^C N

[13:17] <wereHamster> pepr: ^^^

[13:17] <wereHamster> the other arguments are not needed

[13:17] *** erichynds joined
[13:17] <honschu> wereHamster: Isn't that a bit too mutch? to clone the whole linux-git-tree? I just want to "extract" the 3.2 version from the already-existing linux-kernel-git-repo into a new directory called linux_3.2

[13:17] *** thiago joined
[13:17] <wereHamster> honschu: if it's on the local filesystem then git will use hardlinks

[13:18] <cbreak> honschu: man git-archive

[13:18] <gitinfo> honschu: the git-archive manpage is available at http://jk.gs/git-archive.html

[13:18] <cbreak> if you want an extra work tree, there's a helper script for that in contrib

[13:19] *** danslo`work left
[13:19] <honschu> cbreak: I don't want an extra working-_git_-tree, I just want the same files in a seperate dir without git-stuff as I could download from ftp.kernel.org.

[13:20] *** bjensen_ left
[13:20] *** bjensen joined
[13:20] <cbreak> see above

[13:20] *** t2mahesh joined
[13:21] *** robde joined
[13:21] <pepr> wereHamster: well, it works with the tags.  Can the same be written using the sha prefixes? It seems it does not work for me.

[13:21] *** weeb1e_ joined
[13:21] <wereHamster> honschu: man git-archive

[13:21] <gitinfo> honschu: the git-archive manpage is available at http://jk.gs/git-archive.html

[13:21] *** legnaleurc joined
[13:21] <Gorkyman> so.. is anyone here using git-flow ?

[13:22] *** fisted left
[13:22] <_ikke_> Gorkyman: In some form, yes

[13:22] <Gorkyman> or at least the concept of branching behind

[13:22] <_ikke_> Gorkyman: But not extensively

[13:22] *** joshsmith left
[13:22] <canton7> same

[13:22] *** fisted joined
[13:22] *** honschu left
[13:22] <Gorkyman> I'm just going through it... basically you have 2 main branches (master and dev), those are permanent...

[13:23] <canton7> yup

[13:23] <Gorkyman> then lets say you have a "feature" branch

[13:23] <Gorkyman> but that is not really a branch, right?

[13:23] <pepr> wereHamster: when not using tags, it says "fatal: Refusing to create empty bundle."

[13:23] <canton7> it is really a real branch

[13:23] <canton7> Gorkyman, are you coming from svn?

[13:23] <Gorkyman> so if two devs are working on 2 different features

[13:24] <Gorkyman> how do I handle "feature" branch?

[13:24] <_ikke_> Gorkyman: Featurebranches are mainly local

[13:24] <canton7> Gorkyman, there's no branch called "feature". If you're developing two features, A and B, then you have two feature branches -- "feature/A" and "feature/B"

[13:24] *** ziro`_ joined
[13:24] <wereHamster> pepr: are you sure the four letter sha1s are enough? What happens when you replace <tag> with `git rev-parse <tag>` ?

[13:24] <Gorkyman> so I need some name convention here?

[13:25] <Gorkyman> so that "feature" branches wont colide with names

[13:25] <canton7> Gorkyman, part of git-flow is the naming convention (in that feature branches start with "feature/", hotfixes with "hotfix/", etc)

[13:26] <canton7> but as long as you give the feature a name that relates to what the feature is, or maybe the ticket it's fixing, etc, then you shouldn't have a problem

[13:26] <Gorkyman> so when someone finishes its feature, it merges it with dev branch right?

[13:26] <canton7> right

[13:26] *** shiba_yu36 left
[13:26] *** OOPMan left
[13:27] *** jsick3 joined
[13:27] <Gorkyman> what if I want a feature branch to be seen publicaly

[13:27] <Gorkyman> before merging it to dev

[13:27] <pepr> wereHamster: I did try it also with longer prefixes ... http://pastebin.com/udfFBwks

[13:27] <canton7> Gorkyman, then you push it to somewhere public

[13:27] <Gorkyman> and then delete it after...

[13:27] <canton7> if you want

[13:28] *** Cromulent left
[13:29] <Gorkyman> hm.. right

[13:29] *** centipedefarmer_ joined
[13:29] *** Targen left
[13:29] <wereHamster> pepr: no, I mean istead of 'git bundle create test.bundle <tag1> ^<tag2>' that you use 'git bundle create test.bundle `git rev-parse <tag1>` ^`git rev-parse <tag2>`'

[13:30] <wereHamster> because that's what git is supposed to be doing

[13:30] <zi> Will git reset HEAD reset it to local head or upstream head?

[13:30] <wereHamster> zi: everything is local

[13:30] <canton7> local HEAD

[13:30] *** ziro`_ left
[13:31] <zi> Hmm, yeah I guess it was a stupid assumption.

[13:32] *** khmarbaise left
[13:33] <pepr> wereHamster: well, I cannot do that on windows OS as backticks do not work here.

[13:33] <Mikachu> there's no such thing as local or upstream HEAD, HEAD is the currently checked out branch

[13:33] <wereHamster> pepr: does windows have something equivalent to backticks?

[13:34] <wereHamster> or just run the rev-parse commands individually and then pass them to bundle create in their full form (40 character hex)

[13:35] <wereHamster> Mikachu: there is .git/HEAD, .git/refs/remotes/origin/HEAD and the HEAD in the remote repo. It's not entirely surprising that users are sometimes confused

[13:36] *** cakehero joined
[13:37] *** jjido joined
[13:37] *** yshh joined
[13:38] *** harshpb joined
[13:38] <pepr> wereHamster: It does not work with full sha's either http://pastebin.com/PjAiPGSs  Could this be limitation of the Windows implementation of git? (git version 1.7.8.msysgit.0)

[13:38] <SethRobertson> I wonder what would happen if some poor slob named a branch HEAD

[13:39] *** jameslordhz left
[13:39] <_ikke_> SethRobertson: It'll teach him not *ever* to do that again

[13:39] <Gorkyman> canton7: what about in a sense of disk space usage? with large number of files in git, will git-flow work well ?

[13:39] <_ikke_> +

[13:39] <pepr> wereHamster: I do not think that windows has anything similar to backticks.

[13:40] *** subbyyy left
[13:40] <jast> msysgit includes bash, and bash does have backticks :)

[13:40] <_ikke_> ---+6

[13:40] <_ikke_> oops

[13:41] *** pidus joined
[13:41] <canton7> Gorkyman, as well as anything else. Extra branches don't mean extra storage space

[13:41] <FauxFaux> Arrrrrrrrgh, svn keyword expansion.

[13:42] <pepr> jast: You are right. Anyway, the command does not work even when I use the full 40-char sha (to avoid using backticks).

[13:42] *** cmyk_ joined
[13:42] *** Laibsch1 joined
[13:42] <cbreak> Gorkyman: an additional branch uses around one block on your hard disk.

[13:42] <cbreak> (mostly empty)

[13:43] *** Laibsch left
[13:43] *** kermit left
[13:43] <_rane> what was the easiest way to set up a branch to track remote branch with the same name; wasn't there something like git push -u or something, that git branch --set-upstream is always hard to remember

[13:44] <canton7> push -u's the one, and the "same name" bit is irrelevant

[13:44] <_rane> so git push -u origin <branch> will update the tracking at the same time

[13:45] <canton7> by default, "git push" pushes to the remote branch of the same name, which is probbaly what you're getting confused with

[13:45] <canton7> yup

[13:46] *** TD left
[13:46] *** Fandekasp joined
[13:47] <Gorkyman> cbreak: but if I have dev and production branches, both have full files copies of their own ?

[13:48] <cbreak> neither has any files

[13:48] <cbreak> a branch only has a single hash as content

[13:48] <Gorkyman> where are files then?

[13:49] *** canton7 left
[13:49] *** bjensen left
[13:50] <Gorkyman> work tree?

[13:50] <_ikke_> On a topic branch, I did git rebase master, but it seems it just moved the topic branch to master, while not rebasing any commits on it

[13:51] *** bartek joined
[13:51] *** plusk joined
[13:52] <_ikke_> http://pastie.org/3160284

[13:52] *** robde left
[13:52] *** pro_metedor joined
[13:52] <pro_metedor> Hi guys !

[13:52] <_ikke_> Ok n/m

[13:52] <_ikke_> my error

[13:52] <_ikke_> pro_metedor: hello

[13:52] <_ikke_> pro_metedor: !welcome

[13:52] <gitinfo> pro_metedor: Welcome to this channel. Go ahead and ask your question. Very few people are responding to greetings, but will respond if a question is asked.

[13:53] *** tcurdt left
[13:54] *** nikuyoshi left
[13:54] *** jjido left
[13:54] *** glcrazy left
[13:57] *** whyking joined
[14:00] *** sweb left
[14:00] <pro_metedor> if I have merged branch into master does it dissapears ?

[14:01] *** sweb joined
[14:01] <_ikke_> pro_metedor: No

[14:02] <_ikke_> pro_metedor: The branch remains

[14:03] <pro_metedor> well I had a branch created and merged it. Now when I clone repo freh I got only master's branch

[14:03] *** ehsan joined
[14:03] <pro_metedor> *fresh

[14:03] <_ikke_> pro_metedor: git clone does not recreate all branches

[14:03] <_ikke_> pro_metedor: git branch -a

[14:04] <pro_metedor> well -a shows branches that were in use

[14:07] *** k299 joined
[14:07] *** k299 left
[14:08] *** Jackneill joined
[14:08] *** k299 joined
[14:08] <_ikke_> !remote_branches

[14:08] <gitinfo> Remote branches are not created locally on clone. They show up as remote branches (git branch -r). To create local branches form them use git checkout -b local_name remote/branch_name or more recently git checkout localname remote/branch-name

[14:09] *** dv310p3r joined
[14:09] *** jryans joined
[14:10] *** alan_w joined
[14:10] <charon> uh, that last bit is wrong

[14:10] <_ikke_> Hmm?

[14:10] *** joshsmith joined
[14:10] *** umren joined
[14:11] <_ikke_> What was the recent change then?

[14:11] <charon> the magic version is 'git checkout remotename' which will check out remotes/foo/remotename as heads/remotename assuming there is exactly one matching foo

[14:11] <_ikke_> ah right

[14:11] <_ikke_> Edited

[14:11] <charon> 'git checkout localname remote/branch-name' tries to treat remote/branch-name as a filename arg

[14:12] *** Laibsch1 left
[14:12] *** gavin_huang joined
[14:12] *** Heisenmink left
[14:13] *** AaronMT joined
[14:13] <_ikke_> charon: I can't find that specific case in the man

[14:13] *** tommyvyo joined
[14:13] *** Bass10 joined
[14:14] <charon> hrm, probably i am mistaken too and the --track is required

[14:14] <charon> as in 'git checkout -t remotename'

[14:14] *** alan_w left
[14:14] *** dannas left
[14:14] <_ikke_> ah ok

[14:15] *** Gorkyman_ joined
[14:15] *** Laibsch joined
[14:15] <_ikke_> !remote_branches

[14:15] <gitinfo> Remote branches are not created locally on clone. They show up as remote branches (git branch -r). To create local branches form them use git checkout -b local_name remote/branch_name or more recently git checkout -t remote/branch-name

[14:16] *** Gorkyman left
[14:16] *** alan_w joined
[14:16] <pro_metedor> so once I have merged the branch and pushed the clone into origin, the branch becomes remote ?

[14:17] *** jonesy joined
[14:17] *** weiyang left
[14:17] *** heptadecagram joined
[14:18] <FauxFaux> Arrrrgh why do line-endings exist and why can't rebase or merge just -ing ignore them.

[14:19] <Mikachu> FauxFaux: -Xignore-space-change or so

[14:19] <Mikachu> at least one of those options should do something

[14:20] *** Aktom joined
[14:20] <_ikke_> pro_metedor: It has nothing to do with pushing

[14:20] <FauxFaux> Which never works.  Actually I'm currently losing at checkout -p.

[14:20] * FauxFaux goes to mutate the whole repo.

[14:20] *** Aktom left
[14:20] <_ikke_> pro_metedor: Remote branches are gits way to keep track of branches which exists on a remote

[14:21] *** aismail_ joined
[14:21] *** astrostl joined
[14:22] <pro_metedor> _ikke_: yes, I meant that they had to be pushed some time before, to become remote

[14:22] *** beaufour joined
[14:22] *** gitinfo sets mode: +v aismail_

[14:23] <aismail_> hi all, I'm running into this problem: git reset --hard HEAD works correctly from within my repo, but if I do git --git-dir=blah reset --hard HEAD, it doesn't do it anymore (doesn't touch the working tree)

[14:23] <aismail_> any ideas? :)

[14:23] *** d1b joined
[14:24] *** swombat joined
[14:24] <Mikachu> aismail_: specify --work-tree ?

[14:25] <aismail_> Mikachu, thanks, that worked!

[14:26] *** Cromulent joined
[14:26] <aismail_> Why didn't I think of that :)

[14:27] *** harshpb left
[14:30] *** dorisabayon joined
[14:30] *** matthiasgorgens1 left
[14:30] *** nikuyoshi joined
[14:31] *** Fandekasp left
[14:33] *** QaDeS joined
[14:33] *** freimatz left
[14:34] *** preinheimer joined
[14:34] *** pepr left
[14:35] *** QaDeS_ joined
[14:35] *** QaDeS_ left
[14:36] <charon> _ikke_: i see you corrected my next mistake, in that the remote's nickname is also required. sorry for the mess...

[14:37] *** d0k_ joined
[14:38] *** tchan1 joined
[14:38] <_ikke_> charon: I knew that the remotename was required indeed :)

[14:38] *** Yuuhi```` joined
[14:38] *** valtih_ joined
[14:38] *** tchan1 left
[14:38] <_ikke_> charon: collaboration :)

[14:38] *** jonesy_ joined
[14:38] *** rurufufuss left
[14:38] *** LimeBlast joined
[14:39] *** tchan left
[14:39] *** Cromulen_ joined
[14:39] *** swombat_ joined
[14:39] *** tchan joined
[14:40] *** legnaleurc_ joined
[14:40] *** telemachus_ joined
[14:40] *** mr_schlauch left
[14:40] *** jmcantrell left
[14:40] *** telemachus left
[14:40] *** selevt left
[14:40] *** jakob left
[14:40] *** d0k left
[14:40] *** SegFaultAX left
[14:40] *** joshteam left
[14:40] *** arosen left
[14:40] *** xiangfu left
[14:40] *** jonesy left
[14:40] *** cortana` left
[14:40] *** RobertLaptop left
[14:40] *** gerard0 left
[14:40] *** mjessome left
[14:40] *** maknz left
[14:40] *** aismail_ left
[14:40] *** legnaleurc left
[14:40] *** marthinal left
[14:40] *** alecat left
[14:40] *** beautifulmind left
[14:40] *** ASIRINeiluj left
[14:40] *** jceb left
[14:40] *** valtih left
[14:40] *** zivester left
[14:40] *** Gitzilla left
[14:40] *** Yuuhi``` left
[14:40] *** flaguy48 left
[14:40] *** signal-9 left
[14:40] *** joeytwiddle left
[14:40] *** daethorian left
[14:40] *** vmiklos left
[14:40] *** leo left
[14:40] *** d0k_ is now known as d0k

[14:40] *** lsobral joined
[14:40] *** jakob joined
[14:40] *** brian_g left
[14:40] *** giallu left
[14:40] *** tiglionabbit left
[14:40] *** txomon|home left
[14:40] *** CEnnis91 left
[14:40] *** atdiehm_ left
[14:40] *** Zenopus left
[14:40] *** jcarouth left
[14:40] *** empity` joined
[14:40] *** jceb joined
[14:40] *** empity left
[14:40] *** CEnnis91 joined
[14:40] *** swombat left
[14:40] *** Element9_work left
[14:40] *** NickASloan left
[14:40] *** maknz joined
[14:40] *** Zenopus joined
[14:40] *** z0n3d left
[14:40] *** _root_ left
[14:40] *** _rane left
[14:40] *** An_Ony_Moose left
[14:40] *** joshteam joined
[14:41] *** kloeri left
[14:41] *** ASIRINeiluj joined
[14:41] *** giallu joined
[14:41] *** mikewintermute left
[14:41] *** NickASloan joined
[14:41] *** kloeri joined
[14:41] *** RobertLaptop joined
[14:41] *** joeytwiddle joined
[14:41] *** arosen joined
[14:41] *** _rane joined
[14:41] *** Cromulent left
[14:41] *** Jackneill left
[14:41] *** agile left
[14:41] *** jcarouth joined
[14:41] *** axl__ left
[14:41] *** txomon|home joined
[14:41] *** Element9_work joined
[14:41] *** z0n3d joined
[14:41] *** SegFaultAX joined
[14:41] *** gerard0 joined
[14:41] *** brian_g joined
[14:41] *** daethorian joined
[14:41] *** atdiehm_ joined
[14:41] *** zivester joined
[14:41] *** signal-9 joined
[14:41] *** mjessome joined
[14:41] *** axl_ joined
[14:41] *** vmiklos joined
[14:41] *** agile joined
[14:41] *** An_Ony_Moose joined
[14:41] *** Gitzilla joined
[14:41] *** selevt joined
[14:42] *** aismail_ joined
[14:42] *** marthinal joined
[14:42] *** alecat joined
[14:42] *** xiangfu joined
[14:42] *** selevt left
[14:42] *** selevt joined
[14:42] *** cortana` joined
[14:42] *** empity` left
[14:42] *** flaguy48 joined
[14:43] *** Laibsch left
[14:43] *** empity joined
[14:43] *** jmcantrell joined
[14:43] *** _root_ joined
[14:43] *** Jackneill joined
[14:43] *** mikewintermute joined
[14:44] *** akosikeno joined
[14:44] *** legnaleurc_ left
[14:45] *** coredumb joined
[14:45] *** matthiasgorgens joined
[14:45] *** cesc left
[14:46] *** legnaleurc joined
[14:46] *** kloeri left
[14:46] *** kloeri joined
[14:46] *** spvensko joined
[14:47] *** pidus_ joined
[14:47] *** pidus left
[14:47] *** pidus_ left
[14:47] *** pidus_ joined
[14:48] *** mikewintermute left
[14:48] *** rpg left
[14:49] *** mikewintermute joined
[14:49] *** DofLeFou left
[14:49] *** coredumb left
[14:50] *** Cromulen_ left
[14:50] *** Cromulent joined
[14:50] *** legnaleurc left
[14:51] *** kloeri left
[14:51] *** kloeri joined
[14:51] *** jason237 left
[14:52] *** alberto56 joined
[14:52] *** sweb left
[14:53] *** n8o-mba joined
[14:53] *** neurodrone joined
[14:53] *** TeckniX joined
[14:53] *** JohnBat26 left
[14:54] *** shabble left
[14:54] *** coredumb joined
[14:54] *** harshpb joined
[14:55] *** tiglionabbit joined
[14:55] *** legnaleurc joined
[14:56] *** ziro`_ joined
[14:56] *** mcdebugger joined
[14:56] *** shabble joined
[14:56] *** kloeri left
[14:57] *** kloeri joined
[14:57] *** AmirBehzad left
[14:57] *** kloeri left
[14:57] *** sweb joined
[14:58] *** kukks joined
[14:58] *** glennpratt joined
[14:58] *** Jackneill left
[14:59] *** Jackneill joined
[14:59] *** nadavoid joined
[15:01] *** kloeri joined
[15:01] *** acl_ left
[15:01] *** luxurymode joined
[15:01] *** flavius joined
[15:02] *** herdingcat joined
[15:03] *** Laibsch joined
[15:04] *** jason237 joined
[15:05] *** Gorkyman_ left
[15:06] *** dv310p3r left
[15:06] *** koo4 joined
[15:06] *** Q| left
[15:07] *** cakehero is now known as savant

[15:07] *** harshpb left
[15:07] *** Gorkyman joined
[15:07] *** savant left
[15:09] *** nikuyoshi left
[15:10] *** nikuyoshi joined
[15:11] *** techrush joined
[15:12] *** telemachus_ is now known as telemachus

[15:13] *** thiago left
[15:13] *** Laibsch left
[15:13] *** Laibsch joined
[15:13] *** tillMorning joined
[15:14] *** Shusshu left
[15:14] <tillMorning> hello

[15:14] <tillMorning> how I can add all the files to github

[15:14] <tillMorning> i'm writing:

[15:14] *** valtih joined
[15:14] <tillMorning> git add .

[15:14] <tillMorning> then git push

[15:14] <tillMorning> and this don't work

[15:14] <_ikke_> tillMorning: less enter, more punctuation :)

[15:14] *** philips joined
[15:15] <tillMorning> I know how to add it only: add file_name then git push

[15:15] <_ikke_> tillMorning: You forget the commit part

[15:15] *** shurane joined
[15:15] *** thiago joined
[15:15] <_ikke_> tillMorning: Are you comming from SVN?

[15:15] <tillMorning> can you explain?

[15:15] *** Q| joined
[15:15] *** xiangfu left
[15:15] <tillMorning> I first need to write

[15:15] <tillMorning> git add .

[15:15] <_ikke_> tillMorning: There are better resources to explain, like !book

[15:15] <gitinfo> tillMorning: 'Pro Git' is a complete book about git that is available online for free (there's a print version, too): http://progit.org/book/

[15:15] <tillMorning> then git commit 'smth'

[15:16] <tillMorning> and then git push?

[15:16] <_ikke_> smth should be a descriptive message

[15:16] <tillMorning> i know

[15:16] <tillMorning> but my way is OK?

[15:16] <_ikke_> Yeah, initially it is

[15:17] *** soulcake joined
[15:17] <tillMorning> cool

[15:17] <tillMorning> works

[15:17] <tillMorning> thanks guys

[15:17] <tillMorning> :)

[15:17] *** valtih_ left
[15:18] <tillMorning> _ikke_ , how I can remove a file from github repository? I want to remove: README and git_test.txt ?

[15:18] <tillMorning> i mean, what command

[15:18] *** koo4 left
[15:18] <_ikke_> tillMorning: You need to learn that you operate locally

[15:19] *** jutaro left
[15:19] <_ikke_> and later sync with a remote

[15:19] *** prasadkr left
[15:19] *** fir31ight left
[15:19] *** t4nkd left
[15:19] <_ikke_> so git rm README and also for the other file

[15:19] <_ikke_> and then commit

[15:19] <telemachus> tillMorning: git help rm

[15:19] *** koo4 joined
[15:20] *** idoru left
[15:21] *** beaufour_ joined
[15:21] *** pfsmorigo joined
[15:21] <telemachus> tillMorning: You might also try http://rogerdudler.github.com/git-guide/ for a quick-start or the first few chapters of ProGit which _ikke_ mentioned

[15:21] *** beaufour left
[15:21] *** beaufour_ is now known as beaufour

[15:22] <tillMorning> Thanks, works great

[15:22] *** dv310p3r joined
[15:22] <tillMorning> I see

[15:22] <tillMorning> Thank you

[15:22] *** guampa left
[15:23] *** kuhkatz left
[15:24] *** psakrii joined
[15:24] *** ehsan left
[15:24] <tillMorning> how I can update commit mesage? I've tried: git commit -m 'first test' then git push? And I see they aren't changed

[15:24] *** fir31ight joined
[15:25] <mjt> update? you mean change?

[15:25] *** harshpb joined
[15:25] *** emper0r joined
[15:25] *** delight joined
[15:25] <emper0r> hi... erm.. i need to checkout 1 pass before with 1 file how?

[15:25] *** t4nkd joined
[15:26] <tillMorning> change

[15:26] <tillMorning> right

[15:26] <tillMorning> sorry

[15:26] *** nadavoid left
[15:27] <emper0r> need backup 1 file with this hread 7f8a3f0a  :S ?

[15:28] <emper0r> ahh works this thxs any way

[15:28] <emper0r> git checkout 7f8a3f0a modules/etree.so

[15:28] <emper0r> :)

[15:28] *** Praise joined
[15:29] <tillMorning> mjt ?

[15:29] <mjt> what?

[15:29] *** t2mahesh left
[15:29] <tillMorning> how i can change all commit messages?

[15:29] <mjt> lol

[15:30] <mjt> sure you reallywant to do all of them?

[15:30] <tillMorning> yeah , because now all is 'asdasd'

[15:30] <mjt> git rebase -i lets you change many

[15:30] <mjt> git commit --amend lets you change last

[15:31] *** t4nkd left
[15:31] *** cmyk_ left
[15:32] *** alberto56 left
[15:33] *** ramsey joined
[15:33] *** jdav_gone left
[15:33] *** emper0r left
[15:34] *** cakehero joined
[15:34] <telemachus> tillMorning: If you literally just started that repo, just rm -rf .git and start over

[15:34] <telemachus> But really, you should read about the basics of git _before_ trying to use it.

[15:34] *** Spockz left
[15:34] <tillMorning> ok

[15:35] *** dvide left
[15:36] *** zackiv31 joined
[15:36] *** jryans left
[15:37] *** zatan joined
[15:37] *** jryans joined
[15:37] <zatan> hi how can I check hit version ?

[15:37] <zatan> git

[15:37] <zatan> *

[15:37] *** shabble left
[15:37] *** xim1 left
[15:37] <FauxFaux> zatan: Like with any other application ever?

[15:37] *** alberto56 joined
[15:37] <SethRobertson> git --version

[15:38] <zatan> sorry

[15:38] <zatan> thanks

[15:38] <telemachus> well, in fairness, sometimes it's only application -v or even application -V

[15:38] <SethRobertson> man git would have pointed you in the right place

[15:38] <gitinfo> the git manpage is available at http://jk.gs/git.html

[15:38] <telemachus> but yeah, it's usually in the 'v' family :)

[15:38] *** jdav_gone joined
[15:39] <FauxFaux> telemachus: Both of those print "usage: git [--version] [..." :p  Also, some things (like openjdk) are "-version".

[15:39] *** diegoviola joined
[15:39] *** scelis joined
[15:39] *** unreal joined
[15:39] <telemachus> FauxFaux: Hah I forgot -version (don't see that often). I was proud I remembered -V (which is in discount and I nearly always forget that when I really need it).

[15:40] *** Praise left
[15:41] *** cschneid_ joined
[15:41] *** kevwil joined
[15:42] *** marthinal left
[15:42] *** Praise joined
[15:42] *** diverdude joined
[15:42] <diverdude> anybody in here using gitlab?

[15:42] *** beaufour left
[15:42] *** beaufour joined
[15:43] *** shabble joined
[15:43] *** shabble left
[15:43] *** shabble joined
[15:43] *** Biopandemic joined
[15:43] <cbreak> what's that?

[15:43] *** FernandoBasso joined
[15:43] *** techrush- joined
[15:44] *** TeckniX left
[15:44] *** acrocity left
[15:44] *** Laibsch left
[15:45] *** techrush left
[15:46] *** jzellman left
[15:46] <SethRobertson> web gui for git based project management (with issue tracker) using gitolite

[15:46] <diverdude> cbreak: what gitlab is?

[15:46] <diverdude> what SethRobertson said

[15:47] <diverdude> SethRobertson: have you tried it?

[15:47] <cbreak> doesn't sound like I've ever used it.

[15:47] *** aismail_ left
[15:47] <SethRobertson> The concept has promise but really they are missing some key features to make it more useful that gitorious

[15:47] *** beaufour left
[15:47] *** iokill joined
[15:47] *** beaufour joined
[15:48] *** arvind_khadri left
[15:48] *** spiette joined
[15:48] *** ConstantineXVI joined
[15:48] <cmn> it's not as butt-ugly as gitorious, that's a plus

[15:48] *** sureaint joined
[15:49] *** ConstantineXVI left
[15:49] <SethRobertson> Add a real bug tracker, a wiki, real project management, and some useful pre-canned hooks and they might get somewhere.

[15:49] *** surfdue joined
[15:49] *** jjasinski joined
[15:49] *** acrocity joined
[15:49] *** ConstantineXVI joined
[15:50] <FauxFaux> Also, write it in something that isn't Ruby so people can actually deploy it anywhere. </trollolol>

[15:50] *** shurane left
[15:50] *** brian_g left
[15:50] <diverdude> SethRobertson: if i just want to be able to basically browse my sourcecode on the web...is gitolite and gitlab overkill then?

[15:50] *** ConstantineXVI left
[15:50] <SethRobertson> Yes.  Use `man gitweb` or cweb or something like that

[15:50] <gitinfo> the gitweb manpage is available at http://jk.gs/gitweb.html

[15:50] <diverdude> FauxFaux: agreed!

[15:50] *** ConstantineXVI joined
[15:50] <SethRobertson> gitolite is great, but it performs access control and has nothing to do with viewing commits.

[15:51] <diverdude> SethRobertson: does gitolite work with gitweb?

[15:51] *** bjensen joined
[15:51] *** luxurymode left
[15:51] *** beiter left
[15:51] <SethRobertson> They are orthogonal.  Both are great programs but they have nothing to do with each other

[15:51] *** marthinal joined
[15:51] *** airborn joined
[15:52] <zi> If I have a conflict and I've edited the files, then can I add them and add some more/other and both — resolve the conflict and put some updates in one commit?

[15:52] <SethRobertson> diverdude: You might find looking at !best_practices useful

[15:52] <gitinfo> diverdude: There is no one right answer for git best practices, but a consensus from #git is available at https://gist.github.com/1540906

[15:53] *** rockfruit left
[15:53] *** dv310p3r left
[15:54] *** acrocity left
[15:55] *** axl__ joined
[15:55] <sitaram> SethRobertson: (and diverdude) they *are* orthogonal, but see http://sitaramc.github.com/gitolite/confother_.html#gwd (specifying gitweb and daemon access) for what little (very, *very* little) gitolite does to make things easier to specify which repos should be shown by gitweb

[15:56] <sitaram> SethRobertson: though that's a very tenuous connection

[15:56] *** DarkAR joined
[15:56] <sitaram> diverdude: you would *not* install gitolite merely to enable/control gitweb

[15:57] *** TeckniX joined
[15:58] *** ShooterMG joined
[15:59] *** axl_ left
[15:59] <etcetera> why can't you add a submodule to the non-root directory?

[15:59] <SethRobertson> YOu can

[15:59] *** angelsl left
[16:00] *** Heisenmink joined
[16:00] *** n8o-mba left
[16:00] <SethRobertson> You cannot add a submodule to a submodule's directory, though (only the submodule can do that)

[16:00] *** Moult_ joined
[16:01] *** k4v joined
[16:01] <etcetera> <module add https://github.com/grumpydev/TinyIoC.git

[16:01] <etcetera> You need to run this command from the toplevel of the working tree.

[16:01] <etcetera> I have a root dir which contains src and lib, Im' executing that inside lib.

[16:02] *** gusnan left
[16:03] *** sureaint left
[16:03] *** EricInBNE left
[16:04] <SethRobertson> Can you provide the full command?  Did you try running it from the top level and providing the desired path to the submodule?

[16:04] <SethRobertson> git submodule add URL lib/TinyloC

[16:04] <SethRobertson> or whatever

[16:04] *** t4nkd joined
[16:04] *** robde joined
[16:04] *** bauruine left
[16:08] *** t4nkd left
[16:08] *** teweWORK left
[16:08] *** brian_g joined
[16:09] *** senny left
[16:10] *** acl_ joined
[16:10] <Moult_> i'm trying to get gitiolite to run a "cd /foo/bar/ && git pull" every time a repo managed by gitolite receives a push. i've tried adding the bash code to hooks within post-receive of both the common hooks as well as the just the repository's hooks - neither of which have any effect. i have confirmed that the gitolite user _does_ have permissions to execute the command. any ideas?

[16:11] *** jceb left
[16:12] *** Silowyi joined
[16:12] *** papegaaij left
[16:12] <cbreak> Moult_: pulling in a script is a terrible idea

[16:12] <sitaram> unset GIT_DIR

[16:12] <cbreak> merges are interactive

[16:13] *** ehsan joined
[16:13] <Moult_> cbreak: i understand this is a hack, but for the needs it's sufficient (no conflicts should occur that require manual intervention)

[16:13] <sitaram> Moult_: and listen to what cbreak says -- I didn't notice the actual command (reacting to what I saw thought I saw before) but pulling in a scipt is Baaaad!

[16:13] <etcetera> SethRobertson: cd lib/; git submodule add [repo]

[16:14] *** jjido joined
[16:14] <cbreak> Moult_: then instead of merging use reset --hard or similar

[16:14] <cbreak> then no conflict will EVER happen

[16:14] *** dv310p3r joined
[16:14] *** Sitethief left
[16:14] *** dfr|mac joined
[16:14] <Moult_> sitaram: how will unsetting git_dir help?

[16:15] <sitaram> Moult_: if you use lower git_dir it won't, I agree

[16:15] <sitaram> lowercase*

[16:15] *** jameslordhz joined
[16:15] <Moult_> sitaram: sorry, GIT_DIR

[16:15] *** jaequery left
[16:15] *** msponge joined
[16:15] <Moult_> cbreak: ok, understood - thanks for the tip :) will edit the command, but the original question is still relevant

[16:16] <sitaram> Moult_: AFAIK every hook sets it, and when you CD, weird things happen.  I don't look at individual cases until that variable is unset now

[16:16] *** jlebar joined
[16:16] <cmn> yeah, under hooks, GIT_DIR=. which can be very confusing

[16:16] <sitaram> Moult_: if you're worried about *one* variable being magical, use unset `git rev-parse --local-env-vars`

[16:16] *** mikewintermute left
[16:17] <jameslordhz> hi

[16:17] <jameslordhz> what is the difference between git mv dir and mv dir

[16:17] *** beaufour left
[16:17] *** rchavik left
[16:17] <Moult_> sitaram: ok, unset GIT_DIR, still didn't help

[16:17] <sitaram> kill 'em all; show *all* of them who's the boss here

[16:18] *** kaushik_ joined
[16:18] *** beaufour joined
[16:18] <sitaram> Moult_: then it's something else I guess.  Even if it didn't work, I assure you it would be needed so you should not don't regret adding it

[16:18] *** baburdick left
[16:18] *** wagle left
[16:19] *** psoo joined
[16:19] *** cordoval joined
[16:19] *** kenperkins joined
[16:19] <cbreak> jameslord1: one moves things and tells git that the old is gone and the new is there

[16:19] *** zatan left
[16:20] <cbreak> jameslordhz: the other just moves things

[16:20] *** sykop5am left
[16:20] *** zatan joined
[16:20] *** msponge left
[16:21] *** ipalaus_ left
[16:21] <Moult_> i put a touch /foo/bar just to see if the hook was actually being called, but it seems not. any ideas for the next step to debug?

[16:21] *** batlock666 left
[16:22] *** tillMorning left
[16:22] *** Laibsch joined
[16:22] <sitaram> chmod +x?

[16:22] *** techrush- left
[16:23] *** n8o-mba joined
[16:23] *** macRover joined
[16:23] *** papegaaij joined
[16:23] *** t4nkd joined
[16:23] <sitaram> Moult_: on most systems there is no directory called /foo, so "touch /foo/bar" would not be a good indicator of code reaching that point

[16:24] *** dcarper joined
[16:24] <Moult_> sitaram: where /foo/bar is a sane path, it's just easier to type into IRC

[16:24] <sitaram> oh... I thought when I made that crack about lowercase git_dir you're have learned something from it; nvm

[16:24] *** madewokherd joined
[16:24] <sitaram> /tmp/bar is just as easy to type

[16:25] * sitaram is cranky; apologises

[16:25] <Moult_> sitaram: and yes, the hook file does have +x

[16:25] *** wagle joined
[16:25] <cmn> and the hook should run with what you're doing?

[16:25] <sitaram> wrong spelling (of hook file name), wrong location, wrong repo... no idea what else to say, really

[16:25] *** stringoO left
[16:26] *** wagle left
[16:26] <sitaram> yeah that too; wrong expectations of what hook should run at what time

[16:26] *** koo4 left
[16:26] *** Drakonite left
[16:27] *** koo4 joined
[16:27] *** Drakonite joined
[16:27] <Moult_> well, post-receive should...

[16:28] *** slonopotamus joined
[16:28] <danols_work> hi all

[16:28] <danols_work> https://github.com/shaunsephton/django-ckeditor/network

[16:29] <danols_work> i made a commit but had a typo in my readme--- I tried to redo the commit but ended up putting another one in

[16:29] <danols_work> on that image my branch is danols

[16:29] <danols_work> do I do a reset to another commit

[16:29] *** cordoval left
[16:29] <danols_work> then commit again and it will update?

[16:30] <etcetera> anyone on my submodule question?

[16:30] *** Fandekasp joined
[16:31] <jameslordhz> cbreak git mv a b , git add b, git commit;              mv a b , git add b, git commit,    any difference?

[16:31] *** wagle joined
[16:31] *** dorisabayon left
[16:31] *** wagle left
[16:31] *** alvaro_o joined
[16:31] *** desaila joined
[16:32] <cbreak> jameslordhz: git mv also removes a

[16:32] *** nrichards joined
[16:32] *** dreiss joined
[16:33] *** ipalaus_ joined
[16:33] *** zarex joined
[16:33] *** bjensen left
[16:34] <jameslordhz> git mv is more efficiency than mv, i think

[16:34] <jameslordhz> since git mv is more strong than mv, it give more info to git

[16:34] *** wagle joined
[16:34] <jameslordhz> then git would not allocate a new space to store b, just more point change is needed

[16:34] *** alvaro_o left
[16:35] <etcetera> so I created a new repo. mkdir foo; cd foo; git init; mkdir lib; cd lib; git submodule add [repo] -> You need to run this command from the toplevel of the working tree.

[16:35] <etcetera> W-T-F?

[16:35] <etcetera> submodules *must* be in the root?

[16:35] *** yshh left
[16:35] *** f0i left
[16:35] <cmn> etcetera: no

[16:35] <cmn> you must run the /command/ from the top level

[16:35] <cmn> that's what it's saying

[16:35] <cmn> jameslordhz: allocate space?

[16:35] *** jaequery joined
[16:35] <cmn> git will only store it once

[16:35] <etcetera> derpty derp.

[16:36] <danols_work> ohhh god

[16:36] <danols_work> lol I just created a branch

[16:37] *** psoo left
[16:37] <FauxFaux> I can imagine that git-mv doesn't run hash-object again, whereas git add will have to.

[16:37] <FauxFaux> So git-mv will be /hilariously/ faster.

[16:37] *** jjido left
[16:38] <cmn> jameslordhz: also, in your second command, you never tell git to remove a, so you've just copied it, not moved it

[16:38] *** pro_metedor left
[16:39] <cmn> ah, that's a good point about hashing, git mv can skip it

[16:39] *** spaceonline joined
[16:39] <jameslordhz> cmn you can read source code of git, dude

[16:40] <cmn> yes, I can and do so regularly

[16:40] *** ASIRINeiluj left
[16:40] <cmn> though I don't think I've ever looked at mv

[16:40] *** Destos joined
[16:40] <cmn> what was that about?

[16:41] *** johnanderson left
[16:41] *** ziro`_ left
[16:41] *** n8o-mba left
[16:41] *** dnjaramba joined
[16:41] *** johnanderson joined
[16:42] *** zarex left
[16:42] *** zatan_ joined
[16:43] *** mutex joined
[16:43] *** churp joined
[16:43] *** n8o-mba joined
[16:43] *** dreiss left
[16:43] *** gnufied joined
[16:44] *** zatan left
[16:44] *** bjensen joined
[16:45] *** Laibsch left
[16:45] *** slicslak joined
[16:45] *** sweb left
[16:45] *** slonopotamus left
[16:47] *** Laibsch joined
[16:47] *** slonopotamus joined
[16:47] *** brian_g left
[16:49] *** totte joined
[16:49] *** johnathanb left
[16:50] *** ipalaus_ left
[16:51] *** slicslak left
[16:51] *** eamonn joined
[16:51] *** f0i joined
[16:51] *** k4v left
[16:52] *** mklappstuhl left
[16:52] *** slonopotamus left
[16:53] <eamonn> Is there any way to do a git clone and then a git bundle in one move, I basically want to download a bundle from our bitbucket repo as a backup without extracting all the files

[16:53] *** drev1 joined
[16:54] *** toabctl joined
[16:54] *** cakehero left
[16:54] *** sweb joined
[16:54] *** nikuyoshi left
[16:55] <Mikachu> eamonn: --bare?

[16:56] *** flijten left
[16:56] *** brian_g joined
[16:56] *** oriba joined
[16:58] <eamonn> Mikachu: Ill take a look, thanks

[16:58] *** spvensko_ joined
[16:58] *** spvensko_ left
[16:58] *** spvensko_ joined
[16:58] *** spvensko left
[16:58] *** spvensko_ is now known as spvensko

[16:59] <etcetera> cmn: so how do I send the submodule to the subdirectory exactly?

[16:59] *** pidus_ left
[16:59] *** diverdude left
[16:59] *** DarkAR left
[16:59] *** pidus joined
[17:00] *** n8o-mba left
[17:00] <cmn> git submodule add <url> <path> no?

[17:01] *** Heisenmink left
[17:02] *** whitman left
[17:02] *** n8o-mba joined
[17:02] *** h0bbit left
[17:02] *** robotmay left
[17:02] *** LimeBlast left
[17:02] *** Heisenmink joined
[17:02] *** baburdick joined
[17:02] *** toabctl left
[17:03] *** herdingcat left
[17:03] *** papegaaij left
[17:04] *** codatory joined
[17:04] *** codatory left
[17:05] *** overbythere left
[17:05] *** codatory joined
[17:06] *** thannoy left
[17:07] <etcetera> ta.

[17:07] *** timonia left
[17:08] *** eamonn left
[17:08] *** zatan_ left
[17:08] *** Kromack joined
[17:09] <Kromack> Hi people, anybody know how to set the default git username on windows ?

[17:09] <cbreak> git doesn't have a username

[17:09] <cbreak> or do you mean the name that git uses for commits?

[17:09] <cbreak> Kromack: use man git-config

[17:09] <gitinfo> Kromack: the git-config manpage is available at http://jk.gs/git-config.html

[17:11] <Kromack> Thanks

[17:12] *** Kromack left
[17:13] *** kermit joined
[17:13] *** friskd joined
[17:13] *** dfr|mac left
[17:14] *** kenichi joined
[17:14] *** Fandekasp left
[17:15] *** johnathanb joined
[17:15] *** Araxia_ joined
[17:15] *** Laibsch left
[17:16] *** Vile1 joined
[17:16] *** Vile left
[17:17] *** guampa joined
[17:18] *** robde left
[17:18] *** soulcake left
[17:19] *** johnathanb left
[17:19] *** nicoulaj left
[17:20] *** brainbox1100 left
[17:20] *** lonewulftp left
[17:21] *** lonewulftp joined
[17:21] *** gusnan joined
[17:22] *** Borbie joined
[17:22] *** kaushik_ left
[17:22] *** HolySinner_ joined
[17:22] *** HolySinner_ left
[17:22] *** segher left
[17:23] *** Borbie left
[17:23] *** HolySinner joined
[17:24] *** HolySinner left
[17:24] *** hxts joined
[17:24] *** baburdick left
[17:24] *** macmartine joined
[17:24] *** HolySinner joined
[17:24] *** HolySinner left
[17:25] *** harshpb left
[17:25] *** HolySinner joined
[17:25] *** harshpb joined
[17:25] *** baburdick joined
[17:26] *** beaufour left
[17:27] *** dreiss joined
[17:27] *** maletor joined
[17:28] *** ramsey left
[17:29] *** tomislater left
[17:29] *** Laibsch joined
[17:29] *** Cromulent left
[17:30] *** HolySinner left
[17:30] *** HolySinner joined
[17:30] *** HolySinner left
[17:31] *** gebi left
[17:32] *** albel727 joined
[17:33] *** ziro`_ joined
[17:33] *** Laibsch left
[17:35] *** maletor left
[17:35] *** marthinal left
[17:36] *** mishok13 left
[17:36] *** tystr joined
[17:37] *** f0i left
[17:37] *** marthinal joined
[17:38] *** segher joined
[17:39] *** macRover left
[17:40] *** harshpb left
[17:40] *** harshpb joined
[17:41] *** slicslak joined
[17:41] *** palam joined
[17:42] *** ziro`_ left
[17:42] *** Rogi left
[17:43] *** imaginativeone joined
[17:43] *** iocor left
[17:43] *** palam left
[17:43] *** iocor joined
[17:44] *** imaginativeone left
[17:45] *** palam joined
[17:45] *** giallu left
[17:46] *** ldlework joined
[17:48] *** ScottE joined
[17:48] *** Targen joined
[17:48] *** MistuhKurtz joined
[17:50] *** aro left
[17:50] *** msponge joined
[17:50] *** gitinfo sets mode: +v palam

[17:50] *** msponge left
[17:52] *** brngardner joined
[17:52] <palam> i've got from branch a -> b, and in a separate branch, gone from a -> b1 -> c1. now i want the commit to be like this: a -> b -> b1 -> c1. a rebase will work, but that won't preserve the branching from b1, c1 etc. is there a way to use a --no-ff on rebase?

[17:52] <ldlework> When I do git branch -rd origin/branchname, and then do git fetch, the branch comes back!

[17:52] <ldlework> sup with that?

[17:52] *** f0i joined
[17:54] <palam> i guess the convention is a->b and a->c->d and i now want it to read a->b->c->d

[17:54] *** sweb left
[17:54] <cmn> ldlework: the fetch will create it because the default refspec will match

[17:54] *** baburdick left
[17:55] <ldlework> cmn, can you say that a different way?

[17:55] <Rhonda> palam: c and d can't stay the same if you want to have b in between, because the parent will change.

[17:55] *** totte left
[17:55] *** ircguy joined
[17:55] *** cylence joined
[17:55] <Rhonda> palam: So the convention is rather a->b->c'->d'

[17:55] *** ircguy left
[17:56] <cmn> ldlework: when you run git fetch (unless you've changed the refspec), you're asking git to grab the current state of the branches in the remote

[17:56] <cmn> so if branchname exists on origin, it'll get recreated

[17:56] <palam> Rhonda: right, that's fine too, but what i want is for branching history to be preserved for c' and d'

[17:56] *** brainbox1100 joined
[17:56] <ldlework> cmn, doesn't git branch -rd branchname delete branchname on origin?

[17:56] *** john2496 joined
[17:56] *** shruggar left
[17:56] *** harshpb left
[17:56] <cmn> no

[17:56] *** jjido joined
[17:57] *** baburdick joined
[17:57] *** harshpb joined
[17:57] <cmn> only fetch and push can affect remote repos

[17:57] *** neataroni joined
[17:57] <Rhonda> palam: That's exactly what can't work.  Either you want to preserve history, then you can't get b in, or you want to have b in, then you change history.

[17:57] *** jjido left
[17:57] <cmn> if you want to preserve branching, then a merge might be what you need

[17:58] <ldlework> cmn, so git branch -rd deletes your local "intermediary" branch?

[17:58] <ldlework> That secret branch that tracts the remote?

[17:58] <cmn> it deletes the remote tracking branch

[17:58] *** ajt left
[17:58] <Rhonda> palam: merge and you keep the proper history.  rebase changes history.

[17:58] <cmn> it's not a secret branch, it's called origin/branch

[17:58] *** jjido joined
[17:58] <cmn> that's a copy/cache of what's in the remote when you run fetch

[17:58] *** ajt joined
[17:58] <ldlework> cmn, local cache, makes sense

[17:59] <ldlework> it has no HEAD right?

[17:59] <palam> Rhonda, cmn: i don't mind changing history. i still don't understand why can't preserve the branching though

[17:59] <cmn> merge, that way you preserve branching and you join both dev histories

[17:59] <cmn> which looks like what you want

[18:00] <Rhonda> palam: No clue what you mean with preserve branching.  The branching will be moved to b though instead of having happened from a.

[18:00] *** n8o-mba left
[18:00] <cmn> the a->b->c->d that you're proposing linearises the history, so you're destroying history

[18:00] <ldlework> cmn, so when you pull what you're really doing is updating your local cache of the remote, and then performing a local merge operation.

[18:00] <mugwump> yeah rebase can't rebase non-linear history

[18:00] <cmn> yes

[18:00] *** jas4711 joined
[18:00] <neataroni> i deleted a repo on github, and i want to push changes to a new repo that i just made, but it keeps trying to push to the old repo, how do i tell it to push to the new repo?

[18:00] *** Heimidal joined
[18:00] *** sureaint joined
[18:00] <palam> oh crap

[18:00] *** spvensko left
[18:00] <cmn> neataroni: git remote set-url

[18:00] <cbreak> neataroni: by tellint it to push to the new repo...

[18:00] <ldlework> cmn, when you push, does it do a local merge with the tracker and then ship the new state of the cache?

[18:00] *** brngardner left
[18:01] <cbreak> git push destination branch

[18:01] *** watsonian joined
[18:01] <cmn> ldlework: when you push, it takes the local branches and tells the remote to update to them

[18:01] <mugwump> palam, you can do it with filter-branch, but normally if the answer is git filter-branch you've asked the wrong question

[18:01] <cmn> it doesn't merge anything

[18:01] *** MANCHUCK joined
[18:01] <cmn> the remote-tracking branches only get updated if the push was successful

[18:02] <ldlework> cmn, so the changes from your *actual* local branch are sent to the remote directly?

[18:02] *** thorbjornDX joined
[18:02] *** crisp joined
[18:02] <cmn> yes

[18:02] <cmn> unless you work hard at telling git to do otherwise

[18:02] <ldlework> cmn, I was gonna ask what if you merge in changes to your local trackers.

[18:02] <cmn> you don't

[18:02] <cmn> you merge in your local branches

[18:02] <cbreak> ldlework: don't mess with tracking branches. they are read only.

[18:02] <ldlework> cmn, thanks for answering my questions.

[18:03] <ldlework> cbreak, k, thanks.

[18:03] *** apok joined
[18:03] <mugwump> read the intro on man git-push carefully

[18:03] <gitinfo> the git-push manpage is available at http://jk.gs/git-push.html

[18:03] <palam> ok, so here's the situation. i have in B1 a->b, B2 a->c->d, and B3, b->e->f; ideally, i want a->b->c'->d'->e'->f', while preserving the non-linear history. i'm guessing that's not possible with rebase? is merge my answer?

[18:03] <mugwump> it tells you how this works

[18:03] *** achadwick left
[18:03] <mugwump> and to start with, use git push remotename somebranch:somebranch

[18:03] *** Element9_work left
[18:04] <neataroni> cmn: what is the url i put? full url like https://... or just username/repo_name

[18:04] *** ericmuyser joined
[18:04] *** jstout24 joined
[18:04] <cmn> you put the URL

[18:04] <cmn> unless you've defined aliases

[18:04] <mugwump> palam: that's not non-linear

[18:04] <cmn> github isn't the only place where you can put git repos

[18:04] *** slicslak left
[18:04] <mugwump> you can just cherry pick e and f onto c

[18:05] *** metcalfc joined
[18:05] <mugwump> er, d

[18:05] <neataroni> cmn: oh, duh

[18:05] <palam> mugwump: i haven't put that in, but i do have branches from c and d etc

[18:05] <neataroni> cmn: thanks

[18:05] <mugwump> oh, wait, I misread

[18:05] <palam> mugwump: i've merged those back with --no-ff

[18:05] <cmn> you /can/ define an alias such that gh:user/repo will work, but that's a local thing

[18:05] <mugwump> yeah, --no-ff is rarely what you want

[18:06] <neataroni> cmn: how do i see which urls i have there currently?

[18:06] <cmn> git remote -v

[18:06] <palam> mugwump: why not? i wanted to preserve the branching history

[18:06] *** thiago left
[18:06] *** _iron joined
[18:06] <mugwump> but --no-ff preserves useless merging history

[18:06] <mugwump> nothing to do with branching

[18:07] <mugwump> instead of a simple fastforward you make a commit with two parents and no new content

[18:07] *** ericmuyser left
[18:07] <mugwump> that's like svn.  or arch.

[18:07] *** empity left
[18:07] *** ryanmahoski joined
[18:07] *** thiago joined
[18:07] <cmn> it can be useful to preserve the fact that a couple of commits came from a different branch

[18:07] <palam> well, that's another discussion... any chance i can preserve that in my scenario?

[18:07] <neataroni> how do i destroy a local repo?

[18:07] *** Raging_Hog joined
[18:08] <cmn> rm -rf .

[18:08] <cmn> it's just a bunch of files and dirs

[18:08] <bremner> use a hammer?

[18:08] <mugwump> ah, #git, full of useful help

[18:08] <cmn> or a large magnet

[18:08] <neataroni> cmn: uh oh

[18:08] <neataroni> cmn: forgot i didnt have a backup somewhere

[18:08] <mugwump> palam: why don't you start with your B1 and cherry pick c, d, e and f to it

[18:08] <neataroni> cmn: oh god no :(

[18:09] *** totte joined
[18:09] <mugwump> if you need to note something about what branch they were created on, consider improving the commit messages as you cherry pick to include the extra information

[18:09] *** sako joined
[18:10] <cmn> neataroni: if you've no copy at all, maybe you can ask github to see if they've backed up your repo under the old name

[18:10] *** ThePeach left
[18:10] *** btanaka joined
[18:10] <neataroni> cmn: yea. well it wasnt anything huge, and it was kind of ugly anyway :)

[18:11] *** slicslak joined
[18:12] *** alester joined
[18:12] <cmn> a --no-ff merge gets shown as a different branch so you can get a better overview if e.g. the master branch is mostly merge commits

[18:12] *** Makoryu joined
[18:12] <palam> alright, thanks mugwump, cmn, Rhonda

[18:12] *** Chillance joined
[18:12] *** gebi joined
[18:14] *** jjido left
[18:15] *** Behi joined
[18:15] *** delight left
[18:15] <mugwump> palam, often the topic branch name is important enough to consider putting right at the start of the commit message, like somefeature: start to implement X

[18:16] <palam> mugwump: that's a workaround, but no-ff sounds a lot cleaner to me, and doesn't loose any history

[18:16] *** ramsey joined
[18:16] <palam> i don't care that much about the empty commit

[18:17] <palam> mugwump: thanks though, for the options

[18:17] <mugwump> it's more of a convention than a workaround

[18:17] <palam> right

[18:17] <mugwump> but there's many ways to skin a cat

[18:17] *** patrick99e99 joined
[18:17] <patrick99e99> hi git homies

[18:17] <patrick99e99> I just tried to remove some submodules

[18:17] *** cakehero joined
[18:17] *** beaufour joined
[18:17] <patrick99e99> so I went into .gitmodules and deleted the text in there

[18:18] *** banghouse joined
[18:18] <patrick99e99> then I went into .git/config and removed them also

[18:18] <patrick99e99> deleted the files

[18:18] *** tsujiban is now known as tsujiban-c

[18:18] <patrick99e99> and then when I try to add a new submodule it says No submodule mapping found in .gitmodules for path 'bundle/command-t'

[18:18] <patrick99e99> how do I tell it to forget about that?

[18:18] <cmn> you should have used git submodule rm, I'm guessing

[18:19] *** kennethreitz joined
[18:19] <cmn> wait, nobody's written that yet?

[18:19] <m1sc> cmn: no, it actually has to be done by hand

[18:19] <cmn> that's bollocks

[18:20] <m1sc> cmn: cant remember - maybe there's some reasoning on the ml

[18:20] <mugwump> cmn: write it!

[18:20] *** soulcake joined
[18:20] <cmn> I guess I'll have to now

[18:21] <mugwump> patrick99e99: try git rm -f bundle/command-t to remove it from the index

[18:21] *** tsujiban-c left
[18:21] *** f0i left
[18:21] <totte> I've got a bunch of vim plugins as submodules to my configurations repository and cloned it to a server I work on. The .gitmodules file is there, but how do I know if the submodules are, like, active?

[18:22] *** GunArm joined
[18:22] *** PigeonFriend left
[18:22] *** robotmay joined
[18:22] <totte> Do they automatically update whenever I do git pull in the top directory?

[18:23] *** thiago left
[18:23] <banghouse> i dont understand the diff and reason why one would make a bare/non-bare repo

[18:23] <banghouse> bare vs non-bare

[18:24] *** h0bbit joined
[18:24] <Makoryu> banghouse: Isn't a bare repository just one with no working tree

[18:24] *** thiago joined
[18:24] <cmn> yes

[18:24] *** padams left
[18:24] <Makoryu> It's the kind of thing you'd put on a server, since there's never a reason to checkout the files

[18:24] <cmn> bare repos are what you use to sync

[18:25] <cmn> non-bare repos are what you use to hack

[18:25] *** baburdick left
[18:25] *** phishy joined
[18:26] <Makoryu> I have a small server with two repos

[18:26] *** baburdick joined
[18:26] <mugwump> banghouse: it's largely historical, nobody's implemented sane semantics for pushing to non-bare repositories for git and now it's common sense that it's Wrong™ (not just unimplemented)

[18:26] *** dorkmafia joined
[18:26] <Makoryu> The one for my dotfiles is bare, since I never check it out on the server (have to use a different setup there)

[18:27] <bremner> plus it makes hg people crazy, that is an important feature

[18:27] <Makoryu> The other is nonbare because I uh use it for content deployment even though that's clearly evil

[18:28] <mugwump> bremner++

[18:28] *** Xeross joined
[18:28] *** iamjarvo joined
[18:28] *** cylence left
[18:28] <banghouse> hg people?

[18:28] <Makoryu> banghouse: Mercurial users

[18:28] *** cylence joined
[18:28] <banghouse> kk

[18:29] <mugwump> also bzr and arch work like this.  the server is just another checkout

[18:29] <Makoryu> (Mercurial being the main competitor of Git, in case anyone needs to ask)

[18:29] *** cworth joined
[18:29] <iamjarvo> whats a good visual tool for git diff

[18:30] *** swombat_ left
[18:30] *** scelis left
[18:31] <bremner> kdiff3?

[18:31] <mugwump> iamjarvo: I like git gui

[18:31] <banghouse> http://www.sourcetreeapp.com/

[18:31] *** thiago left
[18:31] *** harshpb left
[18:31] *** Xeross left
[18:32] *** soulcake left
[18:32] *** harshpb joined
[18:32] <banghouse> so am I right to conclude that my repos should be bare?

[18:32] *** slicslak left
[18:32] <mugwump> for a server, sure

[18:33] *** soulcake joined
[18:33] <iamjarvo> thanks guys. i will give source tree a try

[18:33] *** soulcake left
[18:33] *** kermit left
[18:33] <cmn> unless you're going to be editing the files, it's probably best if it's bare

[18:33] <banghouse> kk

[18:33] *** Rogi joined
[18:33] *** kermit joined
[18:34] <banghouse> hmm

[18:34] *** thiago joined
[18:34] <banghouse> "editing the files" - which files do you mean?

[18:34] *** slicslak joined
[18:35] <cmn> the ones you're tracking

[18:35] <mugwump> like, on the server

[18:35] <banghouse> well yes I'l be editing them

[18:35] <Makoryu> banghouse: Checking out the files on the server and editing them on the server

[18:35] <cmn> but not on the server

[18:35] <banghouse> no checking them out locally

[18:35] <cmn> right, so that repo won't be bare

[18:35] <cmn> but the one you use to sync branches should be

[18:36] <banghouse> ok so I create the bare repo on the server and non bare repos on local machines

[18:36] <Makoryu> banghouse: Exactly

[18:36] <banghouse> if Im doing git clone of the bare repo how to tell git to make it non-bare locally?

[18:37] <patrick99e99> uhhhh.. ok so I just tried to add a submodule and I get "the following path is ignored by one of yoru gitignore files"... but my gitignore file is empty

[18:37] <cmn> clones are non-bare by default

[18:37] <banghouse> got it cmn

[18:37] <banghouse> thanks a million all

[18:37] <cmn> patrick99e99: all of them?

[18:37] <Makoryu> patrick99e99: Did you also check .git/info/exclude?

[18:37] <patrick99e99> cmn: I thought I only had one?

[18:38] *** t4nkd left
[18:38] <patrick99e99> exclude is empty

[18:38] <banghouse> does this channel have a bot that tracks ++?

[18:38] *** codeshah joined
[18:38] <cmn> you can have one per dir

[18:38] <cmn> banghouse: no, but if you ask nicely, jast might hack that in

[18:38] *** bauruine joined
[18:38] *** kermit left
[18:39] <banghouse> well I just wanted to give you guys credit for helping me

[18:39] *** AmirBehzad joined
[18:39] <cmn> so you need to check .gitingore dir/.gitignore dir/sub/.gitignore

[18:39] *** dv310p3r left
[18:39] *** flip_digits joined
[18:39] <patrick99e99> cmn: what is "dir" ?

[18:39] <banghouse> folder

[18:39] <banghouse> directory

[18:39] <cmn> short for directory

[18:39] <patrick99e99> right..

[18:39] <patrick99e99> but... ? what directory

[18:40] <Makoryu> patrick99e99: Any of them in the repo

[18:40] *** f0i joined
[18:40] <cmn> the ones leading to whatever file git's complaining about

[18:40] *** eagles0513875 joined
[18:40] *** eagles0513875 left
[18:40] *** eagles0513875 joined
[18:40] *** eagles0513875 left
[18:40] *** eagles0513875 joined
[18:40] *** harshpb left
[18:41] *** harshpb joined
[18:41] <patrick99e99> I just looked through them all.. no gitignore files

[18:42] *** shruggar joined
[18:42] <Makoryu> How about your home folder

[18:42] *** eagles0513875 left
[18:43] *** Heimidal left
[18:43] *** v0n joined
[18:43] *** marthinal left
[18:43] <mugwump> patrick99e99: can you see the file with git ls-files -i?

[18:43] *** harshpb left
[18:44] <mugwump> and what about if you add --exclude-standard?

[18:44] *** AmirBehzad left
[18:44] *** Heimidal joined
[18:44] *** Heimidal left
[18:44] *** psakrii left
[18:44] *** harshpb joined
[18:44] <patrick99e99> mugwump: nope...

[18:44] *** Heimidal joined
[18:44] <cmn> you can have a config variables that specifies a global gitignore file, but I can't remember what it is

[18:44] <patrick99e99> I didnt do anything crazy w/ this repo.. just a regular git init....

[18:45] <patrick99e99> im just going to blow up the repo and reclone and start over

[18:45] <mugwump> so, you didn't use git update-index --assume-unchanged on it

[18:45] <mugwump> sounds odd

[18:45] *** Carmivore left
[18:45] <cmn> that config variable can be in your global config, so recloning won't do anything

[18:45] *** ryanmahoski left
[18:46] *** eagles0513875 joined
[18:46] *** bugo joined
[18:46] *** shruggar left
[18:46] *** AmirBehzad joined
[18:46] *** AmirBehzad left
[18:46] <bugo> what is the recomended git book? I need info about git-hooks

[18:46] <cmn> !book

[18:46] <gitinfo> 'Pro Git' is a complete book about git that is available online for free (there's a print version, too): http://progit.org/book/

[18:46] <cmn> man githooks

[18:46] <gitinfo> the githooks manpage is available at http://jk.gs/githooks.html

[18:47] *** dreiss left
[18:47] <cmn> there's also book.git-scm.com I believe

[18:47] *** shruggar joined
[18:47] <bugo> thank you guys!

[18:47] *** psakrii joined
[18:49] *** kahrl joined
[18:49] *** kerrick joined
[18:49] *** Carmivore joined
[18:49] <FauxFaux> Is there .mailmap support for fast-import, or something that does roughly the same thing?  None of the tools in fast-export.git seem to support mailmapping, so I'm guessing there's some standard way I'm missing?  hg-fast-export supports continual importing, so I doubt they're expecting the use of filter-branch?

[18:50] *** sureaint left
[18:50] *** khmarbaise joined
[18:50] *** sureaint joined
[18:50] *** koo4 left
[18:51] *** icwiener joined
[18:51] *** jceb_ joined
[18:52] *** whitman joined
[18:52] *** kahrl_ left
[18:52] *** jameslord joined
[18:53] *** shruggar left
[18:54] *** shruggar joined
[18:54] *** detaer joined
[18:54] *** jameslord1 left
[18:55] *** kerrick left
[18:56] *** baburdick left
[18:56] *** baburdick joined
[18:56] *** bugo left
[18:57] *** dv310p3r joined
[18:58] *** Spockz` joined
[18:58] *** luxurymode joined
[18:58] *** gavin_huang left
[18:59] *** aspotashev joined
[19:00] *** Malachite joined
[19:01] *** Malachite left
[19:01] *** pantsman joined
[19:01] *** pantsman left
[19:01] *** pantsman joined
[19:01] *** bjensen left
[19:03] *** dv310p3r left
[19:04] * FauxFaux notes that git ls-files somebranch -- somepath # entirely ignores "somebranch".

[19:05] *** t4nkd joined
[19:05] <mugwump> right, it should probably throw an error for that incorrect usage

[19:05] <ericm_> there's a git command that brings you into a console where you can see staged files, add staged files, remove them. etc. is basic but i find goes unnoticed. i forget it... idea?

[19:05] <cmn> add --interactive, probably

[19:05] <mugwump> ericm_: git gui

[19:05] <mugwump> aka git citool

[19:05] <ericm_> sorry remembered

[19:06] <ericm_> git add -i >.<

[19:06] <cmn> not really a "console" but more useful

[19:06] *** t4nkd left
[19:06] *** OOPMan joined
[19:06] <jast> well, technically that's correct behaviour. somebranch is taken as a file that's not in the working tree nor the index, so it's ignored.

[19:06] *** harshpb left
[19:06] *** axrfnu joined
[19:06] <mugwump> jast: point

[19:06] <jast> (@ FauxFaux)

[19:07] <cmn> so '--' is also taken as a non-existant file?

[19:07] *** ipalaus_ joined
[19:07] <jast> no, -- is a classic switch to signal "no more switches after this point"

[19:07] <FauxFaux> No, the manual explicitly says that -- is supported.

[19:07] <Makoryu> cmn: More like... "--" separates the option list from the file list

[19:07] <jast> in git it doubles as "no more refs after this point"

[19:07] <FauxFaux> In everything else, like checkout, it.. yeah, that.

[19:07] <Makoryu> cmn: So if you write "git add -- --" you'll add a file named "--"

[19:08] <cmn> yes, but if you have 'something -- someotherthing'

[19:08] <Makoryu> Then "something" is a ref and "someotherthing" is a filename

[19:08] <cmn> that 'something' should become a switch, or everything should become files

[19:08] <FauxFaux> Makoryu: Except in ls-files. :)

[19:08] <Makoryu> Whoops

[19:08] <cmn> but ls-files doesn't take branches

[19:08] <kevlarman> i wonder how git add -- -i is interpreted

[19:08] *** shurane joined
[19:08] *** Goplat joined
[19:08] <kevlarman> (if a ref named -i exists)

[19:08] <FauxFaux> kevlarman: It'll add a file named -i.

[19:08] <jast> presumably ls-files should reject non-option arguments before -- (if there is a '--')

[19:08] <cmn> add doesn't care about refs

[19:08] <Makoryu> Heh, can you have hyphens in ref names?

[19:09] <kevlarman> Makoryu: why not?

[19:09] *** GospeL joined
[19:09] <cmn> yes

[19:09] *** tblamer joined
[19:09] <cmn> some-feature

[19:09] <jast> 'git branch' and friends no longer allow creating branch names that start with hyphens

[19:09] *** sureaint left
[19:09] <FauxFaux> No colons, unfortunately. ¬_¬

[19:09] <jast> but other than that they're fair game

[19:09] <kevlarman> ok git add is a bad example

[19:09] <kevlarman> FauxFaux: git show ref:file

[19:09] <Makoryu> Ah, yeah, medial hyphens

[19:09] <Makoryu> No reason to prohibit those

[19:09] *** _inc joined
[19:09] <FauxFaux> kevlarman: I was thinking of git push a:b:c.

[19:09] <kevlarman> FauxFaux: that too

[19:09] <jast> and technically you can still create refs that start with dashes

[19:10] <cmn> use a different UTF-8 code for them?

[19:10] *** OOPMan left
[19:10] *** dnjaramba left
[19:10] *** gnufied left
[19:10] *** xxiao joined
[19:10] <jast> not necesary

[19:10] <jast> you can simply use low-level tools like update-ref

[19:10] *** empity joined
[19:11] <kevlarman> jast: or just write to .git/refs/, right?

[19:11] <jast> sure :)

[19:11] *** mandric joined
[19:11] *** lacrymology joined
[19:11] <cmn> update-ref complains

[19:12] *** babilen left
[19:12] <jast> not to me

[19:12] *** Cromulent joined
[19:12] <cmn> interesting, what magic do you use?

[19:12] *** JordiGH joined
[19:12] <JordiGH> How do you know which commit is checked out?

[19:12] <xxiao> i'm on branch foo, and want to rebase my foo based on a new remote branch, say, xyz

[19:12] <jast> git update-ref refs/heads/-foo abcd123

[19:13] <jast> JordiGH: commit or branch?

[19:13] <cmn> I just thought of that, yep works

[19:13] *** Cromulent left
[19:13] <xxiao> git checkout foo && git rebase xyz && git mergetool -t meld

[19:13] <JordiGH> Commit.

[19:13] <jast> JordiGH: git rev-parse HEAD

[19:13] <cmn> rev-parse HEAD will tell you

[19:13] <xxiao> i saw 3 windows from meld, the left is local, the right is remote, the middle

[19:13] *** Cromulent joined
[19:14] <jast> JordiGH: or "git show" if you want the commit message, too, etc.

[19:14] <xxiao> does local --> foo, remote -->xyz? and i need make the middle one correct to commit which is to update foo?

[19:14] *** h0bbit left
[19:15] *** eagles0513875 left
[19:16] *** queequeg1 joined
[19:16] *** maletor joined
[19:17] *** bgerber left
[19:17] *** eagles0513875 joined
[19:18] *** empity left
[19:18] *** monokrome left
[19:18] *** Goplat left
[19:18] *** bgerber joined
[19:20] *** Targen left
[19:20] *** GospeL left
[19:20] *** Prateek joined
[19:20] *** Prateek is now known as Guest39816

[19:21] *** palam left
[19:21] *** Guest39816 left
[19:21] *** GospeL joined
[19:22] *** flip_digits left
[19:22] *** muzone joined
[19:23] *** kerrick joined
[19:23] *** cccaldas_ joined
[19:23] *** muzone left
[19:23] *** muzone joined
[19:23] *** FabTG left
[19:23] *** kerrick left
[19:24] <muzone> I cloned my friend's repo a while back. I haven't made any changes to it whatsoever. But when I did a git pull just now, I got this:

[19:24] <muzone> CONFLICT (rename/rename): Rename "db/migrate/20110228084940_add_reply_to_to_posts.rb"->"db/migrate/20110228084940_add_reply_to_to_forem_posts.rb" in branch "HEAD" rename "db/migrate/20110228084940_add_reply_to_to_posts.rb"->"spec/dummy/db/migrate/20110625220408_add_reply_to_to_forem_posts.rb" in "471d1585bd37abaae557819b948a33b1599aad48"

[19:24] <muzone> Automatic merge failed; fix conflicts and then commit the result.

[19:24] <muzone> What's up with that? And is the only way to fix this to delete the repo and reclone it?

[19:24] *** kerrick joined
[19:24] <muzone> I experience this quite often with other repos as well.

[19:24] <muzone> Whom I haven't touched either.

[19:25] *** FabTG joined
[19:25] <xxiao> git checkout foo; git rebase xyz; git mergetool -t meld; in meld 3 windown UI, it appears LOCAL=xyz, REMOTE=foo, fully unintuitive!

[19:26] *** pidus left
[19:26] *** Laibsch joined
[19:26] *** OOPMan joined
[19:26] <xxiao> i would assume LOCAL=foo instead, gosh, i messied up

[19:26] *** Fidelix_ joined
[19:26] *** baburdick left
[19:26] *** khmarbaise left
[19:26] *** baburdick joined
[19:27] *** cccaldas left
[19:27] <jast> muzone: this can happen when the other guy rewrites his history

[19:27] <jast> people shouldn't normally do it

[19:27] <cbreak> muzone: there's a conflict in the history, just resolve it

[19:27] *** Fidelix_ left
[19:27] <cbreak> or throw away your history and reset --hard to the new

[19:27] *** Anxi80 left
[19:27] *** Fidelix joined
[19:28] <Fidelix> Hello. I already have a git cloned repository I got from a friend. How can I make a git repository out of that, so other people in my team are able to work on it?

[19:28] <cbreak> it is a git repository

[19:28] <muzone> cbreak: ah i see..

[19:28] <muzone> wait

[19:28] <muzone> actually i didnt just run git pull

[19:28] <cbreak> Fidelix: just make a bare clone if you want a bare one

[19:28] <muzone> i ran git reset --hard && git clean -dfx && git pull

[19:29] <cbreak> muzone: that's no difference.

[19:29] <Fidelix> cbreak, what would be a bare clone? I wanted that git directory with the "hooks, objects, etc." folders

[19:29] *** GospeL is now known as prateekagr

[19:29] <cbreak> Fidelix: git clone your repository, see man git-clone

[19:29] <gitinfo> Fidelix: the git-clone manpage is available at http://jk.gs/git-clone.html

[19:29] <Fidelix> So that I can use it with gitolite

[19:30] <cbreak> you can already use it with gitolite

[19:30] <JordiGH> How do you fast-forward a branch? I think this is what I want.

[19:30] <JordiGH> Your branch is behind 'origin/master' by 782 commits, and can be fast-forwarded.

[19:30] <muzone> ah ok

[19:30] *** astrostl left
[19:30] <jast> muzone: after fetching, git reset --hard origin/master to throw away everything on your side and use the remote stuff

[19:30] <cbreak> JordiGH: it's done with git merge

[19:30] <Makoryu> Fidelix: The folder with the hooks and objects and stuff is the .git folder inside the working directory

[19:31] <Fidelix> cbreak, I'm not sure how, since ithe folder seems the one you get when you git clone [email@hidden.address]
[19:31] * JordiGH still finds it weird that git calls it a merge even when there is no merge, but whatever, just another fucking git wart.

[19:31] <muzone> jast: interesting

[19:31] <Fidelix> Makoryu, oh, that makes sense.

[19:31] *** Cromulent left
[19:31] *** shruggar left
[19:32] <Fidelix> Makoryu, I can move just this .git folder to the gitolite repositories folder so that it works like the other ones, right?

[19:32] <muzone> jast: so in https://gist.github.com/1590691 i should first do a git fetch?

[19:32] <cbreak> Fidelix: doesn't matter

[19:32] *** dreiss joined
[19:32] <cbreak> Fidelix: a git repository is a git repository

[19:32] <muzone> (thats the script i use to automatically pull all my friend's git repos)

[19:32] <cbreak> Fidelix: make a new repo with gitolite and push to it

[19:32] <JordiGH> Huh, why is checking out origin/master a detached HEAD? I am on a branch, aren't I? Oh, bother, I thought I knew what a detached HEAD is.

[19:32] <Fidelix> cbreak, this makes sense. I know what I need to do now, thanks!

[19:33] *** spearce joined
[19:33] <cbreak> JordiGH: only checking out a local branch will switch to a branch

[19:33] <cbreak> any other ref will detach HEAD

[19:33] *** Spockz` left
[19:33] * xxiao needs a 32" LCD to run merge

[19:33] <cbreak> remote tracking branches are NOT local branches

[19:33] *** spvensko joined
[19:33] *** spvensko left
[19:33] *** spvensko joined
[19:33] <xxiao> cbreak: i think when you git checkout -t remotes/foo then you have a local branch

[19:34] <JordiGH> cbreak: Wtf does that mean? I thought a detached HEAD was when the HEAD ref was on a commit that didn't have branch-ref on it... so are the remote branches not branch-refs?

[19:34] <xxiao> cbreak: which has the name of foo, it's a local branch, though it tracks remote branch

[19:34] <muzone> cbreak: theres no way to automatically resolve those history conflicts? (for https://gist.github.com/1590691)

[19:34] <xxiao> you can still add stuff to it, commit it, might be able to push it too

[19:34] <cbreak> xxiao: that will create a local branch, yes.

[19:34] <xxiao> cbreak: so why do you say tracking branch is not local?

[19:34] <JordiGH> Why does git make such a fuss about distinguishing where branches come from?

[19:34] <cbreak> JordiGH: only local branches are real branches

[19:35] <cbreak> the others are just refs you can not change

[19:35] <JordiGH> What's a fake branch? I thought branches were just refs.

[19:35] <kevlarman> JordiGH: git checkout master;git checkout HEAD@{0}, you're now on a detached HEAD even though the commit has a branch pointing to it

[19:35] <JordiGH> Oh, a fake branch is an immutable ref?

[19:35] <xxiao> JordiGH: i can use git to add lots of remote gits from different places at the same time and jump around between them, it's fun

[19:35] <cbreak> muzone: git can not automatically resolve any conflicts.

[19:35] <JordiGH> kevlarman: I don't use gdb as much as I should, so I don't understand Linus's notation for arrays. Does HEAD@{0} mean one commit before head?

[19:35] <cbreak> they are called conflict because they can not be automatically resolved

[19:36] <kevlarman> JordiGH: nope

[19:36] <MANCHUCK> how do i export a branch from git ?

[19:36] <xxiao> git export?

[19:36] <muzone> cbreak: but if i dont care about whats on my side

[19:36] <muzone> cbreak: i.e. i just want HIS latest repo

[19:36] <muzone> for safe keeping

[19:36] <kevlarman> JordiGH: it's the same commit

[19:36] *** FabTG left
[19:36] <cbreak> muzone: git reset --hard to it, as I said before.

[19:36] <muzone> but i already did that!

[19:36] <JordiGH> A detached HEAD means committing there is gonna produce a commit that has no ref to it other than HEAD, right?

[19:36] <muzone> please see https://gist.github.com/1590691

[19:37] <cbreak> muzone: then there's no conflict

[19:37] <cbreak> and you're done

[19:37] <kevlarman> JordiGH: well, also reflog

[19:37] <kevlarman> but yes

[19:37] <muzone> yes im getting:

[19:37] <muzone> CONFLICT (rename/rename): Rename "db/migrate/20110228084940_add_reply_to_to_posts.rb"->"db/migrate/20110228084940_add_reply_to_to_forem_posts.rb" in branch

[19:37] <muzone> "HEAD" rename "db/migrate/20110228084940_add_reply_to_to_posts.rb"->"spec/dummy/db/migrate/20110625220408_add_reply_to_to_forem_posts.rb" in "471d1585bd37abaae557819b948a33b1599aad48"

[19:37] <muzone> Automatic merge failed; fix conflicts and then commit the result.

[19:37] <cbreak> muzone: then do what I told you

[19:37] <xxiao> again, anyone got confused by mergetool, where LOCAL means remote, and REMOTE means a local existing branch?

[19:37] <JordiGH> Okay... so what determines if a HEAD is detached or not...

[19:37] <cbreak> and use git reset --hard to reset to the new branch

[19:37] <JordiGH> Wait, I think I get it.

[19:37] <muzone> cbreak: im telling you im already using git reset --hard

[19:37] <xxiao> some git command is pushing people insane

[19:37] <muzone> but im still getting that conflict

[19:38] <cbreak> muzone: so? what did you type?

[19:38] <kevlarman> JordiGH: check out git symbolic-ref HEAD

[19:38] <JordiGH> When you checkout a branch-ref, that's the designated branch-ref that will get updated when you make a commit, right? And you can't update some special branch-refs with commits.

[19:38] <Sigma> JordiGH: whether HEAD points to a ref or not

[19:38] <kevlarman> JordiGH: when you're on a branch and when you aren't

[19:38] <muzone> cbreak: git reset --hard && git clean -dfx && git pull

[19:38] <cbreak> muzone: that's wrong

[19:38] *** TheFuzzb_ joined
[19:38] <muzone> i see..

[19:38] <cbreak> muzone: if I tell you "you can rename files with mv"

[19:38] <xxiao> and yes if you're not careful with git, you will be deheaded!

[19:38] <muzone> cool

[19:38] <JordiGH> I see, HEAD points to the ref or it can point to the commit, and if it points to the commit, it's detached.

[19:38] <kevlarman> yup

[19:38] <gitinfo> canton7: you must be logged in to use this command.

[19:38] *** canton7 joined
[19:38] <Sigma> yep

[19:38] <cbreak> you wouldn't type "mv" repeatedly and moan about it not doing anything, would you?

[19:39] <JordiGH> Fucking git sucks, why does it have to make everything as simple as branches so fucking complicated?

[19:39] <cbreak> muzone: you have to tell git reset WHERE TO RESET TO

[19:39] <muzone> aaah

[19:39] <cbreak> it can't read minds

[19:39] <muzone> no it cant hehe

[19:39] <JordiGH> cbreak: hg can, apparently.

[19:39] <cbreak> no

[19:39] <JordiGH> yes.

[19:39] <kevlarman> JordiGH: git works well *because* it's so simple

[19:39] *** tewecske joined
[19:39] <JordiGH> kevlarman: It's not simple, it's fucking complicated. and it doesn't work well.

[19:39] <cbreak> JordiGH: if hg could read inds

[19:39] <Sigma> JordiGH: well otherwise it'd be harder to distinguish branches that happen to contain the same history (=> same tip commit)

[19:40] <jast> JordiGH: we're aware you don't like it. very much so. you keep talking about it.

[19:40] <cbreak> then it would not be as much garbage as it is

[19:40] <JordiGH> cbreak: hg doesn't need to expose whatever implementation detail it uses to keep track of branches, and you can't detach HEADs in hg.

[19:40] *** infogulch joined
[19:40] <kevlarman> JordiGH: git follows the unix philosophy very closely

[19:40] <cbreak> JordiGH: you can.

[19:40] *** FabTG joined
[19:40] <cbreak> JordiGH: that's what labels are for apparently

[19:40] <JordiGH> cbreak: How? going through the Python API?

[19:40] <kevlarman> JordiGH: each tool does its job and only its job for the most part

[19:40] <muzone> thank you so much cbreak

[19:40] *** lacrymology left
[19:40] *** GospeL joined
[19:40] <muzone> and jast

[19:41] *** prateekagr left
[19:41] <kevlarman> JordiGH: if hg bisect *doesn't* detach your HEAD, then that's horribly broken behavior

[19:41] <JordiGH> cbreak: What? Have you actually used hg? Because I've used both, and I keep learning why git is such a piece of shit every day.

[19:41] * muzone is now playing: http://home.no/dwaynie/rhodes_ahead.mp3

[19:41] * muzone runs up to cbreak and poses in front of the cam

[19:41] *** Anxi80 joined
[19:41] <cbreak> JordiGH: why should I use hg? It can't do anything useful that git can't do much faster, more reliable and easier.

[19:41] <JordiGH> kevlarman: I suspect you mean "update to a previous cset" when you say "detach HEAD".

[19:41] *** noisebleed left
[19:42] <kevlarman> JordiGH: no, i don't

[19:42] <JordiGH> cbreak: Yes it can, but you wouldn't know, because you haven't used it. For example, keeping more than one index.

[19:42] *** TheFuzzb_ left
[19:42] <kevlarman> JordiGH: why would i want to modify a local branch to examine an old state?

[19:42] <cbreak> git can keep as many indexes as you have repositories.

[19:42] <cbreak> big deal

[19:42] <JordiGH> kevlarman: In that case, I have no idea what you mean, because I certainly don't get any warnings about detached HEAD in hg.

[19:42] <JordiGH> cbreak: hg can keep them in the same repository, and it's useful.

[19:42] <kevlarman> JordiGH: it's entirely possible that hg doesn't detach HEAD for bisect

[19:42] <kevlarman> which would be broken

[19:43] <jast> JordiGH: look, your perpetual moaning isn't helping anybody. please cut it out.

[19:43] <JordiGH> kevlarman: You really are unable to conceive of a DVCS that doesn't detach HEADs, are you?

[19:43] <cbreak> kevlarman: maybe hg can't do bisect

[19:43] <kevlarman> cbreak: it does

[19:43] <JordiGH> kevlarman: Or at least doesn't expose it to the user.

[19:43] <JordiGH> It does bisect. It doesn't say "omg, if you commit now, be careful, becuase you'll lose data".

[19:43] <kevlarman> JordiGH: i'm able to conceive it

[19:44] <JordiGH> That's really fucking stupid.

[19:44] <kevlarman> JordiGH: you won't lose data if you commit with a detached head

[19:44] <JordiGH> I don't get why you guys think it's so great that git does that.

[19:44] <JordiGH> kevlarman: You will if you commit, you checkout a branch, and wait for garbage collection.

[19:44] <kevlarman> JordiGH: it is literally impossible to lose data that has been commited in git

[19:44] <JordiGH> kevlarman: This is literally a lie.

[19:44] <JordiGH> Because I've lost it.

[19:44] <kevlarman> JordiGH: nope

[19:44] <JordiGH> Yep.

[19:44] <cbreak> good joke :)

[19:44] <kevlarman> JordiGH: see man git-reflog

[19:44] <gitinfo> JordiGH: the git-reflog manpage is available at http://jk.gs/git-reflog.html

[19:44] <canton7> You just didn't know how to get it back

[19:44] <JordiGH> kevlarman: The reflog isn't gonna help if you've already gc'ed.

[19:45] <jast> JordiGH: I asked you like three times now. I'm not going to ask again. it's not *that* difficult to mind your words. heck, even I can do it.

[19:45] <cbreak> it will

[19:45] <JordiGH> jast: What, you don't like taboo language?

[19:45] <cbreak> nothing that is in the reflog will ever be gced

[19:45] <kevlarman> JordiGH: it's not unreferenced if it's in the reflog

[19:45] <kevlarman> JordiGH: so it won't get gc'ed

[19:45] <canton7> JordiGH, the reflog will stop your lost stuff from being gc'd for 90 days, and after then it sticks around for another 2 weeks I think?

[19:45] *** Spockz` joined
[19:45] <kevlarman> canton7: 30

[19:45] <kevlarman> but still

[19:45] <jast> JordiGH: there's no such thing as taboo, but there's such a thing as manners

[19:45] <kevlarman> it's effectively impossible to lose commited changes in git

[19:45] <JordiGH> So if you wait 30 days, and gc, it gets lost, through no fault of your own other than failing to understand what a detached HEAD is.

[19:46] <cbreak> no

[19:46] <cbreak> it's still in HEAD

[19:46] <JordiGH> kevlarman: Oh, "effectively", I see. If you lose data, as I have, you're ineffective. Not git. Git can't be the ineffective one.

[19:46] *** surfdue left
[19:46] <JordiGH> cbreak: Not if you moved HEAD elsewhere.

[19:46] *** psakrii left
[19:46] *** ChanServ sets mode: +o jast

[19:46] <JordiGH> jast: http://en.wikipedia.org/wiki/Taboo_Language

[19:46] <cbreak> JordiGH: if you move HEAD somewhere else, then you didn't want to keep the previous HEAD

[19:46] *** jast sets mode: +b *!*jordi@octave/developer/JordiGH

[19:46] *** JordiGH was kicked by jast (thank you, come again later))
[19:46] <cbreak> obviously :)

[19:46] *** jast sets mode: -o jast

[19:47] <canton7> kevlarman, ah gc.reflogexpireunreachable. Is that new? Nice to know anyhow

[19:47] *** gusnan left
[19:47] <kevlarman> canton7: as far as i'm concerned anything newer than 1.4.2 is new :P

[19:47] *** Spockz` left
[19:47] <muzone> cbreak: just curious - would you have done anything to improve https://gist.github.com/1590691 ? (shell script to pull all git repositories in a folder)

[19:48] <kevlarman> canton7: my reaction to all of git's new features: http://www.lolroflmao.com/wp-content/uploads/2011/07/6ODrl.jpg

[19:48] *** kermit joined
[19:48] *** tomislater joined
[19:48] *** GospeL left
[19:48] <cbreak> muzone: the pull is useless

[19:48] <kevlarman> btw, i finally get to move from git-svn to git at work today \o/

[19:48] *** surfdue joined
[19:48] <canton7> kevlarman, haha! One of the more appropriate uses i've seen that image put to :P

[19:48] <cbreak> muzone: put a git remote update before the reset instead

[19:49] <cbreak> muzone: and instead of origin/master you could use @{u}

[19:49] <kevlarman> canton7: seriously though, @{u}, git checkout implicitly creating local branches, etc.

[19:49] *** Vile1 left
[19:49] <kevlarman> i was so confused for a few months

[19:50] <muzone> cbreak: awesome man!!

[19:50] *** Spockz` joined
[19:50] <canton7> Yeah, I'm still in the "learning git's more obscure features" stage, so new developments are sort of ok for now... Not sure how long that will last for!

[19:51] *** proq joined
[19:51] <kevlarman> that's what was so awesome about 1.4.2

[19:51] <xxiao> git rebase --> git mergetool --> git add . --> git rebase --continue

[19:51] <cbreak> kevlarman: you don't have to rely on implicit behaviour. I always recommend git checkout -t origin/foo because it is more explicit than the new git checkout foo

[19:51] *** brngardner joined
[19:51] <xxiao> why i am asking to merge the same file OVER and OVER AGAIN?

[19:51] <xxiao> asking->asked

[19:51] *** mcdebugger left
[19:51] <cbreak> xxiao: you merge. you resolve.

[19:52] <xxiao> in the past after the merge I just do 'git add .', as 'git commit' caused trouble

[19:52] <cbreak> repeatedly getting asked?

[19:52] <xxiao> cbreak: yes

[19:52] <xxiao> same file

[19:52] <cbreak> when?

[19:52] <kevlarman> xxiao: you want to read about man git rerere

[19:52] <gitinfo> xxiao: the git-rerere manpage is available at http://jk.gs/git-rerere.html

[19:52] <muzone> cbreak: like this? https://gist.github.com/1590691

[19:53] <muzone> added git remote update || exit so it stops the whole script if that part fails

[19:53] <muzone> or should the || exit be elsewhere?

[19:53] *** tvw left
[19:53] <cbreak> muzone: guess so. you could put the clean at the start if you want to keep it.

[19:53] *** mloskot joined
[19:53] *** mloskot left
[19:53] *** mloskot joined
[19:53] <cbreak> xxiao: you only have to merge exactly once per conflict.

[19:54] *** n8o-mba joined
[19:54] *** rcu joined
[19:54] <cbreak> afterwards, those changes won't be merged in again, and you will not have to resolve them again

[19:54] *** Laibsch left
[19:54] <Makoryu> muzone: Hmm, there must be an idiomatic way to show helpful error messages instead of just calling `exit`

[19:54] <muzone> cbreak: shouldnt it run the clean after it's run git remote update?

[19:55] <xxiao> cbreak: that's not the case here, sigh

[19:55] <cbreak> muzone: clean deletes files that are not tracked.

[19:55] <xxiao> cbreak: i'm merging the same conflict for 3 times in a row

[19:55] <cbreak> xxiao: when? why?

[19:55] <xxiao> as the damn rebase --continue just fell at the same place

[19:55] <cmn> you're rebasing, not merging

[19:55] <xxiao> here is the flow

[19:55] *** pfsmorigo left
[19:55] *** iheffner joined
[19:55] <cbreak> xxiao: ah, rebase

[19:55] *** brngardner left
[19:55] <cbreak> that's a special case :)

[19:55] <muzone> Marquel: wont the error messages from git remote update, if any, be shown?

[19:55] <xxiao> git rebase xyz --> git mergetool -->git add . -->git rebase --continue

[19:55] <muzone> cbreak: cool, thanks again man !!

[19:55] <cbreak> rerere can help with that

[19:55] <Makoryu> muzone: Why are you cleaning after you reset, exactly?

[19:56] <xxiao> after that it fell at the same time

[19:56] *** hxts left
[19:56] <xxiao> s/same time/same place/

[19:56] *** shurane left
[19:56] <cbreak> xxiao: yeah, that's the correct way

[19:56] <muzone> Makoryu: not sure really

[19:56] <muzone> Makoryu: do i need clean there at all?

[19:56] <Makoryu> I don't think so

[19:56] <Makoryu> Lemme check

[19:56] <muzone> Makoryu: i mean, wont it only be necessary if i've added files to the repo myself?

[19:56] <muzone> in which case i havent - i havent touched any of these repos

[19:57] *** baburdick left
[19:57] *** shurane joined
[19:57] <xxiao> cbreak: good news, after the 5th time it passes that

[19:57] <muzone> or is it necessary incase the repo author deletes files from his repo? (i.e. git wont delete them over at my place)

[19:57] <cbreak> no

[19:57] <xxiao> that makes no sense though

[19:57] <cbreak> muzone: git clean only deletes files that are untracked

[19:58] <cbreak> it is useful if you create files in the repo, for example by doing ./configure && make

[19:58] <muzone> aah

[19:58] <muzone> makes sense now

[19:58] *** baburdick joined
[19:58] <muzone> thanks again everyone..

[19:59] *** spiette left
[19:59] <kevlarman> cbreak: out of tree builds ftw

[20:00] *** kevwil left
[20:00] *** beaufour left
[20:00] *** beaufour joined
[20:00] *** bindaasomatic left
[20:01] <muzone> Makoryu: feel free to suggest ways to improve it though: https://gist.github.com/1590691

[20:01] *** kevwil joined
[20:01] <muzone> *** AIRHOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOORN http://home.no/dwaynie/airhorn.mp3 ***

[20:02] <muzone> hehe

[20:02] *** DofLeFou joined
[20:02] *** bgerber left
[20:03] *** brngardner joined
[20:03] *** surfdue left
[20:03] *** kerrick left
[20:03] *** surfdue joined
[20:03] *** ngulden left
[20:04] *** Behi left
[20:04] *** plusk left
[20:04] *** beaufour_ joined
[20:04] *** bgerber joined
[20:05] <Makoryu> muzone: Actually, is there a possibility that untracked files would be floating around in those repositories before you run the script?

[20:05] *** beaufour left
[20:05] *** beaufour_ is now known as beaufour

[20:05] *** faber left
[20:05] <muzone> Makoryu: if there's a possibility those files snuck in when I first cloned the repo?

[20:06] *** shurane left
[20:06] <Makoryu> muzone: Untracked files won't be carried from one repo to another when cloning

[20:07] <Makoryu> They're untracked ;)

[20:07] *** Nikoli left
[20:07] *** Spockz` left
[20:07] *** Fidelix left
[20:08] *** cschneid- joined
[20:08] <muzone> cool =)

[20:08] *** Fidelix joined
[20:08] <muzone> then i think we're safe hehe

[20:08] *** cschneid_ left
[20:08] *** khmarbaise joined
[20:09] *** Spockz joined
[20:09] *** shurane joined
[20:09] <Makoryu> muzone: The only way untracked files will show up is if you put them there locally

[20:09] <Makoryu> So whether you're doing that should determine whether you use `git clean`

[20:09] *** Nikoli joined
[20:10] <Makoryu> 'Cause `git reset` won't remove files the repository has never heard about

[20:10] *** shurane left
[20:10] *** tomislater left
[20:10] *** shurane joined
[20:11] *** cakehero left
[20:11] *** lonewulf` joined
[20:11] *** Spockz` joined
[20:12] *** mandric left
[20:13] *** scelis joined
[20:13] *** Sonderblade joined
[20:13] *** Sonderblade left
[20:13] *** tomislater joined
[20:14] *** Sonderblade joined
[20:14] *** khmarbaise left
[20:14] <xxiao> OK, git rebase-->git mergetool-->git add . -->git rebase --continue, i was told "No changes - did you forget to use git add'?

[20:14] *** shurane left
[20:14] <xxiao> i did not, however git rebase --continue refuse to proceed, keep asking me the same question!

[20:15] <xxiao> git status showed nothing so it's clean

[20:15] <xxiao> that's really nuts

[20:15] *** cschneid- left
[20:15] <canton7> git status? If your conflict-fixes have meant that the there's nothing to apply, use rebase --skip

[20:15] <SethRobertson> I've had that happen when the result of the conflict was identical to the old release

[20:15] <SethRobertson> exactly

[20:15] <xxiao> SethRobertson: so you just skip?

[20:16] <SethRobertson> Yes

[20:16] <xxiao> then what, re-run git rebase --continue?

[20:16] <SethRobertson> It should do something useful

[20:16] <SethRobertson> --skip I mean

[20:17] <muzone> Makoryu: awesome man - thanks again for your help :-)

[20:17] <Makoryu> No problem

[20:18] *** Fidelix left
[20:18] <xxiao> SethRobertson: not right

[20:18] <xxiao> SethRobertson: skip seems end the whole rebase?

[20:18] <xxiao> i ran a --continue afterwards, it says i have no rebase in progress anymore

[20:18] <SethRobertson> It might have been the last item in the list

[20:18] *** cschneid joined
[20:19] <xxiao> i'm checking, so far it seems not the case

[20:19] *** Spockz` left
[20:19] <canton7> "It is possible that a merge failure will prevent this process from being completely automatic. You will have to resolve any such merge failure and run git rebase --continue. Another option is to bypass the commit that caused the merge failure with git rebase --skip"

[20:19] *** tomislater left
[20:19] <xxiao> what's the cmd to show which branch tracking which remote?

[20:19] <xxiao> can't recall that

[20:20] <SethRobertson> git branch -vv

[20:20] <xxiao> that's it, thanks

[20:21] *** aspotashev left
[20:22] <xxiao> SethRobertson: i'm sure -skip just ends my rebase in the middle of nowhere

[20:22] *** fermianyon joined
[20:23] <SethRobertson> That has not been my experience

[20:23] <xxiao> now "I have 742 and 265 different commits each' on divergence

[20:23] *** cortana` left
[20:24] <canton7> what did git output after you ran rebase --skip?

[20:24] <SethRobertson> That suggests that the rebase worked.  It may not have been what you wanted

[20:24] <canton7> (I would have expected something like 742 and 742 different commits if the branch was up-to-date before the rebase_

[20:25] <xxiao> canton7: it's up to date, i pulled it right before rebase

[20:25] <xxiao> canton7: the skip reports" HEAD is now at somewhere; Applying: my-just-merged-patch"

[20:25] <SethRobertson> What was the command you ran?

[20:26] <xxiao> it's like the HEAD was adjusted by skip

[20:26] *** tukra joined
[20:26] <SethRobertson> As it should be

[20:26] *** tukra left
[20:26] <xxiao> SethRobertson: i ran 'git rebase --skip' after the merge has the same result as the one i'm rebasing on

[20:26] <SethRobertson> No, the original command

[20:27] <xxiao> git checkout foo; git rebase xyz; git mergetool -t meld; git add .; git rebase --continue

[20:27] *** rzec left
[20:27] <xxiao> after I had to replace continue with --skip, the rebase 'finishes' in the middle

[20:27] *** baburdick left
[20:27] <xxiao> and i could no longer proceed the rebase

[20:27] *** diegoviola left
[20:28] <xxiao> and i beliveve all my patches are rebased to the new remote branch(checkout locally)

[20:28] <xxiao> s/all/not all/

[20:28] <SethRobertson> So from what you have revealed, foo is public and you are !rewriting_public_history.  Are you quite sure that is what you want?  It rarely is.

[20:28] <gitinfo> Rewriting public history is a very bad idea.  Anyone else who may have pulled the old history will have to `git pull --rebase` and even worse things if they have tagged or branched, so you must publish your humiliation so they know what to do.  You will need to `git push -f` to force the push.  The server may not allow this.  See receive.denyNonFastForwards (git-config)

[20:28] *** drizzd joined
[20:28] *** tukra joined
[20:28] *** mandric joined
[20:28] *** dv310p3r joined
[20:28] <xxiao> SethRobertson: no, foo is my local branch, xyz is the public

[20:29] <canton7> but foo must have an upstream?

[20:29] <xxiao> git rebase xyz is putting my foo on top of xyz, if i understand correctly

[20:29] <SethRobertson> xxiao: But...you said `git status` reported a divergence.  The only thing you can be diverged from is upstream

[20:29] *** baburdick joined
[20:29] *** rgr joined
[20:29] <canton7> that ^^

[20:29] <xxiao> SethRobertson: that branch is 'tracking' upstream, but will be pushed to internl repo after the merge

[20:30] <xxiao> that's a normal practice, once a while we rebase our own foo by pulling in new changes from the public repo, in this case xyz

[20:30] <xxiao> which is why i'm doing 'git checkout foo; git rebase xyz'

[20:30] <SethRobertson> I would recommend a different name to avoid confusion, but I guess we can ignore that.  If you `git show xyz` you should see the last commit on xyz.  Do you see that commit in your history of foo?

[20:30] *** jas4711 left
[20:31] *** Vile joined
[20:31] <SethRobertson> xxiao: Most people would merge it in, not rebase it, to avoid the public history rewrite

[20:31] *** j416 joined
[20:31] <canton7> rebase is only really appropriate on local-only branches. If your branch is an upstream, it is not local-only

[20:32] *** metcalfc left
[20:32] *** gusnan joined
[20:32] <canton7> xxiao, have you looked at your history recently in graph-form (gitk or git log --graph)?

[20:32] <xxiao> SethRobertson: git show xyz is in Nov30, git show foo is Sep20

[20:32] <xxiao> SethRobertson: as i said, skip basically applied that one patch, and then skips the rest

[20:32] *** spvensko left
[20:33] <xxiao> canton7: yes

[20:33] *** Spockz` joined
[20:33] <canton7> xxiao, cool. I've seen people who've had rebase-heavy workflows, and simply haven't noticed that they keep merging together two versions of history, and have duplicate commits everywhere

[20:33] *** Laibsch joined
[20:34] <xxiao> SethRobertson: here is an example(not really our case), we develop a kernel drive on our kernel git, after a while we need rebase the drive with the newest public kernel git tree

[20:34] *** nadavoid|afk joined
[20:34] *** nadavoid|afk left
[20:34] *** nadavoid|afk joined
[20:34] <xxiao> so i create a local branch based off kernel.org git top, rebase it into our local tree which has our driver code

[20:34] <xxiao> so i think rebase is the right method instead of a simple merge

[20:35] *** tsujiban joined
[20:35] *** dr_ick joined
[20:35] <canton7> wait, if I'm understanding that correctly, you rebase the k.o code *onto* your local code?

[20:35] *** nadavoid|afk left
[20:35] <xxiao> the driver code will then be moved on top of the newest public git(checked out locally)

[20:35] *** Targen joined
[20:36] *** Gorkyman left
[20:36] *** Gorkyman joined
[20:36] <Gorkyman> is there a tool for converting svn to git repo?

[20:36] <_ikke_> man git-svn

[20:36] <gitinfo> the git-svn manpage is available at http://jk.gs/git-svn.html

[20:36] <Makoryu> Gorkyman: Lots of them, I think

[20:36] <kevlarman> Gorkyman: git-svn, git-svnimport, and a ton of 3rd party tools

[20:36] <canton7> git-svn might not be best if you just want to do a one-way conversion

[20:36] <xxiao> git checkout -b kernel-public git://kernel.org/linux.git; git checkout my-local-kernel-branch-for-a-driver; git rebase kernel-public;

[20:36] <Gorkyman> which one is the best?

[20:37] <xxiao> then git push my-internal-git-repo

[20:37] <_ikke_> Gorkyman: Depends on what you need

[20:37] <kevlarman> canton7: why not?

[20:37] <kevlarman> canton7: other than having to fix up tags, i don't see an issue with it

[20:37] <xxiao> canton7: taht's how I pull in public top git tree to make sure our own code still works with the newest code

[20:37] <canton7> kevlarman, iirc, git-svn has to jump through hoops to make the git repo svn-compatible, such as git-svn-in in commit messages, and there might be other limitations that I've forgotten

[20:38] <Gorkyman> _ikke_: one way conversion... what else is there?

[20:38] <kevlarman> canton7: you can make it leave those out

[20:38] <kevlarman> although i don't think i'd bother

[20:38] <kevlarman> just as a reference to the revisions that might still exist in the bug tracker or something

[20:38] <canton7> Gorkyman, bottom section of http://gitready.com/beginner/2009/02/04/converting-from-svn.html maybe?

[20:39] <canton7> xxiao, and my-local-kernel-branch-for-a-driver has an internal upstream? Which you have to force-push it to?

[20:39] *** t4nkd joined
[20:39] <SethRobertson> xxiao: I've just created a trivial test case which allows me to test rebase --skip.  It works fine.  Would you like me to share it with you?

[20:39] *** valtih left
[20:40] <canton7> kevlarman, fair play. I'm sure it can work perfectly well - I was just parroting something I heard a while back, though I can't remember enough to justify it :P

[20:40] <kevlarman> canton7: how a while back?

[20:40] *** tvw joined
[20:40] <canton7> months maybe?

[20:40] *** icrazyhack joined
[20:40] <xxiao> canton7: sort of, in this case i'm creating a new internal branch,

[20:40] <kevlarman> hm

[20:41] <kevlarman> dunno then

[20:41] <canton7> won't have been more than a year

[20:41] <xxiao> SethRobertson: yes but how? thanks

[20:41] <SethRobertson> xxiao: (rm -rf zz; mkdir zz; cd zz; git init; echo A>A; git add A; git commit -m A; echo AA>>A; git commit -am AA; git checkout -b alt; echo B>B; git add B; git commit -m B; echo BB>>B; git commit -am BB; echo AAAA>>A; git commit -am AAAA; echo BBB>>B; git commit -am BBB; git checkout master; echo AAA>>A; git commit -am AAA; echo AAAAA >> A; git commit -am AAAAA; git rebase alt; git rebase --skip)

[20:41] *** Jackneill left
[20:41] *** f0i left
[20:41] *** monokrome joined
[20:41] * PerlJam looks at SethRobertson's text and his eyes glaze over

[20:41] <SethRobertson> If it "works" you will get a second conflict as rebase continues to apply master's patches on top

[20:42] <xxiao> SethRobertson: somehow in my case --skip happily skips all the rest, for about 200 patches that are not yet rebased

[20:43] <SethRobertson> xxiao: Also remember you can always step back to the "before" case and retry the rebase.  You can also make a trivial change instead of --skipping

[20:43] *** tukra left
[20:43] <xxiao> SethRobertson: i did not see git mergetool to resolve a conflict, after that rebase --continue refused to work and i had to use --skip

[20:43] <SethRobertson> Does the test case I pasted above work for you?

[20:43] <xxiao> that might be a corner case to mess up with --skip?

[20:43] <SethRobertson> Feel free to delete the --skip at the end of my test and run whatever you want

[20:44] *** horieyui joined
[20:45] *** monokrome left
[20:45] *** giallu joined
[20:45] <xxiao> SethRobertson: in your demo, after i ran mergetool and then 'git rebase --continue' works

[20:45] <xxiao> in my case, --continue did not work

[20:45] <canton7> xxiao, actually that divergence message makes sense. You've added a ton of k.o commits to your branch, so you'll havea  lot more commits on it than on upstream

[20:46] *** monokrome joined
[20:46] <SethRobertson> xxiao: You didn't select the A AA AAAA data, so there was something to do

[20:47] <canton7> xxiao, do you have any evidence for the rebase not completing, other than the divergence message?

[20:47] *** t4nkd left
[20:48] *** icrazyhack left
[20:48] *** alberto56 left
[20:48] <xxiao> canton7: used gitg to double check

[20:48] *** n8o-mba left
[20:49] <xxiao> canton7: you're right i think the merge finishes

[20:49] <Q|> Any way to cherry pick a commit keeping the commit hash / data instead of creating a new commit?

[20:49] <canton7> xxiao, merge or rebase? :P

[20:49] <Mikachu> Q|: git reset --hard thecommit ;)

[20:49] *** lonewulf` left
[20:49] <xxiao> SethRobertson: the rebase put lots of old commits on the newest public commits so the date is like, old date on top of new date

[20:49] <canton7> Q|, no. The commit hash depends on the parent of the commit, which obviously changes when you cherry-pick it

[20:49] <Mikachu> Q|: obviously no, since a commit contains the complete history leading up to it

[20:49] <Mikachu> jinx

[20:49] <xxiao> canton7: rebase works i think

[20:49] <SethRobertson> xxiao: Which is normal

[20:49] <canton7> xxiao, sweet!

[20:49] *** monokrome left
[20:50] <xxiao> SethRobertson: yes maybe it's because of 3pm here

[20:50] <xxiao> thanks guys!

[20:50] *** thiago left
[20:50] <SethRobertson> 3PM, the witching hour?

[20:50] <canton7> xxiao, no worries! I should have realised the cause of the divergence message earlier :P

[20:50] <xxiao> SethRobertson: 3pm is supposed to be my nap time

[20:50] <xxiao> :)

[20:51] <Q|> Mikachu, canton7: Doh! So, when I want to cherry-pick a commit from a temp branch into two different branches, I'll have different commits for each even though they are the same blob-wise.

[20:51] *** rgr left
[20:51] <Mikachu> yes, that is as it should be

[20:52] *** Octalot joined
[20:52] *** danielpunt joined
[20:52] <canton7> Q|, the commit hash can be used to verify that the *entirety* of the history leading up to that commit is correct.

[20:52] *** codatory left
[20:53] *** monokrome joined
[20:54] *** jceb_ left
[20:55] *** fbernier joined
[20:55] <Q|> canton7: I see. Well, I guess I don't really have to have the same commits, but I thought it would be like in my question and am not sure if this will cause some troubles regarding the way I did the development until now. I'll have to think about that I guess ^^

[20:55] *** Laibsch left
[20:55] *** f0i joined
[20:57] *** tsujiban left
[20:57] <SethRobertson> Q|: A merge based workflow would make this more clear since hte dependencies are shown in git

[20:57] *** cccaldas_ left
[20:58] *** Makoryu left
[20:58] *** baburdick left
[20:58] <SethRobertson> Q|: eg you branch feature from the merge base of all of the branches you want to apply the fix on, then apply the fix, then merge the feature onto the branches.

[20:58] *** tsujiban joined
[20:59] *** baburdick joined
[20:59] *** fbernier left
[20:59] *** Ownatik joined
[20:59] <Ownatik> Hi, I'd like to export a git repository from a remote, including every branches and the commit history. How could I do that?

[20:59] <EugeneKay> man git-clone

[20:59] <gitinfo> the git-clone manpage is available at http://jk.gs/git-clone.html

[20:59] <Q|> SethRobertson: Yeah, I'm currently thinking about such a thing, I just have a problem (thinking-wise): The three branches already differ... wait, I think I get it.

[20:59] *** f0i left
[21:00] <Q|> SethRobertson: So, you mean I should create a common-merge branch from the latest commit that every of my branches has in their history

[21:00] <Q|> SethRobertson: Then merge a feature branch onto that common-merge branch, and then merge that common-merge branch into the other branches?

[21:01] <SethRobertson> Q|: Yes.  If you branch from somewhere else you might get unwanted history.

[21:01] *** kevwil left
[21:01] *** monokrome left
[21:02] <SethRobertson> Q|: Actually no

[21:02] *** kaushik_ joined
[21:02] *** Chaser joined
[21:02] *** thiago joined
[21:02] *** kennethreitz left
[21:03] <SethRobertson> Q|: You put an extra branch in there "common merge" which I didn't.  It doesn't hurt anything to do so, but you could merge feature directly and avoid going through the intermediate branch.  If there are multiple features then *perhaps* the intermediate branch might be useful.  Perhaps not as well.

[21:05] <Q|> SethRobertson: My problem right now is, I branched the feature branch of a dev branch, which has commits in it the master branch should not have (the dev stuff). So, If I merge the feature branch to master, I'll get all the dev commits as well

[21:05] <Q|> SethRobertson: That's why I think I'll have to create that additional merge branch to solve it this time

[21:05] *** Kiall left
[21:06] *** jroes left
[21:06] *** psoo joined
[21:07] <SethRobertson> Q|: If you branch feature from the mergebase of all of the places you want to merge it from, you will not have that problem.  Now admitted it is too late to do it that way, so you need to fake it.

[21:07] *** lonewulf` joined
[21:08] <scelis> A repository can only have 1 root commit, right? There is no way to create a new branch that has no parent commit

[21:08] <SethRobertson> Q|: You can create feature_from_merge_base and cherry-pick the commits from feature onto that new version of feature, and then merge it.

[21:08] <SethRobertson> scelis: Wrong.  It isn't recommended usually, but you can create an --orphan branch as another root

[21:08] <SethRobertson> Under most circumstances, any case where you want to create an orphan branch is better met by creating a new repository

[21:09] <canton7> things like github's gl-pages, though, require an orphan branch

[21:09] <scelis> SethRobertson: interesting. thanks.

[21:09] *** Cromulent joined
[21:09] *** monokrome joined
[21:09] <canton7> or maybe if you keep tests separate from the code branches...

[21:10] <canton7> or man pages, etc

[21:10] *** lapistano left
[21:10] <SethRobertson> canton7: That doesn't make sense, though, since tests would correspond to a particular release or code.

[21:10] *** Laibsch joined
[21:10] <SethRobertson> same with man pages

[21:10] <Q|> SethRobertson: Yeah, that would be my previously mentioned "extra branch". A branch which has no dev stuff in it - so, basically that one commit where I branched dev from master, as my "clean merge base branch"

[21:10] *** Heisenmink left
[21:10] *** _inc left
[21:10] <cbreak> creating orphan branches is a good start

[21:10] *** lapistano joined
[21:10] <cbreak> you can later easily split them up into repositories

[21:11] <SethRobertson> Q|: Sure, but I was proposing that only one feature be put on that branch.  If you want to do that to multiple features, you can of course.

[21:11] <Q|> SethRobertson: Allright, that's the way I have to do it, since I'll have to branch feature branches off the dev branch all the time.

[21:11] *** Cromulent left
[21:11] *** tukra joined
[21:11] *** tukra is now known as tukra_

[21:11] *** pantsman left
[21:12] *** EricInBNE joined
[21:12] *** Kiall_ joined
[21:12] *** localhost joined
[21:12] <Q|> SethRobertson: Wait, I'm stupid. If I create that clean branch, I can actually use the master branch itself for it, cherry pick into master from the dev-feature branch and then merge master into the other branches.

[21:12] *** thiago left
[21:12] *** tukra_ left
[21:12] *** Kiall_ left
[21:12] *** t4nkd joined
[21:13] <SethRobertson> As long as there is nothing on master which you don't want on the other places, then sure.

[21:13] <Q|> SethRobertson: No, I got it now. Yes, exactly that came to my mind ^^

[21:13] <SethRobertson> (And there is not something missing from master)

[21:13] <SethRobertson> You could of course correct the missing problem with a merge to master

[21:13] <Q|> SethRobertson: This is the case, so every "main branch" has at least one commit I don't want on any other branch, so I'll have to create that "clean merge base branch"

[21:14] <Q|> SethRobertson: Yes, I think I got it together now. I'll try that, thanks a ton mate. You too, Mikachu and canton7

[21:15] <proq> when I check out an older version of my repo, I get put into a detached head state.  what are the fewest steps to go back to the latest revision?

[21:15] *** iokill left
[21:15] <canton7> proq, git checkout <branch>

[21:16] *** rcu left
[21:17] *** brngardner left
[21:17] *** erichynds left
[21:17] *** f0i joined
[21:17] *** rcu joined
[21:17] <scelis> SethRobertson: So similarly, if I have a repo with history that I want completely rewritten, I could create a --orphan branch, delete the old master branch. rename the new orphan branch to master, and push?

[21:18] *** umren left
[21:18] <canton7> scelis, that's the same as rewriting master then force-pushing it

[21:18] *** umren joined
[21:18] <SethRobertson> scelis: It is the same as long as you --set-upstream afterwards.  Of course remember this is !rewriting_public_history

[21:18] <gitinfo> scelis: Rewriting public history is a very bad idea.  Anyone else who may have pulled the old history will have to `git pull --rebase` and even worse things if they have tagged or branched, so you must publish your humiliation so they know what to do.  You will need to `git push -f` to force the push.  The server may not allow this.  See receive.denyNonFastForwards (git-config)

[21:19] <scelis> thanks!

[21:19] <cbreak> scelis: only situations where I created an orphan branch was when I wanted to start a new strain of history and glue the old in with grafts

[21:19] *** neataroni left
[21:20] *** Spockz` left
[21:20] *** heptadecagram left
[21:20] <canton7> (incidentally, the renaming trick you were describing is the way to get around receive.denyNonFastForwards)

[21:20] *** Kiall_ joined
[21:20] <scelis> cbreak: i have a repo than an old co-worker created. we dont want to use *any* of the code. though i dont want to lose the history so i was going to create a secondary repo and push it there for archival sake

[21:21] <scelis> this repo is managed by gitolite, so i was looking for the lowest-friction way of starting fresh

[21:21] <cbreak> canton7: I don't think renaming is going to help

[21:21] <cbreak> scelis: just create a different new repo

[21:21] *** rcu left
[21:21] <cbreak> easiest non-friction way :)

[21:22] <scelis> cbreak: but more confusing later. when i tell a new coworker to get the repo for app "X" i have to say that its names differently than our standard repo naming convention :)

[21:22] <scelis> named*

[21:22] <cbreak> nah.

[21:22] <cbreak> just rename the project :)

[21:23] <scelis> hahah :)

[21:23] <scelis> filter-branch and rebase -i are heavy hammers (and I seem to remember rebase-i not allowing me to delete the root commit of a repo)

[21:23] <cbreak> call it "Vista". That name brings good luck I heard.

[21:23] <cbreak> you don't need any of that

[21:23] <scelis> Longhorn?

[21:23] *** iokill joined
[21:23] <cbreak> if you don't want to rename the repo

[21:23] <cbreak> you can rename the branch

[21:23] *** ISF_ left
[21:24] <cbreak> but that will confuse people who already cloned

[21:24] <scelis> im ok with that. no one important has cloned :)

[21:24] <cbreak> they will have to reset --hard instead of pull, and will lose local history

[21:24] *** kennethreitz joined
[21:24] <scelis> its basically a dead repo

[21:24] <cbreak> git push origin localname:remotename

[21:24] *** d0k left
[21:24] <cbreak> push local master to remote oldmaster or what ever

[21:24] <scelis> renaming the branch and forgetting all old history only works if i create a new --orphan branch

[21:24] <scelis> from what i understand

[21:24] <cbreak> and then rename the local master and make a new one

[21:25] <scelis> oh righty

[21:25] <cbreak> the renaming works without that

[21:25] <cbreak> creating the new master would be with checkout --orphan

[21:25] <scelis> i just create a new local repo and push it with -f

[21:25] <scelis> duh

[21:25] <cbreak> for example

[21:25] <scelis> i should just start with a local empty repo, add the remote, and push

[21:25] *** cccaldas joined
[21:26] *** Laibsch left
[21:27] <SethRobertson> canton7: I thought that receive.denyDeletes was set to prevent that hack from working.  Perhaps it was just a dream.

[21:28] *** scelis_ joined
[21:28] *** vervic joined
[21:28] <canton7> SethRobertson, whoa, when did that appear?

[21:28] <SethRobertson> It has been there for a long time.

[21:28] *** baburdick left
[21:28] <mugwump> It was even documented, 17 months later

[21:28] *** boombatower joined
[21:29] <mugwump> so, almost 3 years

[21:29] *** The_Journey joined
[21:29] <The_Journey> hi, how can I get git to ignore binary files?

[21:29] <canton7> fair play. the trick works *provided* that receive.denyDeletes isn't set, then :P

[21:30] <cbreak> The_Journey: git can only ignore untracked things, by file name pattern

[21:30] <SethRobertson> The_Journey: I don't think there is a way other than listing them in your .gitignore file

[21:30] *** baburdick joined
[21:30] *** amcsi_ joined
[21:30] <The_Journey> ugggh, ok thank you

[21:30] *** amcsi_ left
[21:31] *** scelis left
[21:31] *** garrys_game joined
[21:31] <SethRobertson> Of course you can write a shell script to find them and insert them into your .gitignore automagically

[21:31] <cbreak> what is your heuristic for "binary file"?

[21:31] <cbreak> because obviously, files are binary because of the nature of our computers

[21:32] <cbreak> (I read that git considers utf-16 text binary for example)

[21:32] *** cakehero joined
[21:32] <kevlarman> cbreak: containing any null bytes

[21:32] *** ISF_ joined
[21:34] *** akosikeno left
[21:34] *** mythmon left
[21:34] *** Heimidal_ joined
[21:35] *** Heimidal left
[21:35] <cmn> any? so an UTF-16 plaintext would be binary?

[21:36] <cmn> git looks at the first 4KB IIRC and looks for NULs there

[21:37] *** kevwil joined
[21:37] <kevlarman> cbreak: so it treats gzip as nonbinary?

[21:37] *** pantsman joined
[21:37] *** pantsman left
[21:37] *** pantsman joined
[21:37] <cbreak> I wouldn't know.

[21:37] <kevlarman> err cmn

[21:37] *** TD joined
[21:37] *** fayimora joined
[21:37] <kevlarman> that sounds wrong

[21:37] *** The_Journey left
[21:37] <TD> hi. how can i make my current branch be identical to some remote branch?

[21:37] <SethRobertson> gzip almost certainly would have nulls in the first 4k

[21:38] <kevlarman> SethRobertson: nope

[21:38] <cmn> it usually works

[21:38] *** cccaldas left
[21:38] <canton7> TD, git reset --hard remote/branch. This will nuke all uncommitted changes

[21:38] <SethRobertson> TD: identical in the sense of history or just to import the current contents?

[21:38] <kevlarman> SethRobertson: i'm pretty sure gzip is null terminated

[21:38] <canton7> TD, if you want to nuke untracked files, use git clean

[21:38] <TD> thanks

[21:38] <cmn> I've never tried to trick git into treating a gzip as text

[21:38] <cmn> though it sometime shows PDFs as text

[21:38] <canton7> TD, my instructions are for identical history and content, and will destroy local history not in the remote branch

[21:38] <TD> that's ok

[21:39] *** alberto56 joined
[21:40] <SethRobertson> My gzip binary contains nulls and a particular file that is gziped contains nulls.

[21:40] <kevlarman> hm

[21:40] <kevlarman> i guess it's not just 1 byte

[21:40] <SethRobertson> od -t x1 filename | grep ' 00'

[21:41] <Q|> off to the bus, thx again for you help guys, cya and have fun :)

[21:41] *** Q| left
[21:41] *** scelis joined
[21:42] *** scelis_ left
[21:42] *** scelis left
[21:43] *** Raging_Hog left
[21:43] *** Carmivore left
[21:43] *** horieyui left
[21:43] *** Carmivore joined
[21:44] *** mandric left
[21:44] *** _iron left
[21:45] *** flaguy48 left
[21:46] *** snearch joined
[21:46] *** icrazyhack joined
[21:46] *** tewecske left
[21:47] *** cccaldas joined
[21:47] *** jonesy_ left
[21:49] *** holtgrewe joined
[21:49] *** kevwil left
[21:51] *** ISF_ left
[21:52] *** ISF_ joined
[21:52] *** holtgrewe left
[21:52] *** Heimidal_ left
[21:53] *** brngardner joined
[21:54] <TD> canton7: if i push this reset branch to another remote branch, what happens?

[21:54] <TD> canton7: does it also get reset?

[21:54] *** bauruine left
[21:54] *** LongBeach left
[21:54] *** metcalfc joined
[21:54] <canton7> TD, it resets the local branch to point to the other remote branch

[21:54] *** babilen joined
[21:55] <TD> yeah ok so i have a local clone of a remote clone of an upstream repository

[21:55] <TD> i just reset my local clone to the upstream repository. now what happens to my intermediate clone?

[21:55] <TD> my public repo, effectively

[21:56] *** jsick3 left
[21:56] <canton7> nothing. reset only touches the local repo

[21:56] *** ramsey left
[21:56] *** f0i left
[21:56] <TD> if i do a "git push" ?

[21:57] <canton7> you'll need to force the push. see !rewriting_public_history

[21:57] <gitinfo> Rewriting public history is a very bad idea.  Anyone else who may have pulled the old history will have to `git pull --rebase` and even worse things if they have tagged or branched, so you must publish your humiliation so they know what to do.  You will need to `git push -f` to force the push.  The server may not allow this.  See receive.denyNonFastForwards (git-config)

[21:57] *** rgr_ joined
[21:57] *** TrineLocke left
[21:57] *** rgr_ left
[21:57] *** Gorkyman_ joined
[21:58] <TD> huh

[21:58] *** Laibsch joined
[21:58] *** baburdick left
[21:59] *** Gorkyman left
[21:59] *** t4nkd left
[22:00] *** baburdick joined
[22:00] *** umren left
[22:00] *** kennethreitz left
[22:01] *** bartek left
[22:01] *** flaguy48 joined
[22:02] *** rgr joined
[22:02] *** tommyvyo left
[22:02] *** ZGirl joined
[22:03] *** dorkmafia1 joined
[22:03] *** dorkmafia left
[22:04] *** kennethreitz joined
[22:04] <ZGirl> Hello. I committed some work before git pull'ing, and there was a new commit that caused a merge. Is there an easy way to undo so I can do git pull --rebase?

[22:05] <canton7> git reset --hard ORIG_HEAD; git reset --hard HEAD@{1} if you haven't moved HEAD since

[22:05] <canton7> I'll clarify: you can use git reset --hard HEAD@{1} if you haven't moved HEAD in the meantime. git reset --hard ORIG_HEAD should work as long as you haven't done another merge/reset

[22:06] *** glcrazy joined
[22:06] <cbreak> or git reflog and find the correct commit the hard way

[22:06] *** rgr_ joined
[22:06] *** proq` joined
[22:06] *** proq left
[22:07] *** babilen left
[22:07] *** babilen joined
[22:07] *** Heimidal joined
[22:08] *** whitman left
[22:08] *** Akufen_ left
[22:09] *** Heimidal left
[22:09] *** Heimidal joined
[22:10] *** joshsmith left
[22:11] *** Biopandemic left
[22:11] *** cannonball left
[22:11] *** ZGirl left
[22:11] *** thursday joined
[22:11] *** dnyy_ left
[22:12] *** dnyy joined
[22:13] *** diverdude joined
[22:14] <diverdude> Why do ppl hate gitosis so much?

[22:14] <cbreak> because people ask questions about it

[22:14] <diverdude> heh

[22:14] <kevlarman> diverdude: because it's no longer maintained

[22:14] <cbreak> if no one would ask, no one would care that it's dead since ages

[22:15] <cbreak> but now people complain about not getting help

[22:15] *** Gorkyman joined
[22:15] <kevlarman> and gitolite is better in every way except sitaram's poor choice of language :P

[22:15] *** f0i joined
[22:15] <jast> well at least it's not python

[22:15] <kevlarman> jast: python is better than perl

[22:16] <kevlarman> even though there's lots of things i hate about it

[22:16] <cbreak> how so?

[22:16] *** kattatzu joined
[22:16] *** erichynds joined
[22:16] *** Ownatik left
[22:16] *** Gorkyman_ left
[22:16] <diverdude> what is the recommended git-webfront? is it really gitweb?

[22:16] *** canton7 left
[22:17] <kevlarman> diverdude: it's whatever fits your needs better

[22:17] <kevlarman> cbreak: perl has lots of things that are great for write-only code

[22:17] <diverdude> kevlarman: mmm ok...there seem to be quite a lot so can be hard to know which one fits my needs better

[22:18] *** rgr_ left
[22:18] <kevlarman> well, what don't you like about gitweb?

[22:18] <jast> you can write write-only code in any language

[22:18] <diverdude> kevlarman: i did not try gitweb yet so i dont know if i like it or not :)

[22:18] <kevlarman> jast: doesn't mean the language should be making it easier on you

[22:18] <jast> and I don't find it harder to avoid in perl than in other languages

[22:19] <diverdude> kevlarman: so far i have come to the conclusion that it not gonna be gitlab :)

[22:19] *** koo4 joined
[22:19] <kevlarman> diverdude: well git instaweb is easy to try

[22:19] <diverdude> kevlarman: ok that sounds nice

[22:19] *** Targen left
[22:20] *** Dave^|| left
[22:20] <diverdude> kevlarman: do you know if there is a demo of it somewhere?

[22:20] <kevlarman> diverdude: every single git repository

[22:20] *** scelis joined
[22:20] <kevlarman> just run git instaweb in any of your local repositories

[22:21] <diverdude> kevlarman: how run?

[22:21] <kevlarman> diverdude: "git instaweb"

[22:21] <kevlarman> it will spawn a webserver with gitweb and point your browser at it

[22:21] <diverdude> kevlarman: on my client as well?

[22:22] <kevlarman> diverdude: this involves no server at all

[22:22] <ldlework> How do you create a branch from the head of another branch containing no history, only the head revision?

[22:22] *** cccaldas left
[22:22] <cbreak> ldlework: man git-checckout --orphan

[22:23] <diverdude> kevlarman: i was looking for something like github where there is a nice codebrowsing interface

[22:23] <cbreak> you can make your initial commit with git commit-tree or similar.

[22:23] <xxiao> is there a git UI that shows diff between two branches?

[22:23] <cbreak> xxiao: man git-diff

[22:23] <gitinfo> xxiao: the git-diff manpage is available at http://jk.gs/git-diff.html

[22:23] <xxiao> it's CLI though

[22:23] <cbreak> yes.

[22:23] <xxiao> i mean graphic UI

[22:23] <cbreak> oh :(

[22:23] <xxiao> gitk, gitg etc does not really show the diff in a window

[22:23] <cbreak> did you look at man git-difftool?

[22:23] <gitinfo> the git-difftool manpage is available at http://jk.gs/git-difftool.html

[22:24] <kevlarman> xxiao: you can set the difftool to something graphical

[22:24] <xxiao> kevlarman: thanks, let me try meld then

[22:24] <cbreak> on OS X there's opendiff for example, but I don't like it much

[22:24] *** mandric joined
[22:24] <cbreak> (well, as diff tool it's good, but ... not that good)

[22:25] <kevlarman> diverdude: you mean all the ajaxy stuff?

[22:25] *** xerora joined
[22:26] <mugwump> diverdude: don't github make native a macos x client?

[22:27] *** kattatzu left
[22:27] <mugwump> http://mac.github.com/

[22:27] *** kaushik_ left
[22:27] <xxiao> sadly, just like mergetool, difftool will diff one file a tile

[22:27] <xxiao> s/tile/time

[22:28] <xxiao> on the other hand, probably it's meld's responsibility to diff two git repo/branches

[22:28] *** spiette joined
[22:28] *** ThomasLocke left
[22:28] *** snearch left
[22:29] *** TD left
[22:29] *** thiago joined
[22:29] *** baburdick left
[22:30] *** patrick99e99 left
[22:30] <diverdude> kevlarman: mmm well ajax is not necessary...just you know a place where i can browse all the masterrepos i have on my server

[22:30] *** baburdick joined
[22:30] <kevlarman> diverdude: then gitweb does that

[22:30] <xxiao> just found there is a git-meld on github

[22:30] <diverdude> kevlarman: so that i can get an overview of what projects i have going on and what i did last time i worked on each project

[22:30] *** mloskot left
[22:30] *** cenuij left
[22:31] *** mloskot joined
[22:31] *** mloskot left
[22:31] *** mloskot joined
[22:31] <kevlarman> diverdude: this is the part where you just try git instaweb and see how you like it

[22:32] <diverdude> kevlarman: seems i have to set up lighttpd first

[22:32] <kevlarman> diverdude: shouldn't need it for instaweb

[22:32] *** Spockz` joined
[22:32] <kevlarman> or maybe you do

[22:32] *** vervic left
[22:32] <diverdude> kevlarman: lighttpd not found. Install lighttpd or use --httpd to specify another httpd daemon.

[22:33] <kevlarman> http://repo.or.cz/ <- this is a really huge gitweb

[22:34] *** f0i left
[22:35] *** macRover joined
[22:35] <cmn> that means you need to install it, instaweb will set it up, but you need to tell it what server to use

[22:36] *** patrick99e99 joined
[22:36] <diverdude> kevlarman: aha interesting...but it seems the sourcecode cannot be browsed?

[22:36] <cmn> yes it can

[22:37] <kevlarman> diverdude: click on a tree

[22:37] <cmn> click on 'tree'

[22:38] *** koo4 left
[22:38] *** thiago left
[22:38] *** Targen joined
[22:38] <mugwump> it's pretty craptastic

[22:39] <mugwump> there are better clones out there

[22:39] <mugwump> eg, gitalist

[22:39] <mugwump> don't know if they're still maintained though, and they have more deps

[22:39] <diverdude> mugwump: yeah it looks  a bit messy i gotta say hehe

[22:39] *** macRover left
[22:39] *** n8o-mba joined
[22:39] *** n8o-mba left
[22:40] <kevlarman> diverdude: just about every one of them is going to have a demo containing its own source

[22:40] <kevlarman> so just try them all

[22:40] *** Drol^ left
[22:41] <kevlarman> diverdude: you might also like the heavier trac/redmine type things

[22:41] <kevlarman> that happen to have code browsing as one of their features

[22:42] <kevlarman> (i mention trac only because everyone knows it, redmine's biggest feature is "it's not trac")

[22:42] *** alex__c2022 left
[22:42] *** alberto56 left
[22:43] <sitaram> kevlarman: didn't read most of the backlog, but I regard perl's syntax as just a language.  Anyone who's done a bit of math knows they have symbols for everything -- languages evolve or are designed to be succinct.

[22:43] *** patrick99e99 left
[22:43] <sitaram> and that's all I will say on the matter

[22:43] <kevlarman> sitaram: i was mostly joking

[22:43] *** dv310p3r left
[22:44] *** tompickles joined
[22:44] *** tompickles left
[22:44] *** syphar left
[22:44] *** Targen left
[22:44] <sitaram> kevlarman: I know; I saw the smiley.  But there was a bit about "write-only" and so on later I wanted to respond to, so I just threw in something :)

[22:45] <sitaram> anyway it's all subjective, like vi versus emacs

[22:45] *** Spockz` left
[22:45] <sitaram> even if we pretend it is not :-)

[22:45] <kevlarman> sitaram: emacs

[22:45] <kevlarman> :D

[22:45] *** tcurdt joined
[22:45] <kevlarman> i did use perl quite a bit as a shell script replacement

[22:46] *** Spockz left
[22:46] <kevlarman> "this should be in bash but some asshole used xml"

[22:46] *** RobertLaptop left
[22:47] <diverdude> gitorious looks nice

[22:47] *** iokill left
[22:47] <friskd> Hey folks.  I just replaced some existing files , removed some submodules.

[22:48] <friskd> then pushed to origin/master

[22:48] *** whyking left
[22:48] <sitaram> diverdude: re "why do people hate gitosis": no one "hates" software, but they avoid it because the author does not respond to emails etc., and appears to have abandoned it more than 2 years ago

[22:48] <friskd> but now when my other devs fetch

[22:48] <friskd> it sees the and pulls the updates,

[22:48] <friskd> but when trying to do a merge it says everything is up to date!

[22:48] *** patrick99e99 joined
[22:49] <diverdude> sitaram: oh...i did not know gitorius is the same as gitosis

[22:49] *** RobertLaptop joined
[22:50] *** f0i joined
[22:50] *** preinheimer left
[22:50] *** scelis left
[22:50] <sitaram> diverdude: it is not; what do you mean?

[22:51] <cmn> ITYM gitolite

[22:51] <diverdude> sitaram: sry i misunderstood you

[22:51] *** Yuuhi```` left
[22:51] *** dfr|mac joined
[22:51] *** spvensko joined
[22:52] <friskd> why would git not recognize that that a merge is not up todate?

[22:52] *** rendar left
[22:52] <diverdude> so gitorius is ann active and good viewer?

[22:52] <kevlarman> diverdude: gitorius is like github

[22:53] <PerlJam>  there's also bitbucket if you don't mind its mercurial roots

[22:54] *** cccaldas joined
[22:54] <kevlarman> i think he's looking for a web view of projects, not hosting

[22:54] <diverdude> kevlarman: ohh gitorius web frontend is not for download so that it can be run private?

[22:54] *** danielpunt left
[22:54] <kevlarman> diverdude: nope

[22:55] <diverdude> damn

[22:55] <cmn> what? gitorious is GPL3

[22:55] <kevlarman> it is?

[22:55] <kevlarman> ok ignore me diverdude

[22:55] *** koo4 joined
[22:55] <cmn> it's a an absoulte PITA to install, but it can be done

[22:55] <mugwump> [citation needed]

[22:55] <kevlarman> i never bothered with any of the git hosting sites

[22:55] <diverdude> github frontend cannot be downloaded right?

[22:56] <cmn> http://gitorious.org/gitorious

[22:56] <kevlarman> diverdude: well, it can, but you can't afford the license fees

[22:56] *** rtconner joined
[22:56] <diverdude> cmn: oh dang...as impossible as gitlab?

[22:56] <cmn> diverdude: if you want github internally, you'll have to fork over some money

[22:56] <diverdude> kevlarman: no sir i can't :D

[22:56] <mugwump> $5,000/year for 20-25 users iirc

[22:56] <diverdude> nonono D

[22:56] <diverdude> :D

[22:56] <cmn> I've only ever heard bad things about installing gitorious, never actually tried myself

[22:56] *** f0i left
[22:57] <cmn> but once I looked a bit at the source, and they were using two different ruby git libraries

[22:57] *** ChrisAnn joined
[22:57] <cmn> anything ruby is a pain, apparently

[22:57] <diverdude> why do they all use ruby to build the frontend...it seems so difficult to deploy

[22:57] <cmn> it's what the cool kids use these days

[22:58] *** psoo left
[22:58] <cmn> it's not just ruby, it's ruby on rails, which is the web framework

[22:58] <mugwump> no, the coolest kids are using languages you've probably never heard of

[22:58] <kevlarman> mugwump: i use python on planes

[22:58] <diverdude> cmn: yeah ror...thats what i meant

[22:58] <cmn> whenever I use anything ruby, I have to install a shitload of gems, but other than that, it seems to work fine

[22:59] <cmn> I'll have to try to install gitorious and/or gitlab at work to see how hard it actually is

[22:59] <diverdude> cmn: gitlab dont work fine :(

[22:59] <kevlarman> cmn: the separate webserver is a huge pain

[22:59] <diverdude> cmn: not for me anyway

[22:59] <cmn> separate?

[22:59] *** cdrz joined
[23:00] *** baburdick left
[23:00] <cmn> you mean that WEB::Bricks thing? I thought that was just for testing

[23:00] <diverdude> cmn: can i look over your shoulder when you do it :D

[23:00] *** vervic joined
[23:01] *** baburdick joined
[23:01] *** MANCHUCK left
[23:01] <cmn> if you can find the office...

[23:01] *** tellone joined
[23:02] <cmn> or I'll blog about it, I guess

[23:02] <diverdude> do it do it doit now now now :D

[23:02] *** koo4 left
[23:03] *** hacim joined
[23:03] *** proq` left
[23:03] *** proq` joined
[23:04] <cmn> I need to be at the university in 8 hours

[23:04] <hacim> i made three commits to the wrong branch, and pushed them. people have pulled them, what is the best way to move those out of there? should I individually revert them?

[23:04] <cmn> good night gits

[23:05] <diverdude> cmn: thats 6 hours for installing gitlab and blogging and 2 hours for sleeping :P

[23:05] <kevlarman> hacim: you can revert all 3 of them together, but basically yeah

[23:05] *** tonyj joined
[23:06] <hacim> kevlarman: to revert them all at once, do I provide the commit id of the third one I want to revert? or do I provide all three commit ides?

[23:06] <hacim> s/ides/ids

[23:06] <kevlarman> hacim: either all 3 or a range

[23:07] <hacim> ok, thanks

[23:08] <diverdude> seems they have some guide here: http://gitorious.org/gitorious/pages/UbuntuInstallation

[23:09] <hacim> kevlarman: what if one of them is a merge commit

[23:10] <hacim> i guess I just ignore it and list the three

[23:10] <kevlarman> hacim: man git-revert

[23:10] <gitinfo> hacim: the git-revert manpage is available at http://jk.gs/git-revert.html

[23:10] <kevlarman> see -m

[23:10] *** alan_w left
[23:10] *** glimpsenirvana joined
[23:11] *** cenuij joined
[23:11] *** cenuij left
[23:11] *** cenuij joined
[23:11] *** spvensko left
[23:11] *** lonewulf` left
[23:12] *** monokrome left
[23:12] <hacim> thanks

[23:12] *** lonewulf` joined
[23:12] *** alester left
[23:12] *** lonewulf` left
[23:13] *** f0i joined
[23:14] *** flavius left
[23:14] *** pantsman left
[23:15] *** eijk_ left
[23:15] *** dfr|mac left
[23:15] *** Laibsch left
[23:17] *** fayimora left
[23:17] *** cakehero left
[23:18] *** icrazyhack left
[23:19] *** icrazyhack joined
[23:19] *** Soham joined
[23:19] *** glimpsenirvana left
[23:20] *** lonewulf` joined
[23:21] *** cenuij left
[23:21] *** Constant_ joined
[23:21] *** macRover joined
[23:21] *** Constant_ left
[23:22] *** Constant_ joined
[23:22] *** Constant_ left
[23:22] *** tcurdt left
[23:23] *** lonewulf` left
[23:23] *** mbroeker joined
[23:24] *** lonewulf` joined
[23:24] *** ConstantineXVI left
[23:24] *** ConstantineXVI joined
[23:24] *** mbroeker left
[23:25] *** lonewulf` left
[23:25] *** lonewulf` joined
[23:27] *** lonewulf` left
[23:27] *** lonewulf` joined
[23:28] *** z0n3d left
[23:29] *** Soham left
[23:29] *** Soham joined
[23:30] *** beaufour left
[23:30] *** gitinfo sets mode: +v Soham

[23:30] *** baburdick left
[23:30] *** beaufour joined
[23:30] *** joshsmith joined
[23:30] <Soham> Can I send now?

[23:30] <FauxFaux> Yes.

[23:31] *** Chillance left
[23:31] *** luxurymode left
[23:32] <Soham> Thanks! :)  Need help on a problem:  We're using git 1.6.3.1.  When I'm pushing to a git repo, it gives an error "error: unable to open object pack directory: ./objects/pack: Too many open files"

[23:32] *** kaushik_ joined
[23:32] *** icwiener left
[23:32] <Soham> ulimit is set to unlimited

[23:32] <Soham> and lsof doesn't say too many file are open

[23:32] <kevlarman> Soham: how did you set it to unlimited?

[23:32] *** baburdick joined
[23:33] *** v0n left
[23:34] *** john2496 left
[23:34] *** beaufour left
[23:36] *** Sonderblade left
[23:36] *** metcalfc left
[23:37] <Soham> @kevlarman - I didn't have to change it. ulimit -H = unlimited

[23:37] *** DofLeFou left
[23:37] *** vervic left
[23:38] *** Anxi80 left
[23:39] *** proq` is now known as proq

[23:39] <Soham> I also copied the repo to a different machine and face the same problem.

[23:39] *** proq left
[23:39] *** proq joined
[23:39] <rtconner> Is this manual kept up to date with new versions of git and new releases: http://schacon.github.com/git/git.html

[23:43] *** Anxi80 joined
[23:45] *** acl_ left
[23:45] <Soham> hmm. Anyone?

[23:46] <FauxFaux> rtconner: Given it was last updated over 10 releases ago, I'm going with no.

[23:46] *** macRover left
[23:46] *** kevwil joined
[23:46] *** flavius joined
[23:46] *** kermit left
[23:46] <cbreak> Soham: sounds like the server has a problem.

[23:46] <FauxFaux> Soham: git fsck && git gc && git repack -adf # on the target machine?

[23:46] *** kermit joined
[23:46] *** slicslak left
[23:46] *** j416 left
[23:46] <Soham> @FauxFaux: git fsck returns the same error

[23:47] <Soham> @cbreak: I copied the repo to a different machine and face the same problem.

[23:47] <Soham> @FauxFaux: And so does git gc

[23:47] <Soham> Even git-branch

[23:47] <cbreak> the target?

[23:47] *** Laibsch joined
[23:47] <Soham> It's a bare repo, shared among several people

[23:47] <cbreak> you pushed to a different target?

[23:47] <cbreak> and the same problem appeared?

[23:48] <Soham> sorry, target as in? I copied to a different machine (same OS etc) and pushed to that copy and same problem appeared

[23:48] <cbreak> target as in repository you push to

[23:49] <cbreak> maybe it somehow is corrupted. You could just rename it out of the way and create a new repository

[23:49] <cbreak> and push your history to that

[23:49] *** spvensko joined
[23:49] *** spvensko left
[23:49] *** spvensko joined
[23:50] *** fschuindt1 joined
[23:50] <Soham> @cbreak - ok. I will go that route now. It's sad though. Pushing to a different target (smaller footprint) on the same machine works fine.

[23:51] <rtconner> Anyone have pointers as to the best place to get the most up-to-date git manual?

[23:51] <FauxFaux> rtconner: 1) Install git.  2) "git help"

[23:51] <kevlarman> rtconner: it should be installed with git

[23:52] <rtconner> If that's the best, then thanks will use that.

[23:52] *** f0i left
[23:53] <friskd> Hey Guys, for some reason when i do a fetch, i see lots of data get downloaded, but when i do a merge it says i'm up todate. but i can see its not true as the files are not being updated.

[23:53] <friskd> Why might this be?

[23:53] *** Morphous_ left
[23:53] <FauxFaux> friskd: !gka

[23:53] <gitinfo> friskd: For a better way to view the reflog, try: gka() { gitk --all $(git log -g --format="%h" -50) "$@"; }; gka

[23:53] <FauxFaux> friskd: git branch -avv; git remote -v; you're probably not tracking what you think you are.

[23:54] *** happyface joined
[23:55] *** dermoth_ joined
[23:55] *** cdrz_ joined
[23:55] *** fayimora joined
[23:56] <happyface> I pushed a new remote branch 'experimental'. Now if I try to reset my local master, it resets to the 'experimental' branch. cat .git/HEAD says refs/heads/master

[23:57] <friskd> ok. Processing your suggestioins FauxFaux

[23:57] *** kevwil left
[23:58] *** ThePendulum joined
[23:58] <ThePendulum> Greetings

[23:58] *** nadirvardar joined
[23:58] <ThePendulum> I got a bunch of unstaged files that should be deleted, can't I rm them all at once?

[23:58] <FauxFaux> ThePendulum: man git clean

[23:58] <gitinfo> ThePendulum: the git-clean manpage is available at http://jk.gs/git-clean.html

[23:59] *** cdrz left
[23:59] *** kennethreitz left
[23:59] *** ldlework left
